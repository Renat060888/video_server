// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal_communication_analyzer.proto

#ifndef PROTOBUF_internal_5fcommunication_5fanalyzer_2eproto__INCLUDED
#define PROTOBUF_internal_5fcommunication_5fanalyzer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace video_server_protocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
void protobuf_AssignDesc_internal_5fcommunication_5fanalyzer_2eproto();
void protobuf_ShutdownFile_internal_5fcommunication_5fanalyzer_2eproto();

class ContainerAnalyticEvent;
class ContainerAnalyzeStatus;
class ContainerDpfObjreprMap;
class ContainerInitSettings;
class FilterPluginMetadata;
class FilterPluginParam;
class MessageAnalyzerProxy;
class MessageAnalyzerReal;
class MessageHeader;
class MessageModuleUniqueId;
class MessageRequestGetLastError;
class MessageRequestGetSettings;
class MessageRequestGetStatus;
class MessageRequestPause;
class MessageRequestResume;
class MessageRequestStart;
class MessageRequestStop;
class MessageResponseAnalyticEvent;
class MessageResponseGetLastError;
class MessageResponseGetSettings;
class MessageResponseGetStatus;
class MessageResponsePause;
class MessageResponseResume;
class MessageResponseStart;
class MessageResponseStop;
class ProtobufInternalCommunicateAnalyzer;

enum EAnalyzeState {
  AS_UNAVAILABLE = 0,
  AS_PREPARING = 1,
  AS_READY = 2,
  AS_ACTIVE = 3,
  AS_CRUSHED = 4,
  AS_UNDEFINED = 5
};
bool EAnalyzeState_IsValid(int value);
const EAnalyzeState EAnalyzeState_MIN = AS_UNAVAILABLE;
const EAnalyzeState EAnalyzeState_MAX = AS_UNDEFINED;
const int EAnalyzeState_ARRAYSIZE = EAnalyzeState_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAnalyzeState_descriptor();
inline const ::std::string& EAnalyzeState_Name(EAnalyzeState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAnalyzeState_descriptor(), value);
}
inline bool EAnalyzeState_Parse(
    const ::std::string& name, EAnalyzeState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAnalyzeState>(
    EAnalyzeState_descriptor(), name, value);
}
enum ESyncCommandType {
  SCT_START = 0,
  SCT_PAUSE = 1,
  SCT_RESUME = 2,
  SCT_STOP = 3,
  SCT_GET_ACCUMULATED_EVENTS = 4,
  SCT_GET_STATUS = 5,
  SCT_GET_SETTINGS = 6,
  SCT_GET_LAST_ERROR = 7,
  SCT_UNDEFINED = 8
};
bool ESyncCommandType_IsValid(int value);
const ESyncCommandType ESyncCommandType_MIN = SCT_START;
const ESyncCommandType ESyncCommandType_MAX = SCT_UNDEFINED;
const int ESyncCommandType_ARRAYSIZE = ESyncCommandType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESyncCommandType_descriptor();
inline const ::std::string& ESyncCommandType_Name(ESyncCommandType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESyncCommandType_descriptor(), value);
}
inline bool ESyncCommandType_Parse(
    const ::std::string& name, ESyncCommandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESyncCommandType>(
    ESyncCommandType_descriptor(), name, value);
}
enum EWho {
  W_ANALYZER_PROXY = 0,
  W_ANALYZER_REAL = 1,
  W_UNDEFINED = 2
};
bool EWho_IsValid(int value);
const EWho EWho_MIN = W_ANALYZER_PROXY;
const EWho EWho_MAX = W_UNDEFINED;
const int EWho_ARRAYSIZE = EWho_MAX + 1;

const ::google::protobuf::EnumDescriptor* EWho_descriptor();
inline const ::std::string& EWho_Name(EWho value) {
  return ::google::protobuf::internal::NameOfEnum(
    EWho_descriptor(), value);
}
inline bool EWho_Parse(
    const ::std::string& name, EWho* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EWho>(
    EWho_descriptor(), name, value);
}
// ===================================================================

class ContainerDpfObjreprMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:video_server_protocol.ContainerDpfObjreprMap) */ {
 public:
  ContainerDpfObjreprMap();
  virtual ~ContainerDpfObjreprMap();

  ContainerDpfObjreprMap(const ContainerDpfObjreprMap& from);

  inline ContainerDpfObjreprMap& operator=(const ContainerDpfObjreprMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContainerDpfObjreprMap& default_instance();

  void Swap(ContainerDpfObjreprMap* other);

  // implements Message ----------------------------------------------

  inline ContainerDpfObjreprMap* New() const { return New(NULL); }

  ContainerDpfObjreprMap* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContainerDpfObjreprMap& from);
  void MergeFrom(const ContainerDpfObjreprMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContainerDpfObjreprMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string dpf_label = 1;
  bool has_dpf_label() const;
  void clear_dpf_label();
  static const int kDpfLabelFieldNumber = 1;
  const ::std::string& dpf_label() const;
  void set_dpf_label(const ::std::string& value);
  void set_dpf_label(const char* value);
  void set_dpf_label(const char* value, size_t size);
  ::std::string* mutable_dpf_label();
  ::std::string* release_dpf_label();
  void set_allocated_dpf_label(::std::string* dpf_label);

  // required uint64 objrepr_classinfo_id = 2;
  bool has_objrepr_classinfo_id() const;
  void clear_objrepr_classinfo_id();
  static const int kObjreprClassinfoIdFieldNumber = 2;
  ::google::protobuf::uint64 objrepr_classinfo_id() const;
  void set_objrepr_classinfo_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:video_server_protocol.ContainerDpfObjreprMap)
 private:
  inline void set_has_dpf_label();
  inline void clear_has_dpf_label();
  inline void set_has_objrepr_classinfo_id();
  inline void clear_has_objrepr_classinfo_id();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr dpf_label_;
  ::google::protobuf::uint64 objrepr_classinfo_id_;
  friend void  protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_AssignDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_ShutdownFile_internal_5fcommunication_5fanalyzer_2eproto();

  void InitAsDefaultInstance();
  static ContainerDpfObjreprMap* default_instance_;
};
// -------------------------------------------------------------------

class ContainerAnalyticEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:video_server_protocol.ContainerAnalyticEvent) */ {
 public:
  ContainerAnalyticEvent();
  virtual ~ContainerAnalyticEvent();

  ContainerAnalyticEvent(const ContainerAnalyticEvent& from);

  inline ContainerAnalyticEvent& operator=(const ContainerAnalyticEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContainerAnalyticEvent& default_instance();

  void Swap(ContainerAnalyticEvent* other);

  // implements Message ----------------------------------------------

  inline ContainerAnalyticEvent* New() const { return New(NULL); }

  ContainerAnalyticEvent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContainerAnalyticEvent& from);
  void MergeFrom(const ContainerAnalyticEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContainerAnalyticEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 sensor_id = 1;
  bool has_sensor_id() const;
  void clear_sensor_id();
  static const int kSensorIdFieldNumber = 1;
  ::google::protobuf::uint64 sensor_id() const;
  void set_sensor_id(::google::protobuf::uint64 value);

  // required string event_message = 2;
  bool has_event_message() const;
  void clear_event_message();
  static const int kEventMessageFieldNumber = 2;
  const ::std::string& event_message() const;
  void set_event_message(const ::std::string& value);
  void set_event_message(const char* value);
  void set_event_message(const char* value, size_t size);
  ::std::string* mutable_event_message();
  ::std::string* release_event_message();
  void set_allocated_event_message(::std::string* event_message);

  // required string plugin_name = 3;
  bool has_plugin_name() const;
  void clear_plugin_name();
  static const int kPluginNameFieldNumber = 3;
  const ::std::string& plugin_name() const;
  void set_plugin_name(const ::std::string& value);
  void set_plugin_name(const char* value);
  void set_plugin_name(const char* value, size_t size);
  ::std::string* mutable_plugin_name();
  ::std::string* release_plugin_name();
  void set_allocated_plugin_name(::std::string* plugin_name);

  // required string plugin_type = 4;
  bool has_plugin_type() const;
  void clear_plugin_type();
  static const int kPluginTypeFieldNumber = 4;
  const ::std::string& plugin_type() const;
  void set_plugin_type(const ::std::string& value);
  void set_plugin_type(const char* value);
  void set_plugin_type(const char* value, size_t size);
  ::std::string* mutable_plugin_type();
  ::std::string* release_plugin_type();
  void set_allocated_plugin_type(::std::string* plugin_type);

  // required string processing_id = 5;
  bool has_processing_id() const;
  void clear_processing_id();
  static const int kProcessingIdFieldNumber = 5;
  const ::std::string& processing_id() const;
  void set_processing_id(const ::std::string& value);
  void set_processing_id(const char* value);
  void set_processing_id(const char* value, size_t size);
  ::std::string* mutable_processing_id();
  ::std::string* release_processing_id();
  void set_allocated_processing_id(::std::string* processing_id);

  // @@protoc_insertion_point(class_scope:video_server_protocol.ContainerAnalyticEvent)
 private:
  inline void set_has_sensor_id();
  inline void clear_has_sensor_id();
  inline void set_has_event_message();
  inline void clear_has_event_message();
  inline void set_has_plugin_name();
  inline void clear_has_plugin_name();
  inline void set_has_plugin_type();
  inline void clear_has_plugin_type();
  inline void set_has_processing_id();
  inline void clear_has_processing_id();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 sensor_id_;
  ::google::protobuf::internal::ArenaStringPtr event_message_;
  ::google::protobuf::internal::ArenaStringPtr plugin_name_;
  ::google::protobuf::internal::ArenaStringPtr plugin_type_;
  ::google::protobuf::internal::ArenaStringPtr processing_id_;
  friend void  protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_AssignDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_ShutdownFile_internal_5fcommunication_5fanalyzer_2eproto();

  void InitAsDefaultInstance();
  static ContainerAnalyticEvent* default_instance_;
};
// -------------------------------------------------------------------

class ContainerAnalyzeStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:video_server_protocol.ContainerAnalyzeStatus) */ {
 public:
  ContainerAnalyzeStatus();
  virtual ~ContainerAnalyzeStatus();

  ContainerAnalyzeStatus(const ContainerAnalyzeStatus& from);

  inline ContainerAnalyzeStatus& operator=(const ContainerAnalyzeStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContainerAnalyzeStatus& default_instance();

  void Swap(ContainerAnalyzeStatus* other);

  // implements Message ----------------------------------------------

  inline ContainerAnalyzeStatus* New() const { return New(NULL); }

  ContainerAnalyzeStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContainerAnalyzeStatus& from);
  void MergeFrom(const ContainerAnalyzeStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContainerAnalyzeStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 sensor_id = 1;
  bool has_sensor_id() const;
  void clear_sensor_id();
  static const int kSensorIdFieldNumber = 1;
  ::google::protobuf::uint64 sensor_id() const;
  void set_sensor_id(::google::protobuf::uint64 value);

  // required .video_server_protocol.EAnalyzeState state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::video_server_protocol::EAnalyzeState state() const;
  void set_state(::video_server_protocol::EAnalyzeState value);

  // required string processing_id = 3;
  bool has_processing_id() const;
  void clear_processing_id();
  static const int kProcessingIdFieldNumber = 3;
  const ::std::string& processing_id() const;
  void set_processing_id(const ::std::string& value);
  void set_processing_id(const char* value);
  void set_processing_id(const char* value, size_t size);
  ::std::string* mutable_processing_id();
  ::std::string* release_processing_id();
  void set_allocated_processing_id(::std::string* processing_id);

  // required string processing_name = 4;
  bool has_processing_name() const;
  void clear_processing_name();
  static const int kProcessingNameFieldNumber = 4;
  const ::std::string& processing_name() const;
  void set_processing_name(const ::std::string& value);
  void set_processing_name(const char* value);
  void set_processing_name(const char* value, size_t size);
  ::std::string* mutable_processing_name();
  ::std::string* release_processing_name();
  void set_allocated_processing_name(::std::string* processing_name);

  // required uint64 profile_id = 5;
  bool has_profile_id() const;
  void clear_profile_id();
  static const int kProfileIdFieldNumber = 5;
  ::google::protobuf::uint64 profile_id() const;
  void set_profile_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:video_server_protocol.ContainerAnalyzeStatus)
 private:
  inline void set_has_sensor_id();
  inline void clear_has_sensor_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_processing_id();
  inline void clear_has_processing_id();
  inline void set_has_processing_name();
  inline void clear_has_processing_name();
  inline void set_has_profile_id();
  inline void clear_has_profile_id();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 sensor_id_;
  ::google::protobuf::internal::ArenaStringPtr processing_id_;
  ::google::protobuf::internal::ArenaStringPtr processing_name_;
  ::google::protobuf::uint64 profile_id_;
  int state_;
  friend void  protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_AssignDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_ShutdownFile_internal_5fcommunication_5fanalyzer_2eproto();

  void InitAsDefaultInstance();
  static ContainerAnalyzeStatus* default_instance_;
};
// -------------------------------------------------------------------

class FilterPluginParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:video_server_protocol.FilterPluginParam) */ {
 public:
  FilterPluginParam();
  virtual ~FilterPluginParam();

  FilterPluginParam(const FilterPluginParam& from);

  inline FilterPluginParam& operator=(const FilterPluginParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FilterPluginParam& default_instance();

  void Swap(FilterPluginParam* other);

  // implements Message ----------------------------------------------

  inline FilterPluginParam* New() const { return New(NULL); }

  FilterPluginParam* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FilterPluginParam& from);
  void MergeFrom(const FilterPluginParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FilterPluginParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // required string val = 2;
  bool has_val() const;
  void clear_val();
  static const int kValFieldNumber = 2;
  const ::std::string& val() const;
  void set_val(const ::std::string& value);
  void set_val(const char* value);
  void set_val(const char* value, size_t size);
  ::std::string* mutable_val();
  ::std::string* release_val();
  void set_allocated_val(::std::string* val);

  // @@protoc_insertion_point(class_scope:video_server_protocol.FilterPluginParam)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_val();
  inline void clear_has_val();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr val_;
  friend void  protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_AssignDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_ShutdownFile_internal_5fcommunication_5fanalyzer_2eproto();

  void InitAsDefaultInstance();
  static FilterPluginParam* default_instance_;
};
// -------------------------------------------------------------------

class FilterPluginMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:video_server_protocol.FilterPluginMetadata) */ {
 public:
  FilterPluginMetadata();
  virtual ~FilterPluginMetadata();

  FilterPluginMetadata(const FilterPluginMetadata& from);

  inline FilterPluginMetadata& operator=(const FilterPluginMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FilterPluginMetadata& default_instance();

  void Swap(FilterPluginMetadata* other);

  // implements Message ----------------------------------------------

  inline FilterPluginMetadata* New() const { return New(NULL); }

  FilterPluginMetadata* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FilterPluginMetadata& from);
  void MergeFrom(const FilterPluginMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FilterPluginMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string plugin_static_name = 1;
  bool has_plugin_static_name() const;
  void clear_plugin_static_name();
  static const int kPluginStaticNameFieldNumber = 1;
  const ::std::string& plugin_static_name() const;
  void set_plugin_static_name(const ::std::string& value);
  void set_plugin_static_name(const char* value);
  void set_plugin_static_name(const char* value, size_t size);
  ::std::string* mutable_plugin_static_name();
  ::std::string* release_plugin_static_name();
  void set_allocated_plugin_static_name(::std::string* plugin_static_name);

  // required string gstreamer_element_name = 2;
  bool has_gstreamer_element_name() const;
  void clear_gstreamer_element_name();
  static const int kGstreamerElementNameFieldNumber = 2;
  const ::std::string& gstreamer_element_name() const;
  void set_gstreamer_element_name(const ::std::string& value);
  void set_gstreamer_element_name(const char* value);
  void set_gstreamer_element_name(const char* value, size_t size);
  ::std::string* mutable_gstreamer_element_name();
  ::std::string* release_gstreamer_element_name();
  void set_allocated_gstreamer_element_name(::std::string* gstreamer_element_name);

  // repeated .video_server_protocol.FilterPluginParam params = 3;
  int params_size() const;
  void clear_params();
  static const int kParamsFieldNumber = 3;
  const ::video_server_protocol::FilterPluginParam& params(int index) const;
  ::video_server_protocol::FilterPluginParam* mutable_params(int index);
  ::video_server_protocol::FilterPluginParam* add_params();
  ::google::protobuf::RepeatedPtrField< ::video_server_protocol::FilterPluginParam >*
      mutable_params();
  const ::google::protobuf::RepeatedPtrField< ::video_server_protocol::FilterPluginParam >&
      params() const;

  // @@protoc_insertion_point(class_scope:video_server_protocol.FilterPluginMetadata)
 private:
  inline void set_has_plugin_static_name();
  inline void clear_has_plugin_static_name();
  inline void set_has_gstreamer_element_name();
  inline void clear_has_gstreamer_element_name();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr plugin_static_name_;
  ::google::protobuf::internal::ArenaStringPtr gstreamer_element_name_;
  ::google::protobuf::RepeatedPtrField< ::video_server_protocol::FilterPluginParam > params_;
  friend void  protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_AssignDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_ShutdownFile_internal_5fcommunication_5fanalyzer_2eproto();

  void InitAsDefaultInstance();
  static FilterPluginMetadata* default_instance_;
};
// -------------------------------------------------------------------

class ContainerInitSettings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:video_server_protocol.ContainerInitSettings) */ {
 public:
  ContainerInitSettings();
  virtual ~ContainerInitSettings();

  ContainerInitSettings(const ContainerInitSettings& from);

  inline ContainerInitSettings& operator=(const ContainerInitSettings& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContainerInitSettings& default_instance();

  void Swap(ContainerInitSettings* other);

  // implements Message ----------------------------------------------

  inline ContainerInitSettings* New() const { return New(NULL); }

  ContainerInitSettings* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContainerInitSettings& from);
  void MergeFrom(const ContainerInitSettings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContainerInitSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 sensor_id = 1;
  bool has_sensor_id() const;
  void clear_sensor_id();
  static const int kSensorIdFieldNumber = 1;
  ::google::protobuf::uint64 sensor_id() const;
  void set_sensor_id(::google::protobuf::uint64 value);

  // required uint64 profile_id = 2;
  bool has_profile_id() const;
  void clear_profile_id();
  static const int kProfileIdFieldNumber = 2;
  ::google::protobuf::uint64 profile_id() const;
  void set_profile_id(::google::protobuf::uint64 value);

  // required string source_url = 3;
  bool has_source_url() const;
  void clear_source_url();
  static const int kSourceUrlFieldNumber = 3;
  const ::std::string& source_url() const;
  void set_source_url(const ::std::string& value);
  void set_source_url(const char* value);
  void set_source_url(const char* value, size_t size);
  ::std::string* mutable_source_url();
  ::std::string* release_source_url();
  void set_allocated_source_url(::std::string* source_url);

  // required string processing_id = 4;
  bool has_processing_id() const;
  void clear_processing_id();
  static const int kProcessingIdFieldNumber = 4;
  const ::std::string& processing_id() const;
  void set_processing_id(const ::std::string& value);
  void set_processing_id(const char* value);
  void set_processing_id(const char* value, size_t size);
  ::std::string* mutable_processing_id();
  ::std::string* release_processing_id();
  void set_allocated_processing_id(::std::string* processing_id);

  // required string processing_name = 5;
  bool has_processing_name() const;
  void clear_processing_name();
  static const int kProcessingNameFieldNumber = 5;
  const ::std::string& processing_name() const;
  void set_processing_name(const ::std::string& value);
  void set_processing_name(const char* value);
  void set_processing_name(const char* value, size_t size);
  ::std::string* mutable_processing_name();
  ::std::string* release_processing_name();
  void set_allocated_processing_name(::std::string* processing_name);

  // repeated .video_server_protocol.ContainerDpfObjreprMap dpf_objrepr_map = 6;
  int dpf_objrepr_map_size() const;
  void clear_dpf_objrepr_map();
  static const int kDpfObjreprMapFieldNumber = 6;
  const ::video_server_protocol::ContainerDpfObjreprMap& dpf_objrepr_map(int index) const;
  ::video_server_protocol::ContainerDpfObjreprMap* mutable_dpf_objrepr_map(int index);
  ::video_server_protocol::ContainerDpfObjreprMap* add_dpf_objrepr_map();
  ::google::protobuf::RepeatedPtrField< ::video_server_protocol::ContainerDpfObjreprMap >*
      mutable_dpf_objrepr_map();
  const ::google::protobuf::RepeatedPtrField< ::video_server_protocol::ContainerDpfObjreprMap >&
      dpf_objrepr_map() const;

  // required string intervideosink_channel_name = 7;
  bool has_intervideosink_channel_name() const;
  void clear_intervideosink_channel_name();
  static const int kIntervideosinkChannelNameFieldNumber = 7;
  const ::std::string& intervideosink_channel_name() const;
  void set_intervideosink_channel_name(const ::std::string& value);
  void set_intervideosink_channel_name(const char* value);
  void set_intervideosink_channel_name(const char* value, size_t size);
  ::std::string* mutable_intervideosink_channel_name();
  ::std::string* release_intervideosink_channel_name();
  void set_allocated_intervideosink_channel_name(::std::string* intervideosink_channel_name);

  // required string shm_rtp_stream_caps = 8;
  bool has_shm_rtp_stream_caps() const;
  void clear_shm_rtp_stream_caps();
  static const int kShmRtpStreamCapsFieldNumber = 8;
  const ::std::string& shm_rtp_stream_caps() const;
  void set_shm_rtp_stream_caps(const ::std::string& value);
  void set_shm_rtp_stream_caps(const char* value);
  void set_shm_rtp_stream_caps(const char* value, size_t size);
  ::std::string* mutable_shm_rtp_stream_caps();
  ::std::string* release_shm_rtp_stream_caps();
  void set_allocated_shm_rtp_stream_caps(::std::string* shm_rtp_stream_caps);

  // required string shm_rtp_stream_encoding = 9;
  bool has_shm_rtp_stream_encoding() const;
  void clear_shm_rtp_stream_encoding();
  static const int kShmRtpStreamEncodingFieldNumber = 9;
  const ::std::string& shm_rtp_stream_encoding() const;
  void set_shm_rtp_stream_encoding(const ::std::string& value);
  void set_shm_rtp_stream_encoding(const char* value);
  void set_shm_rtp_stream_encoding(const char* value, size_t size);
  ::std::string* mutable_shm_rtp_stream_encoding();
  ::std::string* release_shm_rtp_stream_encoding();
  void set_allocated_shm_rtp_stream_encoding(::std::string* shm_rtp_stream_encoding);

  // repeated .video_server_protocol.FilterPluginMetadata plugins = 10;
  int plugins_size() const;
  void clear_plugins();
  static const int kPluginsFieldNumber = 10;
  const ::video_server_protocol::FilterPluginMetadata& plugins(int index) const;
  ::video_server_protocol::FilterPluginMetadata* mutable_plugins(int index);
  ::video_server_protocol::FilterPluginMetadata* add_plugins();
  ::google::protobuf::RepeatedPtrField< ::video_server_protocol::FilterPluginMetadata >*
      mutable_plugins();
  const ::google::protobuf::RepeatedPtrField< ::video_server_protocol::FilterPluginMetadata >&
      plugins() const;

  // required string VideoReceiverRtpPayloadSocket = 11;
  bool has_videoreceiverrtppayloadsocket() const;
  void clear_videoreceiverrtppayloadsocket();
  static const int kVideoReceiverRtpPayloadSocketFieldNumber = 11;
  const ::std::string& videoreceiverrtppayloadsocket() const;
  void set_videoreceiverrtppayloadsocket(const ::std::string& value);
  void set_videoreceiverrtppayloadsocket(const char* value);
  void set_videoreceiverrtppayloadsocket(const char* value, size_t size);
  ::std::string* mutable_videoreceiverrtppayloadsocket();
  ::std::string* release_videoreceiverrtppayloadsocket();
  void set_allocated_videoreceiverrtppayloadsocket(::std::string* videoreceiverrtppayloadsocket);

  // required int32 processing_flags = 12;
  bool has_processing_flags() const;
  void clear_processing_flags();
  static const int kProcessingFlagsFieldNumber = 12;
  ::google::protobuf::int32 processing_flags() const;
  void set_processing_flags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:video_server_protocol.ContainerInitSettings)
 private:
  inline void set_has_sensor_id();
  inline void clear_has_sensor_id();
  inline void set_has_profile_id();
  inline void clear_has_profile_id();
  inline void set_has_source_url();
  inline void clear_has_source_url();
  inline void set_has_processing_id();
  inline void clear_has_processing_id();
  inline void set_has_processing_name();
  inline void clear_has_processing_name();
  inline void set_has_intervideosink_channel_name();
  inline void clear_has_intervideosink_channel_name();
  inline void set_has_shm_rtp_stream_caps();
  inline void clear_has_shm_rtp_stream_caps();
  inline void set_has_shm_rtp_stream_encoding();
  inline void clear_has_shm_rtp_stream_encoding();
  inline void set_has_videoreceiverrtppayloadsocket();
  inline void clear_has_videoreceiverrtppayloadsocket();
  inline void set_has_processing_flags();
  inline void clear_has_processing_flags();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 sensor_id_;
  ::google::protobuf::uint64 profile_id_;
  ::google::protobuf::internal::ArenaStringPtr source_url_;
  ::google::protobuf::internal::ArenaStringPtr processing_id_;
  ::google::protobuf::internal::ArenaStringPtr processing_name_;
  ::google::protobuf::RepeatedPtrField< ::video_server_protocol::ContainerDpfObjreprMap > dpf_objrepr_map_;
  ::google::protobuf::internal::ArenaStringPtr intervideosink_channel_name_;
  ::google::protobuf::internal::ArenaStringPtr shm_rtp_stream_caps_;
  ::google::protobuf::internal::ArenaStringPtr shm_rtp_stream_encoding_;
  ::google::protobuf::RepeatedPtrField< ::video_server_protocol::FilterPluginMetadata > plugins_;
  ::google::protobuf::internal::ArenaStringPtr videoreceiverrtppayloadsocket_;
  ::google::protobuf::int32 processing_flags_;
  friend void  protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_AssignDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_ShutdownFile_internal_5fcommunication_5fanalyzer_2eproto();

  void InitAsDefaultInstance();
  static ContainerInitSettings* default_instance_;
};
// -------------------------------------------------------------------

class MessageModuleUniqueId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:video_server_protocol.MessageModuleUniqueId) */ {
 public:
  MessageModuleUniqueId();
  virtual ~MessageModuleUniqueId();

  MessageModuleUniqueId(const MessageModuleUniqueId& from);

  inline MessageModuleUniqueId& operator=(const MessageModuleUniqueId& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageModuleUniqueId& default_instance();

  void Swap(MessageModuleUniqueId* other);

  // implements Message ----------------------------------------------

  inline MessageModuleUniqueId* New() const { return New(NULL); }

  MessageModuleUniqueId* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageModuleUniqueId& from);
  void MergeFrom(const MessageModuleUniqueId& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageModuleUniqueId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ip_octets = 1;
  bool has_ip_octets() const;
  void clear_ip_octets();
  static const int kIpOctetsFieldNumber = 1;
  ::google::protobuf::int32 ip_octets() const;
  void set_ip_octets(::google::protobuf::int32 value);

  // required int32 pid = 2;
  bool has_pid() const;
  void clear_pid();
  static const int kPidFieldNumber = 2;
  ::google::protobuf::int32 pid() const;
  void set_pid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:video_server_protocol.MessageModuleUniqueId)
 private:
  inline void set_has_ip_octets();
  inline void clear_has_ip_octets();
  inline void set_has_pid();
  inline void clear_has_pid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 ip_octets_;
  ::google::protobuf::int32 pid_;
  friend void  protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_AssignDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_ShutdownFile_internal_5fcommunication_5fanalyzer_2eproto();

  void InitAsDefaultInstance();
  static MessageModuleUniqueId* default_instance_;
};
// -------------------------------------------------------------------

class MessageHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:video_server_protocol.MessageHeader) */ {
 public:
  MessageHeader();
  virtual ~MessageHeader();

  MessageHeader(const MessageHeader& from);

  inline MessageHeader& operator=(const MessageHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageHeader& default_instance();

  void Swap(MessageHeader* other);

  // implements Message ----------------------------------------------

  inline MessageHeader* New() const { return New(NULL); }

  MessageHeader* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageHeader& from);
  void MergeFrom(const MessageHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .video_server_protocol.MessageModuleUniqueId id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::video_server_protocol::MessageModuleUniqueId& id() const;
  ::video_server_protocol::MessageModuleUniqueId* mutable_id();
  ::video_server_protocol::MessageModuleUniqueId* release_id();
  void set_allocated_id(::video_server_protocol::MessageModuleUniqueId* id);

  // required string module_name = 2;
  bool has_module_name() const;
  void clear_module_name();
  static const int kModuleNameFieldNumber = 2;
  const ::std::string& module_name() const;
  void set_module_name(const ::std::string& value);
  void set_module_name(const char* value);
  void set_module_name(const char* value, size_t size);
  ::std::string* mutable_module_name();
  ::std::string* release_module_name();
  void set_allocated_module_name(::std::string* module_name);

  // optional string last_error = 3;
  bool has_last_error() const;
  void clear_last_error();
  static const int kLastErrorFieldNumber = 3;
  const ::std::string& last_error() const;
  void set_last_error(const ::std::string& value);
  void set_last_error(const char* value);
  void set_last_error(const char* value, size_t size);
  ::std::string* mutable_last_error();
  ::std::string* release_last_error();
  void set_allocated_last_error(::std::string* last_error);

  // @@protoc_insertion_point(class_scope:video_server_protocol.MessageHeader)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_module_name();
  inline void clear_has_module_name();
  inline void set_has_last_error();
  inline void clear_has_last_error();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::video_server_protocol::MessageModuleUniqueId* id_;
  ::google::protobuf::internal::ArenaStringPtr module_name_;
  ::google::protobuf::internal::ArenaStringPtr last_error_;
  friend void  protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_AssignDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_ShutdownFile_internal_5fcommunication_5fanalyzer_2eproto();

  void InitAsDefaultInstance();
  static MessageHeader* default_instance_;
};
// -------------------------------------------------------------------

class MessageAnalyzerProxy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:video_server_protocol.MessageAnalyzerProxy) */ {
 public:
  MessageAnalyzerProxy();
  virtual ~MessageAnalyzerProxy();

  MessageAnalyzerProxy(const MessageAnalyzerProxy& from);

  inline MessageAnalyzerProxy& operator=(const MessageAnalyzerProxy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageAnalyzerProxy& default_instance();

  void Swap(MessageAnalyzerProxy* other);

  // implements Message ----------------------------------------------

  inline MessageAnalyzerProxy* New() const { return New(NULL); }

  MessageAnalyzerProxy* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageAnalyzerProxy& from);
  void MergeFrom(const MessageAnalyzerProxy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageAnalyzerProxy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .video_server_protocol.MessageHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::video_server_protocol::MessageHeader& header() const;
  ::video_server_protocol::MessageHeader* mutable_header();
  ::video_server_protocol::MessageHeader* release_header();
  void set_allocated_header(::video_server_protocol::MessageHeader* header);

  // required .video_server_protocol.ESyncCommandType msg_type = 2;
  bool has_msg_type() const;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 2;
  ::video_server_protocol::ESyncCommandType msg_type() const;
  void set_msg_type(::video_server_protocol::ESyncCommandType value);

  // optional .video_server_protocol.MessageRequestStart msg_start = 3;
  bool has_msg_start() const;
  void clear_msg_start();
  static const int kMsgStartFieldNumber = 3;
  const ::video_server_protocol::MessageRequestStart& msg_start() const;
  ::video_server_protocol::MessageRequestStart* mutable_msg_start();
  ::video_server_protocol::MessageRequestStart* release_msg_start();
  void set_allocated_msg_start(::video_server_protocol::MessageRequestStart* msg_start);

  // optional .video_server_protocol.MessageRequestPause msg_pause = 4;
  bool has_msg_pause() const;
  void clear_msg_pause();
  static const int kMsgPauseFieldNumber = 4;
  const ::video_server_protocol::MessageRequestPause& msg_pause() const;
  ::video_server_protocol::MessageRequestPause* mutable_msg_pause();
  ::video_server_protocol::MessageRequestPause* release_msg_pause();
  void set_allocated_msg_pause(::video_server_protocol::MessageRequestPause* msg_pause);

  // optional .video_server_protocol.MessageRequestResume msg_resume = 5;
  bool has_msg_resume() const;
  void clear_msg_resume();
  static const int kMsgResumeFieldNumber = 5;
  const ::video_server_protocol::MessageRequestResume& msg_resume() const;
  ::video_server_protocol::MessageRequestResume* mutable_msg_resume();
  ::video_server_protocol::MessageRequestResume* release_msg_resume();
  void set_allocated_msg_resume(::video_server_protocol::MessageRequestResume* msg_resume);

  // optional .video_server_protocol.MessageRequestStop msg_stop = 6;
  bool has_msg_stop() const;
  void clear_msg_stop();
  static const int kMsgStopFieldNumber = 6;
  const ::video_server_protocol::MessageRequestStop& msg_stop() const;
  ::video_server_protocol::MessageRequestStop* mutable_msg_stop();
  ::video_server_protocol::MessageRequestStop* release_msg_stop();
  void set_allocated_msg_stop(::video_server_protocol::MessageRequestStop* msg_stop);

  // optional .video_server_protocol.MessageRequestGetStatus msg_get_status = 7;
  bool has_msg_get_status() const;
  void clear_msg_get_status();
  static const int kMsgGetStatusFieldNumber = 7;
  const ::video_server_protocol::MessageRequestGetStatus& msg_get_status() const;
  ::video_server_protocol::MessageRequestGetStatus* mutable_msg_get_status();
  ::video_server_protocol::MessageRequestGetStatus* release_msg_get_status();
  void set_allocated_msg_get_status(::video_server_protocol::MessageRequestGetStatus* msg_get_status);

  // optional .video_server_protocol.MessageRequestGetSettings msg_get_settings = 8;
  bool has_msg_get_settings() const;
  void clear_msg_get_settings();
  static const int kMsgGetSettingsFieldNumber = 8;
  const ::video_server_protocol::MessageRequestGetSettings& msg_get_settings() const;
  ::video_server_protocol::MessageRequestGetSettings* mutable_msg_get_settings();
  ::video_server_protocol::MessageRequestGetSettings* release_msg_get_settings();
  void set_allocated_msg_get_settings(::video_server_protocol::MessageRequestGetSettings* msg_get_settings);

  // optional .video_server_protocol.MessageRequestGetLastError msg_get_last_error = 9;
  bool has_msg_get_last_error() const;
  void clear_msg_get_last_error();
  static const int kMsgGetLastErrorFieldNumber = 9;
  const ::video_server_protocol::MessageRequestGetLastError& msg_get_last_error() const;
  ::video_server_protocol::MessageRequestGetLastError* mutable_msg_get_last_error();
  ::video_server_protocol::MessageRequestGetLastError* release_msg_get_last_error();
  void set_allocated_msg_get_last_error(::video_server_protocol::MessageRequestGetLastError* msg_get_last_error);

  // @@protoc_insertion_point(class_scope:video_server_protocol.MessageAnalyzerProxy)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_msg_start();
  inline void clear_has_msg_start();
  inline void set_has_msg_pause();
  inline void clear_has_msg_pause();
  inline void set_has_msg_resume();
  inline void clear_has_msg_resume();
  inline void set_has_msg_stop();
  inline void clear_has_msg_stop();
  inline void set_has_msg_get_status();
  inline void clear_has_msg_get_status();
  inline void set_has_msg_get_settings();
  inline void clear_has_msg_get_settings();
  inline void set_has_msg_get_last_error();
  inline void clear_has_msg_get_last_error();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::video_server_protocol::MessageHeader* header_;
  ::video_server_protocol::MessageRequestStart* msg_start_;
  ::video_server_protocol::MessageRequestPause* msg_pause_;
  ::video_server_protocol::MessageRequestResume* msg_resume_;
  ::video_server_protocol::MessageRequestStop* msg_stop_;
  ::video_server_protocol::MessageRequestGetStatus* msg_get_status_;
  ::video_server_protocol::MessageRequestGetSettings* msg_get_settings_;
  ::video_server_protocol::MessageRequestGetLastError* msg_get_last_error_;
  int msg_type_;
  friend void  protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_AssignDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_ShutdownFile_internal_5fcommunication_5fanalyzer_2eproto();

  void InitAsDefaultInstance();
  static MessageAnalyzerProxy* default_instance_;
};
// -------------------------------------------------------------------

class MessageRequestStart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:video_server_protocol.MessageRequestStart) */ {
 public:
  MessageRequestStart();
  virtual ~MessageRequestStart();

  MessageRequestStart(const MessageRequestStart& from);

  inline MessageRequestStart& operator=(const MessageRequestStart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageRequestStart& default_instance();

  void Swap(MessageRequestStart* other);

  // implements Message ----------------------------------------------

  inline MessageRequestStart* New() const { return New(NULL); }

  MessageRequestStart* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageRequestStart& from);
  void MergeFrom(const MessageRequestStart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageRequestStart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .video_server_protocol.ContainerInitSettings settings = 1;
  bool has_settings() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 1;
  const ::video_server_protocol::ContainerInitSettings& settings() const;
  ::video_server_protocol::ContainerInitSettings* mutable_settings();
  ::video_server_protocol::ContainerInitSettings* release_settings();
  void set_allocated_settings(::video_server_protocol::ContainerInitSettings* settings);

  // @@protoc_insertion_point(class_scope:video_server_protocol.MessageRequestStart)
 private:
  inline void set_has_settings();
  inline void clear_has_settings();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::video_server_protocol::ContainerInitSettings* settings_;
  friend void  protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_AssignDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_ShutdownFile_internal_5fcommunication_5fanalyzer_2eproto();

  void InitAsDefaultInstance();
  static MessageRequestStart* default_instance_;
};
// -------------------------------------------------------------------

class MessageRequestPause : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:video_server_protocol.MessageRequestPause) */ {
 public:
  MessageRequestPause();
  virtual ~MessageRequestPause();

  MessageRequestPause(const MessageRequestPause& from);

  inline MessageRequestPause& operator=(const MessageRequestPause& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageRequestPause& default_instance();

  void Swap(MessageRequestPause* other);

  // implements Message ----------------------------------------------

  inline MessageRequestPause* New() const { return New(NULL); }

  MessageRequestPause* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageRequestPause& from);
  void MergeFrom(const MessageRequestPause& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageRequestPause* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:video_server_protocol.MessageRequestPause)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_AssignDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_ShutdownFile_internal_5fcommunication_5fanalyzer_2eproto();

  void InitAsDefaultInstance();
  static MessageRequestPause* default_instance_;
};
// -------------------------------------------------------------------

class MessageRequestResume : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:video_server_protocol.MessageRequestResume) */ {
 public:
  MessageRequestResume();
  virtual ~MessageRequestResume();

  MessageRequestResume(const MessageRequestResume& from);

  inline MessageRequestResume& operator=(const MessageRequestResume& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageRequestResume& default_instance();

  void Swap(MessageRequestResume* other);

  // implements Message ----------------------------------------------

  inline MessageRequestResume* New() const { return New(NULL); }

  MessageRequestResume* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageRequestResume& from);
  void MergeFrom(const MessageRequestResume& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageRequestResume* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:video_server_protocol.MessageRequestResume)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_AssignDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_ShutdownFile_internal_5fcommunication_5fanalyzer_2eproto();

  void InitAsDefaultInstance();
  static MessageRequestResume* default_instance_;
};
// -------------------------------------------------------------------

class MessageRequestStop : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:video_server_protocol.MessageRequestStop) */ {
 public:
  MessageRequestStop();
  virtual ~MessageRequestStop();

  MessageRequestStop(const MessageRequestStop& from);

  inline MessageRequestStop& operator=(const MessageRequestStop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageRequestStop& default_instance();

  void Swap(MessageRequestStop* other);

  // implements Message ----------------------------------------------

  inline MessageRequestStop* New() const { return New(NULL); }

  MessageRequestStop* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageRequestStop& from);
  void MergeFrom(const MessageRequestStop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageRequestStop* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:video_server_protocol.MessageRequestStop)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_AssignDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_ShutdownFile_internal_5fcommunication_5fanalyzer_2eproto();

  void InitAsDefaultInstance();
  static MessageRequestStop* default_instance_;
};
// -------------------------------------------------------------------

class MessageRequestGetStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:video_server_protocol.MessageRequestGetStatus) */ {
 public:
  MessageRequestGetStatus();
  virtual ~MessageRequestGetStatus();

  MessageRequestGetStatus(const MessageRequestGetStatus& from);

  inline MessageRequestGetStatus& operator=(const MessageRequestGetStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageRequestGetStatus& default_instance();

  void Swap(MessageRequestGetStatus* other);

  // implements Message ----------------------------------------------

  inline MessageRequestGetStatus* New() const { return New(NULL); }

  MessageRequestGetStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageRequestGetStatus& from);
  void MergeFrom(const MessageRequestGetStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageRequestGetStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:video_server_protocol.MessageRequestGetStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_AssignDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_ShutdownFile_internal_5fcommunication_5fanalyzer_2eproto();

  void InitAsDefaultInstance();
  static MessageRequestGetStatus* default_instance_;
};
// -------------------------------------------------------------------

class MessageRequestGetSettings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:video_server_protocol.MessageRequestGetSettings) */ {
 public:
  MessageRequestGetSettings();
  virtual ~MessageRequestGetSettings();

  MessageRequestGetSettings(const MessageRequestGetSettings& from);

  inline MessageRequestGetSettings& operator=(const MessageRequestGetSettings& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageRequestGetSettings& default_instance();

  void Swap(MessageRequestGetSettings* other);

  // implements Message ----------------------------------------------

  inline MessageRequestGetSettings* New() const { return New(NULL); }

  MessageRequestGetSettings* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageRequestGetSettings& from);
  void MergeFrom(const MessageRequestGetSettings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageRequestGetSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:video_server_protocol.MessageRequestGetSettings)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_AssignDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_ShutdownFile_internal_5fcommunication_5fanalyzer_2eproto();

  void InitAsDefaultInstance();
  static MessageRequestGetSettings* default_instance_;
};
// -------------------------------------------------------------------

class MessageRequestGetLastError : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:video_server_protocol.MessageRequestGetLastError) */ {
 public:
  MessageRequestGetLastError();
  virtual ~MessageRequestGetLastError();

  MessageRequestGetLastError(const MessageRequestGetLastError& from);

  inline MessageRequestGetLastError& operator=(const MessageRequestGetLastError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageRequestGetLastError& default_instance();

  void Swap(MessageRequestGetLastError* other);

  // implements Message ----------------------------------------------

  inline MessageRequestGetLastError* New() const { return New(NULL); }

  MessageRequestGetLastError* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageRequestGetLastError& from);
  void MergeFrom(const MessageRequestGetLastError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageRequestGetLastError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:video_server_protocol.MessageRequestGetLastError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_AssignDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_ShutdownFile_internal_5fcommunication_5fanalyzer_2eproto();

  void InitAsDefaultInstance();
  static MessageRequestGetLastError* default_instance_;
};
// -------------------------------------------------------------------

class MessageAnalyzerReal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:video_server_protocol.MessageAnalyzerReal) */ {
 public:
  MessageAnalyzerReal();
  virtual ~MessageAnalyzerReal();

  MessageAnalyzerReal(const MessageAnalyzerReal& from);

  inline MessageAnalyzerReal& operator=(const MessageAnalyzerReal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageAnalyzerReal& default_instance();

  void Swap(MessageAnalyzerReal* other);

  // implements Message ----------------------------------------------

  inline MessageAnalyzerReal* New() const { return New(NULL); }

  MessageAnalyzerReal* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageAnalyzerReal& from);
  void MergeFrom(const MessageAnalyzerReal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageAnalyzerReal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .video_server_protocol.MessageHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::video_server_protocol::MessageHeader& header() const;
  ::video_server_protocol::MessageHeader* mutable_header();
  ::video_server_protocol::MessageHeader* release_header();
  void set_allocated_header(::video_server_protocol::MessageHeader* header);

  // required .video_server_protocol.ESyncCommandType msg_type = 2;
  bool has_msg_type() const;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 2;
  ::video_server_protocol::ESyncCommandType msg_type() const;
  void set_msg_type(::video_server_protocol::ESyncCommandType value);

  // optional .video_server_protocol.MessageResponseStart msg_start = 4;
  bool has_msg_start() const;
  void clear_msg_start();
  static const int kMsgStartFieldNumber = 4;
  const ::video_server_protocol::MessageResponseStart& msg_start() const;
  ::video_server_protocol::MessageResponseStart* mutable_msg_start();
  ::video_server_protocol::MessageResponseStart* release_msg_start();
  void set_allocated_msg_start(::video_server_protocol::MessageResponseStart* msg_start);

  // optional .video_server_protocol.MessageResponsePause msg_pause = 5;
  bool has_msg_pause() const;
  void clear_msg_pause();
  static const int kMsgPauseFieldNumber = 5;
  const ::video_server_protocol::MessageResponsePause& msg_pause() const;
  ::video_server_protocol::MessageResponsePause* mutable_msg_pause();
  ::video_server_protocol::MessageResponsePause* release_msg_pause();
  void set_allocated_msg_pause(::video_server_protocol::MessageResponsePause* msg_pause);

  // optional .video_server_protocol.MessageResponseResume msg_resume = 6;
  bool has_msg_resume() const;
  void clear_msg_resume();
  static const int kMsgResumeFieldNumber = 6;
  const ::video_server_protocol::MessageResponseResume& msg_resume() const;
  ::video_server_protocol::MessageResponseResume* mutable_msg_resume();
  ::video_server_protocol::MessageResponseResume* release_msg_resume();
  void set_allocated_msg_resume(::video_server_protocol::MessageResponseResume* msg_resume);

  // optional .video_server_protocol.MessageResponseStop msg_stop = 7;
  bool has_msg_stop() const;
  void clear_msg_stop();
  static const int kMsgStopFieldNumber = 7;
  const ::video_server_protocol::MessageResponseStop& msg_stop() const;
  ::video_server_protocol::MessageResponseStop* mutable_msg_stop();
  ::video_server_protocol::MessageResponseStop* release_msg_stop();
  void set_allocated_msg_stop(::video_server_protocol::MessageResponseStop* msg_stop);

  // optional .video_server_protocol.MessageResponseGetStatus msg_get_status = 8;
  bool has_msg_get_status() const;
  void clear_msg_get_status();
  static const int kMsgGetStatusFieldNumber = 8;
  const ::video_server_protocol::MessageResponseGetStatus& msg_get_status() const;
  ::video_server_protocol::MessageResponseGetStatus* mutable_msg_get_status();
  ::video_server_protocol::MessageResponseGetStatus* release_msg_get_status();
  void set_allocated_msg_get_status(::video_server_protocol::MessageResponseGetStatus* msg_get_status);

  // optional .video_server_protocol.MessageResponseGetSettings msg_get_settings = 9;
  bool has_msg_get_settings() const;
  void clear_msg_get_settings();
  static const int kMsgGetSettingsFieldNumber = 9;
  const ::video_server_protocol::MessageResponseGetSettings& msg_get_settings() const;
  ::video_server_protocol::MessageResponseGetSettings* mutable_msg_get_settings();
  ::video_server_protocol::MessageResponseGetSettings* release_msg_get_settings();
  void set_allocated_msg_get_settings(::video_server_protocol::MessageResponseGetSettings* msg_get_settings);

  // optional .video_server_protocol.MessageResponseGetLastError msg_get_last_error = 10;
  bool has_msg_get_last_error() const;
  void clear_msg_get_last_error();
  static const int kMsgGetLastErrorFieldNumber = 10;
  const ::video_server_protocol::MessageResponseGetLastError& msg_get_last_error() const;
  ::video_server_protocol::MessageResponseGetLastError* mutable_msg_get_last_error();
  ::video_server_protocol::MessageResponseGetLastError* release_msg_get_last_error();
  void set_allocated_msg_get_last_error(::video_server_protocol::MessageResponseGetLastError* msg_get_last_error);

  // optional .video_server_protocol.MessageResponseAnalyticEvent msg_get_accum_events = 11;
  bool has_msg_get_accum_events() const;
  void clear_msg_get_accum_events();
  static const int kMsgGetAccumEventsFieldNumber = 11;
  const ::video_server_protocol::MessageResponseAnalyticEvent& msg_get_accum_events() const;
  ::video_server_protocol::MessageResponseAnalyticEvent* mutable_msg_get_accum_events();
  ::video_server_protocol::MessageResponseAnalyticEvent* release_msg_get_accum_events();
  void set_allocated_msg_get_accum_events(::video_server_protocol::MessageResponseAnalyticEvent* msg_get_accum_events);

  // @@protoc_insertion_point(class_scope:video_server_protocol.MessageAnalyzerReal)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_msg_start();
  inline void clear_has_msg_start();
  inline void set_has_msg_pause();
  inline void clear_has_msg_pause();
  inline void set_has_msg_resume();
  inline void clear_has_msg_resume();
  inline void set_has_msg_stop();
  inline void clear_has_msg_stop();
  inline void set_has_msg_get_status();
  inline void clear_has_msg_get_status();
  inline void set_has_msg_get_settings();
  inline void clear_has_msg_get_settings();
  inline void set_has_msg_get_last_error();
  inline void clear_has_msg_get_last_error();
  inline void set_has_msg_get_accum_events();
  inline void clear_has_msg_get_accum_events();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::video_server_protocol::MessageHeader* header_;
  ::video_server_protocol::MessageResponseStart* msg_start_;
  ::video_server_protocol::MessageResponsePause* msg_pause_;
  ::video_server_protocol::MessageResponseResume* msg_resume_;
  ::video_server_protocol::MessageResponseStop* msg_stop_;
  ::video_server_protocol::MessageResponseGetStatus* msg_get_status_;
  ::video_server_protocol::MessageResponseGetSettings* msg_get_settings_;
  ::video_server_protocol::MessageResponseGetLastError* msg_get_last_error_;
  ::video_server_protocol::MessageResponseAnalyticEvent* msg_get_accum_events_;
  int msg_type_;
  friend void  protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_AssignDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_ShutdownFile_internal_5fcommunication_5fanalyzer_2eproto();

  void InitAsDefaultInstance();
  static MessageAnalyzerReal* default_instance_;
};
// -------------------------------------------------------------------

class MessageResponseStart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:video_server_protocol.MessageResponseStart) */ {
 public:
  MessageResponseStart();
  virtual ~MessageResponseStart();

  MessageResponseStart(const MessageResponseStart& from);

  inline MessageResponseStart& operator=(const MessageResponseStart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageResponseStart& default_instance();

  void Swap(MessageResponseStart* other);

  // implements Message ----------------------------------------------

  inline MessageResponseStart* New() const { return New(NULL); }

  MessageResponseStart* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageResponseStart& from);
  void MergeFrom(const MessageResponseStart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageResponseStart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool success = 1;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:video_server_protocol.MessageResponseStart)
 private:
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool success_;
  friend void  protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_AssignDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_ShutdownFile_internal_5fcommunication_5fanalyzer_2eproto();

  void InitAsDefaultInstance();
  static MessageResponseStart* default_instance_;
};
// -------------------------------------------------------------------

class MessageResponsePause : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:video_server_protocol.MessageResponsePause) */ {
 public:
  MessageResponsePause();
  virtual ~MessageResponsePause();

  MessageResponsePause(const MessageResponsePause& from);

  inline MessageResponsePause& operator=(const MessageResponsePause& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageResponsePause& default_instance();

  void Swap(MessageResponsePause* other);

  // implements Message ----------------------------------------------

  inline MessageResponsePause* New() const { return New(NULL); }

  MessageResponsePause* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageResponsePause& from);
  void MergeFrom(const MessageResponsePause& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageResponsePause* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:video_server_protocol.MessageResponsePause)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_AssignDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_ShutdownFile_internal_5fcommunication_5fanalyzer_2eproto();

  void InitAsDefaultInstance();
  static MessageResponsePause* default_instance_;
};
// -------------------------------------------------------------------

class MessageResponseResume : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:video_server_protocol.MessageResponseResume) */ {
 public:
  MessageResponseResume();
  virtual ~MessageResponseResume();

  MessageResponseResume(const MessageResponseResume& from);

  inline MessageResponseResume& operator=(const MessageResponseResume& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageResponseResume& default_instance();

  void Swap(MessageResponseResume* other);

  // implements Message ----------------------------------------------

  inline MessageResponseResume* New() const { return New(NULL); }

  MessageResponseResume* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageResponseResume& from);
  void MergeFrom(const MessageResponseResume& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageResponseResume* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:video_server_protocol.MessageResponseResume)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_AssignDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_ShutdownFile_internal_5fcommunication_5fanalyzer_2eproto();

  void InitAsDefaultInstance();
  static MessageResponseResume* default_instance_;
};
// -------------------------------------------------------------------

class MessageResponseStop : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:video_server_protocol.MessageResponseStop) */ {
 public:
  MessageResponseStop();
  virtual ~MessageResponseStop();

  MessageResponseStop(const MessageResponseStop& from);

  inline MessageResponseStop& operator=(const MessageResponseStop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageResponseStop& default_instance();

  void Swap(MessageResponseStop* other);

  // implements Message ----------------------------------------------

  inline MessageResponseStop* New() const { return New(NULL); }

  MessageResponseStop* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageResponseStop& from);
  void MergeFrom(const MessageResponseStop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageResponseStop* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:video_server_protocol.MessageResponseStop)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_AssignDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_ShutdownFile_internal_5fcommunication_5fanalyzer_2eproto();

  void InitAsDefaultInstance();
  static MessageResponseStop* default_instance_;
};
// -------------------------------------------------------------------

class MessageResponseGetStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:video_server_protocol.MessageResponseGetStatus) */ {
 public:
  MessageResponseGetStatus();
  virtual ~MessageResponseGetStatus();

  MessageResponseGetStatus(const MessageResponseGetStatus& from);

  inline MessageResponseGetStatus& operator=(const MessageResponseGetStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageResponseGetStatus& default_instance();

  void Swap(MessageResponseGetStatus* other);

  // implements Message ----------------------------------------------

  inline MessageResponseGetStatus* New() const { return New(NULL); }

  MessageResponseGetStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageResponseGetStatus& from);
  void MergeFrom(const MessageResponseGetStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageResponseGetStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .video_server_protocol.ContainerAnalyzeStatus status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::video_server_protocol::ContainerAnalyzeStatus& status() const;
  ::video_server_protocol::ContainerAnalyzeStatus* mutable_status();
  ::video_server_protocol::ContainerAnalyzeStatus* release_status();
  void set_allocated_status(::video_server_protocol::ContainerAnalyzeStatus* status);

  // @@protoc_insertion_point(class_scope:video_server_protocol.MessageResponseGetStatus)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::video_server_protocol::ContainerAnalyzeStatus* status_;
  friend void  protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_AssignDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_ShutdownFile_internal_5fcommunication_5fanalyzer_2eproto();

  void InitAsDefaultInstance();
  static MessageResponseGetStatus* default_instance_;
};
// -------------------------------------------------------------------

class MessageResponseGetSettings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:video_server_protocol.MessageResponseGetSettings) */ {
 public:
  MessageResponseGetSettings();
  virtual ~MessageResponseGetSettings();

  MessageResponseGetSettings(const MessageResponseGetSettings& from);

  inline MessageResponseGetSettings& operator=(const MessageResponseGetSettings& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageResponseGetSettings& default_instance();

  void Swap(MessageResponseGetSettings* other);

  // implements Message ----------------------------------------------

  inline MessageResponseGetSettings* New() const { return New(NULL); }

  MessageResponseGetSettings* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageResponseGetSettings& from);
  void MergeFrom(const MessageResponseGetSettings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageResponseGetSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .video_server_protocol.ContainerInitSettings settings = 1;
  bool has_settings() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 1;
  const ::video_server_protocol::ContainerInitSettings& settings() const;
  ::video_server_protocol::ContainerInitSettings* mutable_settings();
  ::video_server_protocol::ContainerInitSettings* release_settings();
  void set_allocated_settings(::video_server_protocol::ContainerInitSettings* settings);

  // @@protoc_insertion_point(class_scope:video_server_protocol.MessageResponseGetSettings)
 private:
  inline void set_has_settings();
  inline void clear_has_settings();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::video_server_protocol::ContainerInitSettings* settings_;
  friend void  protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_AssignDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_ShutdownFile_internal_5fcommunication_5fanalyzer_2eproto();

  void InitAsDefaultInstance();
  static MessageResponseGetSettings* default_instance_;
};
// -------------------------------------------------------------------

class MessageResponseGetLastError : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:video_server_protocol.MessageResponseGetLastError) */ {
 public:
  MessageResponseGetLastError();
  virtual ~MessageResponseGetLastError();

  MessageResponseGetLastError(const MessageResponseGetLastError& from);

  inline MessageResponseGetLastError& operator=(const MessageResponseGetLastError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageResponseGetLastError& default_instance();

  void Swap(MessageResponseGetLastError* other);

  // implements Message ----------------------------------------------

  inline MessageResponseGetLastError* New() const { return New(NULL); }

  MessageResponseGetLastError* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageResponseGetLastError& from);
  void MergeFrom(const MessageResponseGetLastError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageResponseGetLastError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string message = 1;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:video_server_protocol.MessageResponseGetLastError)
 private:
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  friend void  protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_AssignDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_ShutdownFile_internal_5fcommunication_5fanalyzer_2eproto();

  void InitAsDefaultInstance();
  static MessageResponseGetLastError* default_instance_;
};
// -------------------------------------------------------------------

class MessageResponseAnalyticEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:video_server_protocol.MessageResponseAnalyticEvent) */ {
 public:
  MessageResponseAnalyticEvent();
  virtual ~MessageResponseAnalyticEvent();

  MessageResponseAnalyticEvent(const MessageResponseAnalyticEvent& from);

  inline MessageResponseAnalyticEvent& operator=(const MessageResponseAnalyticEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageResponseAnalyticEvent& default_instance();

  void Swap(MessageResponseAnalyticEvent* other);

  // implements Message ----------------------------------------------

  inline MessageResponseAnalyticEvent* New() const { return New(NULL); }

  MessageResponseAnalyticEvent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageResponseAnalyticEvent& from);
  void MergeFrom(const MessageResponseAnalyticEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageResponseAnalyticEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .video_server_protocol.ContainerAnalyticEvent events = 1;
  int events_size() const;
  void clear_events();
  static const int kEventsFieldNumber = 1;
  const ::video_server_protocol::ContainerAnalyticEvent& events(int index) const;
  ::video_server_protocol::ContainerAnalyticEvent* mutable_events(int index);
  ::video_server_protocol::ContainerAnalyticEvent* add_events();
  ::google::protobuf::RepeatedPtrField< ::video_server_protocol::ContainerAnalyticEvent >*
      mutable_events();
  const ::google::protobuf::RepeatedPtrField< ::video_server_protocol::ContainerAnalyticEvent >&
      events() const;

  // @@protoc_insertion_point(class_scope:video_server_protocol.MessageResponseAnalyticEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::video_server_protocol::ContainerAnalyticEvent > events_;
  friend void  protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_AssignDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_ShutdownFile_internal_5fcommunication_5fanalyzer_2eproto();

  void InitAsDefaultInstance();
  static MessageResponseAnalyticEvent* default_instance_;
};
// -------------------------------------------------------------------

class ProtobufInternalCommunicateAnalyzer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:video_server_protocol.ProtobufInternalCommunicateAnalyzer) */ {
 public:
  ProtobufInternalCommunicateAnalyzer();
  virtual ~ProtobufInternalCommunicateAnalyzer();

  ProtobufInternalCommunicateAnalyzer(const ProtobufInternalCommunicateAnalyzer& from);

  inline ProtobufInternalCommunicateAnalyzer& operator=(const ProtobufInternalCommunicateAnalyzer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtobufInternalCommunicateAnalyzer& default_instance();

  void Swap(ProtobufInternalCommunicateAnalyzer* other);

  // implements Message ----------------------------------------------

  inline ProtobufInternalCommunicateAnalyzer* New() const { return New(NULL); }

  ProtobufInternalCommunicateAnalyzer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtobufInternalCommunicateAnalyzer& from);
  void MergeFrom(const ProtobufInternalCommunicateAnalyzer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProtobufInternalCommunicateAnalyzer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .video_server_protocol.EWho sender = 1;
  bool has_sender() const;
  void clear_sender();
  static const int kSenderFieldNumber = 1;
  ::video_server_protocol::EWho sender() const;
  void set_sender(::video_server_protocol::EWho value);

  // optional .video_server_protocol.MessageAnalyzerProxy msg_proxy = 2;
  bool has_msg_proxy() const;
  void clear_msg_proxy();
  static const int kMsgProxyFieldNumber = 2;
  const ::video_server_protocol::MessageAnalyzerProxy& msg_proxy() const;
  ::video_server_protocol::MessageAnalyzerProxy* mutable_msg_proxy();
  ::video_server_protocol::MessageAnalyzerProxy* release_msg_proxy();
  void set_allocated_msg_proxy(::video_server_protocol::MessageAnalyzerProxy* msg_proxy);

  // optional .video_server_protocol.MessageAnalyzerReal msg_real = 3;
  bool has_msg_real() const;
  void clear_msg_real();
  static const int kMsgRealFieldNumber = 3;
  const ::video_server_protocol::MessageAnalyzerReal& msg_real() const;
  ::video_server_protocol::MessageAnalyzerReal* mutable_msg_real();
  ::video_server_protocol::MessageAnalyzerReal* release_msg_real();
  void set_allocated_msg_real(::video_server_protocol::MessageAnalyzerReal* msg_real);

  // @@protoc_insertion_point(class_scope:video_server_protocol.ProtobufInternalCommunicateAnalyzer)
 private:
  inline void set_has_sender();
  inline void clear_has_sender();
  inline void set_has_msg_proxy();
  inline void clear_has_msg_proxy();
  inline void set_has_msg_real();
  inline void clear_has_msg_real();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::video_server_protocol::MessageAnalyzerProxy* msg_proxy_;
  ::video_server_protocol::MessageAnalyzerReal* msg_real_;
  int sender_;
  friend void  protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_AssignDesc_internal_5fcommunication_5fanalyzer_2eproto();
  friend void protobuf_ShutdownFile_internal_5fcommunication_5fanalyzer_2eproto();

  void InitAsDefaultInstance();
  static ProtobufInternalCommunicateAnalyzer* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ContainerDpfObjreprMap

// required string dpf_label = 1;
inline bool ContainerDpfObjreprMap::has_dpf_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContainerDpfObjreprMap::set_has_dpf_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContainerDpfObjreprMap::clear_has_dpf_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContainerDpfObjreprMap::clear_dpf_label() {
  dpf_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dpf_label();
}
inline const ::std::string& ContainerDpfObjreprMap::dpf_label() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerDpfObjreprMap.dpf_label)
  return dpf_label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerDpfObjreprMap::set_dpf_label(const ::std::string& value) {
  set_has_dpf_label();
  dpf_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerDpfObjreprMap.dpf_label)
}
inline void ContainerDpfObjreprMap::set_dpf_label(const char* value) {
  set_has_dpf_label();
  dpf_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.ContainerDpfObjreprMap.dpf_label)
}
inline void ContainerDpfObjreprMap::set_dpf_label(const char* value, size_t size) {
  set_has_dpf_label();
  dpf_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.ContainerDpfObjreprMap.dpf_label)
}
inline ::std::string* ContainerDpfObjreprMap::mutable_dpf_label() {
  set_has_dpf_label();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerDpfObjreprMap.dpf_label)
  return dpf_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContainerDpfObjreprMap::release_dpf_label() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ContainerDpfObjreprMap.dpf_label)
  clear_has_dpf_label();
  return dpf_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerDpfObjreprMap::set_allocated_dpf_label(::std::string* dpf_label) {
  if (dpf_label != NULL) {
    set_has_dpf_label();
  } else {
    clear_has_dpf_label();
  }
  dpf_label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dpf_label);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ContainerDpfObjreprMap.dpf_label)
}

// required uint64 objrepr_classinfo_id = 2;
inline bool ContainerDpfObjreprMap::has_objrepr_classinfo_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContainerDpfObjreprMap::set_has_objrepr_classinfo_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContainerDpfObjreprMap::clear_has_objrepr_classinfo_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContainerDpfObjreprMap::clear_objrepr_classinfo_id() {
  objrepr_classinfo_id_ = GOOGLE_ULONGLONG(0);
  clear_has_objrepr_classinfo_id();
}
inline ::google::protobuf::uint64 ContainerDpfObjreprMap::objrepr_classinfo_id() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerDpfObjreprMap.objrepr_classinfo_id)
  return objrepr_classinfo_id_;
}
inline void ContainerDpfObjreprMap::set_objrepr_classinfo_id(::google::protobuf::uint64 value) {
  set_has_objrepr_classinfo_id();
  objrepr_classinfo_id_ = value;
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerDpfObjreprMap.objrepr_classinfo_id)
}

// -------------------------------------------------------------------

// ContainerAnalyticEvent

// required uint64 sensor_id = 1;
inline bool ContainerAnalyticEvent::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContainerAnalyticEvent::set_has_sensor_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContainerAnalyticEvent::clear_has_sensor_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContainerAnalyticEvent::clear_sensor_id() {
  sensor_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sensor_id();
}
inline ::google::protobuf::uint64 ContainerAnalyticEvent::sensor_id() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerAnalyticEvent.sensor_id)
  return sensor_id_;
}
inline void ContainerAnalyticEvent::set_sensor_id(::google::protobuf::uint64 value) {
  set_has_sensor_id();
  sensor_id_ = value;
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerAnalyticEvent.sensor_id)
}

// required string event_message = 2;
inline bool ContainerAnalyticEvent::has_event_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContainerAnalyticEvent::set_has_event_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContainerAnalyticEvent::clear_has_event_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContainerAnalyticEvent::clear_event_message() {
  event_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_event_message();
}
inline const ::std::string& ContainerAnalyticEvent::event_message() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerAnalyticEvent.event_message)
  return event_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerAnalyticEvent::set_event_message(const ::std::string& value) {
  set_has_event_message();
  event_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerAnalyticEvent.event_message)
}
inline void ContainerAnalyticEvent::set_event_message(const char* value) {
  set_has_event_message();
  event_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.ContainerAnalyticEvent.event_message)
}
inline void ContainerAnalyticEvent::set_event_message(const char* value, size_t size) {
  set_has_event_message();
  event_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.ContainerAnalyticEvent.event_message)
}
inline ::std::string* ContainerAnalyticEvent::mutable_event_message() {
  set_has_event_message();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerAnalyticEvent.event_message)
  return event_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContainerAnalyticEvent::release_event_message() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ContainerAnalyticEvent.event_message)
  clear_has_event_message();
  return event_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerAnalyticEvent::set_allocated_event_message(::std::string* event_message) {
  if (event_message != NULL) {
    set_has_event_message();
  } else {
    clear_has_event_message();
  }
  event_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_message);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ContainerAnalyticEvent.event_message)
}

// required string plugin_name = 3;
inline bool ContainerAnalyticEvent::has_plugin_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContainerAnalyticEvent::set_has_plugin_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContainerAnalyticEvent::clear_has_plugin_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContainerAnalyticEvent::clear_plugin_name() {
  plugin_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_plugin_name();
}
inline const ::std::string& ContainerAnalyticEvent::plugin_name() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerAnalyticEvent.plugin_name)
  return plugin_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerAnalyticEvent::set_plugin_name(const ::std::string& value) {
  set_has_plugin_name();
  plugin_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerAnalyticEvent.plugin_name)
}
inline void ContainerAnalyticEvent::set_plugin_name(const char* value) {
  set_has_plugin_name();
  plugin_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.ContainerAnalyticEvent.plugin_name)
}
inline void ContainerAnalyticEvent::set_plugin_name(const char* value, size_t size) {
  set_has_plugin_name();
  plugin_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.ContainerAnalyticEvent.plugin_name)
}
inline ::std::string* ContainerAnalyticEvent::mutable_plugin_name() {
  set_has_plugin_name();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerAnalyticEvent.plugin_name)
  return plugin_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContainerAnalyticEvent::release_plugin_name() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ContainerAnalyticEvent.plugin_name)
  clear_has_plugin_name();
  return plugin_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerAnalyticEvent::set_allocated_plugin_name(::std::string* plugin_name) {
  if (plugin_name != NULL) {
    set_has_plugin_name();
  } else {
    clear_has_plugin_name();
  }
  plugin_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plugin_name);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ContainerAnalyticEvent.plugin_name)
}

// required string plugin_type = 4;
inline bool ContainerAnalyticEvent::has_plugin_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContainerAnalyticEvent::set_has_plugin_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContainerAnalyticEvent::clear_has_plugin_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContainerAnalyticEvent::clear_plugin_type() {
  plugin_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_plugin_type();
}
inline const ::std::string& ContainerAnalyticEvent::plugin_type() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerAnalyticEvent.plugin_type)
  return plugin_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerAnalyticEvent::set_plugin_type(const ::std::string& value) {
  set_has_plugin_type();
  plugin_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerAnalyticEvent.plugin_type)
}
inline void ContainerAnalyticEvent::set_plugin_type(const char* value) {
  set_has_plugin_type();
  plugin_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.ContainerAnalyticEvent.plugin_type)
}
inline void ContainerAnalyticEvent::set_plugin_type(const char* value, size_t size) {
  set_has_plugin_type();
  plugin_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.ContainerAnalyticEvent.plugin_type)
}
inline ::std::string* ContainerAnalyticEvent::mutable_plugin_type() {
  set_has_plugin_type();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerAnalyticEvent.plugin_type)
  return plugin_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContainerAnalyticEvent::release_plugin_type() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ContainerAnalyticEvent.plugin_type)
  clear_has_plugin_type();
  return plugin_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerAnalyticEvent::set_allocated_plugin_type(::std::string* plugin_type) {
  if (plugin_type != NULL) {
    set_has_plugin_type();
  } else {
    clear_has_plugin_type();
  }
  plugin_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plugin_type);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ContainerAnalyticEvent.plugin_type)
}

// required string processing_id = 5;
inline bool ContainerAnalyticEvent::has_processing_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContainerAnalyticEvent::set_has_processing_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ContainerAnalyticEvent::clear_has_processing_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ContainerAnalyticEvent::clear_processing_id() {
  processing_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_processing_id();
}
inline const ::std::string& ContainerAnalyticEvent::processing_id() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerAnalyticEvent.processing_id)
  return processing_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerAnalyticEvent::set_processing_id(const ::std::string& value) {
  set_has_processing_id();
  processing_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerAnalyticEvent.processing_id)
}
inline void ContainerAnalyticEvent::set_processing_id(const char* value) {
  set_has_processing_id();
  processing_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.ContainerAnalyticEvent.processing_id)
}
inline void ContainerAnalyticEvent::set_processing_id(const char* value, size_t size) {
  set_has_processing_id();
  processing_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.ContainerAnalyticEvent.processing_id)
}
inline ::std::string* ContainerAnalyticEvent::mutable_processing_id() {
  set_has_processing_id();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerAnalyticEvent.processing_id)
  return processing_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContainerAnalyticEvent::release_processing_id() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ContainerAnalyticEvent.processing_id)
  clear_has_processing_id();
  return processing_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerAnalyticEvent::set_allocated_processing_id(::std::string* processing_id) {
  if (processing_id != NULL) {
    set_has_processing_id();
  } else {
    clear_has_processing_id();
  }
  processing_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), processing_id);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ContainerAnalyticEvent.processing_id)
}

// -------------------------------------------------------------------

// ContainerAnalyzeStatus

// required uint64 sensor_id = 1;
inline bool ContainerAnalyzeStatus::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContainerAnalyzeStatus::set_has_sensor_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContainerAnalyzeStatus::clear_has_sensor_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContainerAnalyzeStatus::clear_sensor_id() {
  sensor_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sensor_id();
}
inline ::google::protobuf::uint64 ContainerAnalyzeStatus::sensor_id() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerAnalyzeStatus.sensor_id)
  return sensor_id_;
}
inline void ContainerAnalyzeStatus::set_sensor_id(::google::protobuf::uint64 value) {
  set_has_sensor_id();
  sensor_id_ = value;
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerAnalyzeStatus.sensor_id)
}

// required .video_server_protocol.EAnalyzeState state = 2;
inline bool ContainerAnalyzeStatus::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContainerAnalyzeStatus::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContainerAnalyzeStatus::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContainerAnalyzeStatus::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::video_server_protocol::EAnalyzeState ContainerAnalyzeStatus::state() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerAnalyzeStatus.state)
  return static_cast< ::video_server_protocol::EAnalyzeState >(state_);
}
inline void ContainerAnalyzeStatus::set_state(::video_server_protocol::EAnalyzeState value) {
  assert(::video_server_protocol::EAnalyzeState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerAnalyzeStatus.state)
}

// required string processing_id = 3;
inline bool ContainerAnalyzeStatus::has_processing_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContainerAnalyzeStatus::set_has_processing_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContainerAnalyzeStatus::clear_has_processing_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContainerAnalyzeStatus::clear_processing_id() {
  processing_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_processing_id();
}
inline const ::std::string& ContainerAnalyzeStatus::processing_id() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerAnalyzeStatus.processing_id)
  return processing_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerAnalyzeStatus::set_processing_id(const ::std::string& value) {
  set_has_processing_id();
  processing_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerAnalyzeStatus.processing_id)
}
inline void ContainerAnalyzeStatus::set_processing_id(const char* value) {
  set_has_processing_id();
  processing_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.ContainerAnalyzeStatus.processing_id)
}
inline void ContainerAnalyzeStatus::set_processing_id(const char* value, size_t size) {
  set_has_processing_id();
  processing_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.ContainerAnalyzeStatus.processing_id)
}
inline ::std::string* ContainerAnalyzeStatus::mutable_processing_id() {
  set_has_processing_id();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerAnalyzeStatus.processing_id)
  return processing_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContainerAnalyzeStatus::release_processing_id() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ContainerAnalyzeStatus.processing_id)
  clear_has_processing_id();
  return processing_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerAnalyzeStatus::set_allocated_processing_id(::std::string* processing_id) {
  if (processing_id != NULL) {
    set_has_processing_id();
  } else {
    clear_has_processing_id();
  }
  processing_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), processing_id);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ContainerAnalyzeStatus.processing_id)
}

// required string processing_name = 4;
inline bool ContainerAnalyzeStatus::has_processing_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContainerAnalyzeStatus::set_has_processing_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContainerAnalyzeStatus::clear_has_processing_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContainerAnalyzeStatus::clear_processing_name() {
  processing_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_processing_name();
}
inline const ::std::string& ContainerAnalyzeStatus::processing_name() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerAnalyzeStatus.processing_name)
  return processing_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerAnalyzeStatus::set_processing_name(const ::std::string& value) {
  set_has_processing_name();
  processing_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerAnalyzeStatus.processing_name)
}
inline void ContainerAnalyzeStatus::set_processing_name(const char* value) {
  set_has_processing_name();
  processing_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.ContainerAnalyzeStatus.processing_name)
}
inline void ContainerAnalyzeStatus::set_processing_name(const char* value, size_t size) {
  set_has_processing_name();
  processing_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.ContainerAnalyzeStatus.processing_name)
}
inline ::std::string* ContainerAnalyzeStatus::mutable_processing_name() {
  set_has_processing_name();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerAnalyzeStatus.processing_name)
  return processing_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContainerAnalyzeStatus::release_processing_name() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ContainerAnalyzeStatus.processing_name)
  clear_has_processing_name();
  return processing_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerAnalyzeStatus::set_allocated_processing_name(::std::string* processing_name) {
  if (processing_name != NULL) {
    set_has_processing_name();
  } else {
    clear_has_processing_name();
  }
  processing_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), processing_name);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ContainerAnalyzeStatus.processing_name)
}

// required uint64 profile_id = 5;
inline bool ContainerAnalyzeStatus::has_profile_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContainerAnalyzeStatus::set_has_profile_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ContainerAnalyzeStatus::clear_has_profile_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ContainerAnalyzeStatus::clear_profile_id() {
  profile_id_ = GOOGLE_ULONGLONG(0);
  clear_has_profile_id();
}
inline ::google::protobuf::uint64 ContainerAnalyzeStatus::profile_id() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerAnalyzeStatus.profile_id)
  return profile_id_;
}
inline void ContainerAnalyzeStatus::set_profile_id(::google::protobuf::uint64 value) {
  set_has_profile_id();
  profile_id_ = value;
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerAnalyzeStatus.profile_id)
}

// -------------------------------------------------------------------

// FilterPluginParam

// required string key = 1;
inline bool FilterPluginParam::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FilterPluginParam::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FilterPluginParam::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FilterPluginParam::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& FilterPluginParam::key() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.FilterPluginParam.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FilterPluginParam::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.FilterPluginParam.key)
}
inline void FilterPluginParam::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.FilterPluginParam.key)
}
inline void FilterPluginParam::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.FilterPluginParam.key)
}
inline ::std::string* FilterPluginParam::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.FilterPluginParam.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FilterPluginParam::release_key() {
  // @@protoc_insertion_point(field_release:video_server_protocol.FilterPluginParam.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FilterPluginParam::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.FilterPluginParam.key)
}

// required string val = 2;
inline bool FilterPluginParam::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FilterPluginParam::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FilterPluginParam::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FilterPluginParam::clear_val() {
  val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_val();
}
inline const ::std::string& FilterPluginParam::val() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.FilterPluginParam.val)
  return val_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FilterPluginParam::set_val(const ::std::string& value) {
  set_has_val();
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.FilterPluginParam.val)
}
inline void FilterPluginParam::set_val(const char* value) {
  set_has_val();
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.FilterPluginParam.val)
}
inline void FilterPluginParam::set_val(const char* value, size_t size) {
  set_has_val();
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.FilterPluginParam.val)
}
inline ::std::string* FilterPluginParam::mutable_val() {
  set_has_val();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.FilterPluginParam.val)
  return val_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FilterPluginParam::release_val() {
  // @@protoc_insertion_point(field_release:video_server_protocol.FilterPluginParam.val)
  clear_has_val();
  return val_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FilterPluginParam::set_allocated_val(::std::string* val) {
  if (val != NULL) {
    set_has_val();
  } else {
    clear_has_val();
  }
  val_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), val);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.FilterPluginParam.val)
}

// -------------------------------------------------------------------

// FilterPluginMetadata

// required string plugin_static_name = 1;
inline bool FilterPluginMetadata::has_plugin_static_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FilterPluginMetadata::set_has_plugin_static_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FilterPluginMetadata::clear_has_plugin_static_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FilterPluginMetadata::clear_plugin_static_name() {
  plugin_static_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_plugin_static_name();
}
inline const ::std::string& FilterPluginMetadata::plugin_static_name() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.FilterPluginMetadata.plugin_static_name)
  return plugin_static_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FilterPluginMetadata::set_plugin_static_name(const ::std::string& value) {
  set_has_plugin_static_name();
  plugin_static_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.FilterPluginMetadata.plugin_static_name)
}
inline void FilterPluginMetadata::set_plugin_static_name(const char* value) {
  set_has_plugin_static_name();
  plugin_static_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.FilterPluginMetadata.plugin_static_name)
}
inline void FilterPluginMetadata::set_plugin_static_name(const char* value, size_t size) {
  set_has_plugin_static_name();
  plugin_static_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.FilterPluginMetadata.plugin_static_name)
}
inline ::std::string* FilterPluginMetadata::mutable_plugin_static_name() {
  set_has_plugin_static_name();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.FilterPluginMetadata.plugin_static_name)
  return plugin_static_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FilterPluginMetadata::release_plugin_static_name() {
  // @@protoc_insertion_point(field_release:video_server_protocol.FilterPluginMetadata.plugin_static_name)
  clear_has_plugin_static_name();
  return plugin_static_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FilterPluginMetadata::set_allocated_plugin_static_name(::std::string* plugin_static_name) {
  if (plugin_static_name != NULL) {
    set_has_plugin_static_name();
  } else {
    clear_has_plugin_static_name();
  }
  plugin_static_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plugin_static_name);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.FilterPluginMetadata.plugin_static_name)
}

// required string gstreamer_element_name = 2;
inline bool FilterPluginMetadata::has_gstreamer_element_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FilterPluginMetadata::set_has_gstreamer_element_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FilterPluginMetadata::clear_has_gstreamer_element_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FilterPluginMetadata::clear_gstreamer_element_name() {
  gstreamer_element_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gstreamer_element_name();
}
inline const ::std::string& FilterPluginMetadata::gstreamer_element_name() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.FilterPluginMetadata.gstreamer_element_name)
  return gstreamer_element_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FilterPluginMetadata::set_gstreamer_element_name(const ::std::string& value) {
  set_has_gstreamer_element_name();
  gstreamer_element_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.FilterPluginMetadata.gstreamer_element_name)
}
inline void FilterPluginMetadata::set_gstreamer_element_name(const char* value) {
  set_has_gstreamer_element_name();
  gstreamer_element_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.FilterPluginMetadata.gstreamer_element_name)
}
inline void FilterPluginMetadata::set_gstreamer_element_name(const char* value, size_t size) {
  set_has_gstreamer_element_name();
  gstreamer_element_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.FilterPluginMetadata.gstreamer_element_name)
}
inline ::std::string* FilterPluginMetadata::mutable_gstreamer_element_name() {
  set_has_gstreamer_element_name();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.FilterPluginMetadata.gstreamer_element_name)
  return gstreamer_element_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FilterPluginMetadata::release_gstreamer_element_name() {
  // @@protoc_insertion_point(field_release:video_server_protocol.FilterPluginMetadata.gstreamer_element_name)
  clear_has_gstreamer_element_name();
  return gstreamer_element_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FilterPluginMetadata::set_allocated_gstreamer_element_name(::std::string* gstreamer_element_name) {
  if (gstreamer_element_name != NULL) {
    set_has_gstreamer_element_name();
  } else {
    clear_has_gstreamer_element_name();
  }
  gstreamer_element_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gstreamer_element_name);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.FilterPluginMetadata.gstreamer_element_name)
}

// repeated .video_server_protocol.FilterPluginParam params = 3;
inline int FilterPluginMetadata::params_size() const {
  return params_.size();
}
inline void FilterPluginMetadata::clear_params() {
  params_.Clear();
}
inline const ::video_server_protocol::FilterPluginParam& FilterPluginMetadata::params(int index) const {
  // @@protoc_insertion_point(field_get:video_server_protocol.FilterPluginMetadata.params)
  return params_.Get(index);
}
inline ::video_server_protocol::FilterPluginParam* FilterPluginMetadata::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:video_server_protocol.FilterPluginMetadata.params)
  return params_.Mutable(index);
}
inline ::video_server_protocol::FilterPluginParam* FilterPluginMetadata::add_params() {
  // @@protoc_insertion_point(field_add:video_server_protocol.FilterPluginMetadata.params)
  return params_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::video_server_protocol::FilterPluginParam >*
FilterPluginMetadata::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:video_server_protocol.FilterPluginMetadata.params)
  return &params_;
}
inline const ::google::protobuf::RepeatedPtrField< ::video_server_protocol::FilterPluginParam >&
FilterPluginMetadata::params() const {
  // @@protoc_insertion_point(field_list:video_server_protocol.FilterPluginMetadata.params)
  return params_;
}

// -------------------------------------------------------------------

// ContainerInitSettings

// required uint64 sensor_id = 1;
inline bool ContainerInitSettings::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContainerInitSettings::set_has_sensor_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContainerInitSettings::clear_has_sensor_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContainerInitSettings::clear_sensor_id() {
  sensor_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sensor_id();
}
inline ::google::protobuf::uint64 ContainerInitSettings::sensor_id() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerInitSettings.sensor_id)
  return sensor_id_;
}
inline void ContainerInitSettings::set_sensor_id(::google::protobuf::uint64 value) {
  set_has_sensor_id();
  sensor_id_ = value;
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerInitSettings.sensor_id)
}

// required uint64 profile_id = 2;
inline bool ContainerInitSettings::has_profile_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContainerInitSettings::set_has_profile_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContainerInitSettings::clear_has_profile_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContainerInitSettings::clear_profile_id() {
  profile_id_ = GOOGLE_ULONGLONG(0);
  clear_has_profile_id();
}
inline ::google::protobuf::uint64 ContainerInitSettings::profile_id() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerInitSettings.profile_id)
  return profile_id_;
}
inline void ContainerInitSettings::set_profile_id(::google::protobuf::uint64 value) {
  set_has_profile_id();
  profile_id_ = value;
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerInitSettings.profile_id)
}

// required string source_url = 3;
inline bool ContainerInitSettings::has_source_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContainerInitSettings::set_has_source_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContainerInitSettings::clear_has_source_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContainerInitSettings::clear_source_url() {
  source_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_url();
}
inline const ::std::string& ContainerInitSettings::source_url() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerInitSettings.source_url)
  return source_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerInitSettings::set_source_url(const ::std::string& value) {
  set_has_source_url();
  source_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerInitSettings.source_url)
}
inline void ContainerInitSettings::set_source_url(const char* value) {
  set_has_source_url();
  source_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.ContainerInitSettings.source_url)
}
inline void ContainerInitSettings::set_source_url(const char* value, size_t size) {
  set_has_source_url();
  source_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.ContainerInitSettings.source_url)
}
inline ::std::string* ContainerInitSettings::mutable_source_url() {
  set_has_source_url();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerInitSettings.source_url)
  return source_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContainerInitSettings::release_source_url() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ContainerInitSettings.source_url)
  clear_has_source_url();
  return source_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerInitSettings::set_allocated_source_url(::std::string* source_url) {
  if (source_url != NULL) {
    set_has_source_url();
  } else {
    clear_has_source_url();
  }
  source_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_url);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ContainerInitSettings.source_url)
}

// required string processing_id = 4;
inline bool ContainerInitSettings::has_processing_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContainerInitSettings::set_has_processing_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContainerInitSettings::clear_has_processing_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContainerInitSettings::clear_processing_id() {
  processing_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_processing_id();
}
inline const ::std::string& ContainerInitSettings::processing_id() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerInitSettings.processing_id)
  return processing_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerInitSettings::set_processing_id(const ::std::string& value) {
  set_has_processing_id();
  processing_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerInitSettings.processing_id)
}
inline void ContainerInitSettings::set_processing_id(const char* value) {
  set_has_processing_id();
  processing_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.ContainerInitSettings.processing_id)
}
inline void ContainerInitSettings::set_processing_id(const char* value, size_t size) {
  set_has_processing_id();
  processing_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.ContainerInitSettings.processing_id)
}
inline ::std::string* ContainerInitSettings::mutable_processing_id() {
  set_has_processing_id();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerInitSettings.processing_id)
  return processing_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContainerInitSettings::release_processing_id() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ContainerInitSettings.processing_id)
  clear_has_processing_id();
  return processing_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerInitSettings::set_allocated_processing_id(::std::string* processing_id) {
  if (processing_id != NULL) {
    set_has_processing_id();
  } else {
    clear_has_processing_id();
  }
  processing_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), processing_id);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ContainerInitSettings.processing_id)
}

// required string processing_name = 5;
inline bool ContainerInitSettings::has_processing_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContainerInitSettings::set_has_processing_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ContainerInitSettings::clear_has_processing_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ContainerInitSettings::clear_processing_name() {
  processing_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_processing_name();
}
inline const ::std::string& ContainerInitSettings::processing_name() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerInitSettings.processing_name)
  return processing_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerInitSettings::set_processing_name(const ::std::string& value) {
  set_has_processing_name();
  processing_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerInitSettings.processing_name)
}
inline void ContainerInitSettings::set_processing_name(const char* value) {
  set_has_processing_name();
  processing_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.ContainerInitSettings.processing_name)
}
inline void ContainerInitSettings::set_processing_name(const char* value, size_t size) {
  set_has_processing_name();
  processing_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.ContainerInitSettings.processing_name)
}
inline ::std::string* ContainerInitSettings::mutable_processing_name() {
  set_has_processing_name();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerInitSettings.processing_name)
  return processing_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContainerInitSettings::release_processing_name() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ContainerInitSettings.processing_name)
  clear_has_processing_name();
  return processing_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerInitSettings::set_allocated_processing_name(::std::string* processing_name) {
  if (processing_name != NULL) {
    set_has_processing_name();
  } else {
    clear_has_processing_name();
  }
  processing_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), processing_name);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ContainerInitSettings.processing_name)
}

// repeated .video_server_protocol.ContainerDpfObjreprMap dpf_objrepr_map = 6;
inline int ContainerInitSettings::dpf_objrepr_map_size() const {
  return dpf_objrepr_map_.size();
}
inline void ContainerInitSettings::clear_dpf_objrepr_map() {
  dpf_objrepr_map_.Clear();
}
inline const ::video_server_protocol::ContainerDpfObjreprMap& ContainerInitSettings::dpf_objrepr_map(int index) const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerInitSettings.dpf_objrepr_map)
  return dpf_objrepr_map_.Get(index);
}
inline ::video_server_protocol::ContainerDpfObjreprMap* ContainerInitSettings::mutable_dpf_objrepr_map(int index) {
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerInitSettings.dpf_objrepr_map)
  return dpf_objrepr_map_.Mutable(index);
}
inline ::video_server_protocol::ContainerDpfObjreprMap* ContainerInitSettings::add_dpf_objrepr_map() {
  // @@protoc_insertion_point(field_add:video_server_protocol.ContainerInitSettings.dpf_objrepr_map)
  return dpf_objrepr_map_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::video_server_protocol::ContainerDpfObjreprMap >*
ContainerInitSettings::mutable_dpf_objrepr_map() {
  // @@protoc_insertion_point(field_mutable_list:video_server_protocol.ContainerInitSettings.dpf_objrepr_map)
  return &dpf_objrepr_map_;
}
inline const ::google::protobuf::RepeatedPtrField< ::video_server_protocol::ContainerDpfObjreprMap >&
ContainerInitSettings::dpf_objrepr_map() const {
  // @@protoc_insertion_point(field_list:video_server_protocol.ContainerInitSettings.dpf_objrepr_map)
  return dpf_objrepr_map_;
}

// required string intervideosink_channel_name = 7;
inline bool ContainerInitSettings::has_intervideosink_channel_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ContainerInitSettings::set_has_intervideosink_channel_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ContainerInitSettings::clear_has_intervideosink_channel_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ContainerInitSettings::clear_intervideosink_channel_name() {
  intervideosink_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_intervideosink_channel_name();
}
inline const ::std::string& ContainerInitSettings::intervideosink_channel_name() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerInitSettings.intervideosink_channel_name)
  return intervideosink_channel_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerInitSettings::set_intervideosink_channel_name(const ::std::string& value) {
  set_has_intervideosink_channel_name();
  intervideosink_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerInitSettings.intervideosink_channel_name)
}
inline void ContainerInitSettings::set_intervideosink_channel_name(const char* value) {
  set_has_intervideosink_channel_name();
  intervideosink_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.ContainerInitSettings.intervideosink_channel_name)
}
inline void ContainerInitSettings::set_intervideosink_channel_name(const char* value, size_t size) {
  set_has_intervideosink_channel_name();
  intervideosink_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.ContainerInitSettings.intervideosink_channel_name)
}
inline ::std::string* ContainerInitSettings::mutable_intervideosink_channel_name() {
  set_has_intervideosink_channel_name();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerInitSettings.intervideosink_channel_name)
  return intervideosink_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContainerInitSettings::release_intervideosink_channel_name() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ContainerInitSettings.intervideosink_channel_name)
  clear_has_intervideosink_channel_name();
  return intervideosink_channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerInitSettings::set_allocated_intervideosink_channel_name(::std::string* intervideosink_channel_name) {
  if (intervideosink_channel_name != NULL) {
    set_has_intervideosink_channel_name();
  } else {
    clear_has_intervideosink_channel_name();
  }
  intervideosink_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), intervideosink_channel_name);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ContainerInitSettings.intervideosink_channel_name)
}

// required string shm_rtp_stream_caps = 8;
inline bool ContainerInitSettings::has_shm_rtp_stream_caps() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ContainerInitSettings::set_has_shm_rtp_stream_caps() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ContainerInitSettings::clear_has_shm_rtp_stream_caps() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ContainerInitSettings::clear_shm_rtp_stream_caps() {
  shm_rtp_stream_caps_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_shm_rtp_stream_caps();
}
inline const ::std::string& ContainerInitSettings::shm_rtp_stream_caps() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerInitSettings.shm_rtp_stream_caps)
  return shm_rtp_stream_caps_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerInitSettings::set_shm_rtp_stream_caps(const ::std::string& value) {
  set_has_shm_rtp_stream_caps();
  shm_rtp_stream_caps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerInitSettings.shm_rtp_stream_caps)
}
inline void ContainerInitSettings::set_shm_rtp_stream_caps(const char* value) {
  set_has_shm_rtp_stream_caps();
  shm_rtp_stream_caps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.ContainerInitSettings.shm_rtp_stream_caps)
}
inline void ContainerInitSettings::set_shm_rtp_stream_caps(const char* value, size_t size) {
  set_has_shm_rtp_stream_caps();
  shm_rtp_stream_caps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.ContainerInitSettings.shm_rtp_stream_caps)
}
inline ::std::string* ContainerInitSettings::mutable_shm_rtp_stream_caps() {
  set_has_shm_rtp_stream_caps();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerInitSettings.shm_rtp_stream_caps)
  return shm_rtp_stream_caps_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContainerInitSettings::release_shm_rtp_stream_caps() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ContainerInitSettings.shm_rtp_stream_caps)
  clear_has_shm_rtp_stream_caps();
  return shm_rtp_stream_caps_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerInitSettings::set_allocated_shm_rtp_stream_caps(::std::string* shm_rtp_stream_caps) {
  if (shm_rtp_stream_caps != NULL) {
    set_has_shm_rtp_stream_caps();
  } else {
    clear_has_shm_rtp_stream_caps();
  }
  shm_rtp_stream_caps_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shm_rtp_stream_caps);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ContainerInitSettings.shm_rtp_stream_caps)
}

// required string shm_rtp_stream_encoding = 9;
inline bool ContainerInitSettings::has_shm_rtp_stream_encoding() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ContainerInitSettings::set_has_shm_rtp_stream_encoding() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ContainerInitSettings::clear_has_shm_rtp_stream_encoding() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ContainerInitSettings::clear_shm_rtp_stream_encoding() {
  shm_rtp_stream_encoding_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_shm_rtp_stream_encoding();
}
inline const ::std::string& ContainerInitSettings::shm_rtp_stream_encoding() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerInitSettings.shm_rtp_stream_encoding)
  return shm_rtp_stream_encoding_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerInitSettings::set_shm_rtp_stream_encoding(const ::std::string& value) {
  set_has_shm_rtp_stream_encoding();
  shm_rtp_stream_encoding_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerInitSettings.shm_rtp_stream_encoding)
}
inline void ContainerInitSettings::set_shm_rtp_stream_encoding(const char* value) {
  set_has_shm_rtp_stream_encoding();
  shm_rtp_stream_encoding_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.ContainerInitSettings.shm_rtp_stream_encoding)
}
inline void ContainerInitSettings::set_shm_rtp_stream_encoding(const char* value, size_t size) {
  set_has_shm_rtp_stream_encoding();
  shm_rtp_stream_encoding_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.ContainerInitSettings.shm_rtp_stream_encoding)
}
inline ::std::string* ContainerInitSettings::mutable_shm_rtp_stream_encoding() {
  set_has_shm_rtp_stream_encoding();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerInitSettings.shm_rtp_stream_encoding)
  return shm_rtp_stream_encoding_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContainerInitSettings::release_shm_rtp_stream_encoding() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ContainerInitSettings.shm_rtp_stream_encoding)
  clear_has_shm_rtp_stream_encoding();
  return shm_rtp_stream_encoding_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerInitSettings::set_allocated_shm_rtp_stream_encoding(::std::string* shm_rtp_stream_encoding) {
  if (shm_rtp_stream_encoding != NULL) {
    set_has_shm_rtp_stream_encoding();
  } else {
    clear_has_shm_rtp_stream_encoding();
  }
  shm_rtp_stream_encoding_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shm_rtp_stream_encoding);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ContainerInitSettings.shm_rtp_stream_encoding)
}

// repeated .video_server_protocol.FilterPluginMetadata plugins = 10;
inline int ContainerInitSettings::plugins_size() const {
  return plugins_.size();
}
inline void ContainerInitSettings::clear_plugins() {
  plugins_.Clear();
}
inline const ::video_server_protocol::FilterPluginMetadata& ContainerInitSettings::plugins(int index) const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerInitSettings.plugins)
  return plugins_.Get(index);
}
inline ::video_server_protocol::FilterPluginMetadata* ContainerInitSettings::mutable_plugins(int index) {
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerInitSettings.plugins)
  return plugins_.Mutable(index);
}
inline ::video_server_protocol::FilterPluginMetadata* ContainerInitSettings::add_plugins() {
  // @@protoc_insertion_point(field_add:video_server_protocol.ContainerInitSettings.plugins)
  return plugins_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::video_server_protocol::FilterPluginMetadata >*
ContainerInitSettings::mutable_plugins() {
  // @@protoc_insertion_point(field_mutable_list:video_server_protocol.ContainerInitSettings.plugins)
  return &plugins_;
}
inline const ::google::protobuf::RepeatedPtrField< ::video_server_protocol::FilterPluginMetadata >&
ContainerInitSettings::plugins() const {
  // @@protoc_insertion_point(field_list:video_server_protocol.ContainerInitSettings.plugins)
  return plugins_;
}

// required string VideoReceiverRtpPayloadSocket = 11;
inline bool ContainerInitSettings::has_videoreceiverrtppayloadsocket() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ContainerInitSettings::set_has_videoreceiverrtppayloadsocket() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ContainerInitSettings::clear_has_videoreceiverrtppayloadsocket() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ContainerInitSettings::clear_videoreceiverrtppayloadsocket() {
  videoreceiverrtppayloadsocket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_videoreceiverrtppayloadsocket();
}
inline const ::std::string& ContainerInitSettings::videoreceiverrtppayloadsocket() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerInitSettings.VideoReceiverRtpPayloadSocket)
  return videoreceiverrtppayloadsocket_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerInitSettings::set_videoreceiverrtppayloadsocket(const ::std::string& value) {
  set_has_videoreceiverrtppayloadsocket();
  videoreceiverrtppayloadsocket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerInitSettings.VideoReceiverRtpPayloadSocket)
}
inline void ContainerInitSettings::set_videoreceiverrtppayloadsocket(const char* value) {
  set_has_videoreceiverrtppayloadsocket();
  videoreceiverrtppayloadsocket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.ContainerInitSettings.VideoReceiverRtpPayloadSocket)
}
inline void ContainerInitSettings::set_videoreceiverrtppayloadsocket(const char* value, size_t size) {
  set_has_videoreceiverrtppayloadsocket();
  videoreceiverrtppayloadsocket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.ContainerInitSettings.VideoReceiverRtpPayloadSocket)
}
inline ::std::string* ContainerInitSettings::mutable_videoreceiverrtppayloadsocket() {
  set_has_videoreceiverrtppayloadsocket();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerInitSettings.VideoReceiverRtpPayloadSocket)
  return videoreceiverrtppayloadsocket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContainerInitSettings::release_videoreceiverrtppayloadsocket() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ContainerInitSettings.VideoReceiverRtpPayloadSocket)
  clear_has_videoreceiverrtppayloadsocket();
  return videoreceiverrtppayloadsocket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerInitSettings::set_allocated_videoreceiverrtppayloadsocket(::std::string* videoreceiverrtppayloadsocket) {
  if (videoreceiverrtppayloadsocket != NULL) {
    set_has_videoreceiverrtppayloadsocket();
  } else {
    clear_has_videoreceiverrtppayloadsocket();
  }
  videoreceiverrtppayloadsocket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), videoreceiverrtppayloadsocket);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ContainerInitSettings.VideoReceiverRtpPayloadSocket)
}

// required int32 processing_flags = 12;
inline bool ContainerInitSettings::has_processing_flags() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ContainerInitSettings::set_has_processing_flags() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ContainerInitSettings::clear_has_processing_flags() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ContainerInitSettings::clear_processing_flags() {
  processing_flags_ = 0;
  clear_has_processing_flags();
}
inline ::google::protobuf::int32 ContainerInitSettings::processing_flags() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerInitSettings.processing_flags)
  return processing_flags_;
}
inline void ContainerInitSettings::set_processing_flags(::google::protobuf::int32 value) {
  set_has_processing_flags();
  processing_flags_ = value;
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerInitSettings.processing_flags)
}

// -------------------------------------------------------------------

// MessageModuleUniqueId

// required int32 ip_octets = 1;
inline bool MessageModuleUniqueId::has_ip_octets() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageModuleUniqueId::set_has_ip_octets() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageModuleUniqueId::clear_has_ip_octets() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageModuleUniqueId::clear_ip_octets() {
  ip_octets_ = 0;
  clear_has_ip_octets();
}
inline ::google::protobuf::int32 MessageModuleUniqueId::ip_octets() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageModuleUniqueId.ip_octets)
  return ip_octets_;
}
inline void MessageModuleUniqueId::set_ip_octets(::google::protobuf::int32 value) {
  set_has_ip_octets();
  ip_octets_ = value;
  // @@protoc_insertion_point(field_set:video_server_protocol.MessageModuleUniqueId.ip_octets)
}

// required int32 pid = 2;
inline bool MessageModuleUniqueId::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageModuleUniqueId::set_has_pid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageModuleUniqueId::clear_has_pid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageModuleUniqueId::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
inline ::google::protobuf::int32 MessageModuleUniqueId::pid() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageModuleUniqueId.pid)
  return pid_;
}
inline void MessageModuleUniqueId::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:video_server_protocol.MessageModuleUniqueId.pid)
}

// -------------------------------------------------------------------

// MessageHeader

// required .video_server_protocol.MessageModuleUniqueId id = 1;
inline bool MessageHeader::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageHeader::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageHeader::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageHeader::clear_id() {
  if (id_ != NULL) id_->::video_server_protocol::MessageModuleUniqueId::Clear();
  clear_has_id();
}
inline const ::video_server_protocol::MessageModuleUniqueId& MessageHeader::id() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageHeader.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::video_server_protocol::MessageModuleUniqueId* MessageHeader::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::video_server_protocol::MessageModuleUniqueId;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageHeader.id)
  return id_;
}
inline ::video_server_protocol::MessageModuleUniqueId* MessageHeader::release_id() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageHeader.id)
  clear_has_id();
  ::video_server_protocol::MessageModuleUniqueId* temp = id_;
  id_ = NULL;
  return temp;
}
inline void MessageHeader::set_allocated_id(::video_server_protocol::MessageModuleUniqueId* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageHeader.id)
}

// required string module_name = 2;
inline bool MessageHeader::has_module_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageHeader::set_has_module_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageHeader::clear_has_module_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageHeader::clear_module_name() {
  module_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_module_name();
}
inline const ::std::string& MessageHeader::module_name() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageHeader.module_name)
  return module_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageHeader::set_module_name(const ::std::string& value) {
  set_has_module_name();
  module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.MessageHeader.module_name)
}
inline void MessageHeader::set_module_name(const char* value) {
  set_has_module_name();
  module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.MessageHeader.module_name)
}
inline void MessageHeader::set_module_name(const char* value, size_t size) {
  set_has_module_name();
  module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.MessageHeader.module_name)
}
inline ::std::string* MessageHeader::mutable_module_name() {
  set_has_module_name();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageHeader.module_name)
  return module_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageHeader::release_module_name() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageHeader.module_name)
  clear_has_module_name();
  return module_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageHeader::set_allocated_module_name(::std::string* module_name) {
  if (module_name != NULL) {
    set_has_module_name();
  } else {
    clear_has_module_name();
  }
  module_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), module_name);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageHeader.module_name)
}

// optional string last_error = 3;
inline bool MessageHeader::has_last_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessageHeader::set_has_last_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessageHeader::clear_has_last_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessageHeader::clear_last_error() {
  last_error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_error();
}
inline const ::std::string& MessageHeader::last_error() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageHeader.last_error)
  return last_error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageHeader::set_last_error(const ::std::string& value) {
  set_has_last_error();
  last_error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.MessageHeader.last_error)
}
inline void MessageHeader::set_last_error(const char* value) {
  set_has_last_error();
  last_error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.MessageHeader.last_error)
}
inline void MessageHeader::set_last_error(const char* value, size_t size) {
  set_has_last_error();
  last_error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.MessageHeader.last_error)
}
inline ::std::string* MessageHeader::mutable_last_error() {
  set_has_last_error();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageHeader.last_error)
  return last_error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageHeader::release_last_error() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageHeader.last_error)
  clear_has_last_error();
  return last_error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageHeader::set_allocated_last_error(::std::string* last_error) {
  if (last_error != NULL) {
    set_has_last_error();
  } else {
    clear_has_last_error();
  }
  last_error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_error);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageHeader.last_error)
}

// -------------------------------------------------------------------

// MessageAnalyzerProxy

// required .video_server_protocol.MessageHeader header = 1;
inline bool MessageAnalyzerProxy::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageAnalyzerProxy::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageAnalyzerProxy::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageAnalyzerProxy::clear_header() {
  if (header_ != NULL) header_->::video_server_protocol::MessageHeader::Clear();
  clear_has_header();
}
inline const ::video_server_protocol::MessageHeader& MessageAnalyzerProxy::header() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerProxy.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::video_server_protocol::MessageHeader* MessageAnalyzerProxy::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::video_server_protocol::MessageHeader;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerProxy.header)
  return header_;
}
inline ::video_server_protocol::MessageHeader* MessageAnalyzerProxy::release_header() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerProxy.header)
  clear_has_header();
  ::video_server_protocol::MessageHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void MessageAnalyzerProxy::set_allocated_header(::video_server_protocol::MessageHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerProxy.header)
}

// required .video_server_protocol.ESyncCommandType msg_type = 2;
inline bool MessageAnalyzerProxy::has_msg_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageAnalyzerProxy::set_has_msg_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageAnalyzerProxy::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageAnalyzerProxy::clear_msg_type() {
  msg_type_ = 0;
  clear_has_msg_type();
}
inline ::video_server_protocol::ESyncCommandType MessageAnalyzerProxy::msg_type() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerProxy.msg_type)
  return static_cast< ::video_server_protocol::ESyncCommandType >(msg_type_);
}
inline void MessageAnalyzerProxy::set_msg_type(::video_server_protocol::ESyncCommandType value) {
  assert(::video_server_protocol::ESyncCommandType_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:video_server_protocol.MessageAnalyzerProxy.msg_type)
}

// optional .video_server_protocol.MessageRequestStart msg_start = 3;
inline bool MessageAnalyzerProxy::has_msg_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessageAnalyzerProxy::set_has_msg_start() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessageAnalyzerProxy::clear_has_msg_start() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessageAnalyzerProxy::clear_msg_start() {
  if (msg_start_ != NULL) msg_start_->::video_server_protocol::MessageRequestStart::Clear();
  clear_has_msg_start();
}
inline const ::video_server_protocol::MessageRequestStart& MessageAnalyzerProxy::msg_start() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerProxy.msg_start)
  return msg_start_ != NULL ? *msg_start_ : *default_instance_->msg_start_;
}
inline ::video_server_protocol::MessageRequestStart* MessageAnalyzerProxy::mutable_msg_start() {
  set_has_msg_start();
  if (msg_start_ == NULL) {
    msg_start_ = new ::video_server_protocol::MessageRequestStart;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerProxy.msg_start)
  return msg_start_;
}
inline ::video_server_protocol::MessageRequestStart* MessageAnalyzerProxy::release_msg_start() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerProxy.msg_start)
  clear_has_msg_start();
  ::video_server_protocol::MessageRequestStart* temp = msg_start_;
  msg_start_ = NULL;
  return temp;
}
inline void MessageAnalyzerProxy::set_allocated_msg_start(::video_server_protocol::MessageRequestStart* msg_start) {
  delete msg_start_;
  msg_start_ = msg_start;
  if (msg_start) {
    set_has_msg_start();
  } else {
    clear_has_msg_start();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerProxy.msg_start)
}

// optional .video_server_protocol.MessageRequestPause msg_pause = 4;
inline bool MessageAnalyzerProxy::has_msg_pause() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MessageAnalyzerProxy::set_has_msg_pause() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MessageAnalyzerProxy::clear_has_msg_pause() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MessageAnalyzerProxy::clear_msg_pause() {
  if (msg_pause_ != NULL) msg_pause_->::video_server_protocol::MessageRequestPause::Clear();
  clear_has_msg_pause();
}
inline const ::video_server_protocol::MessageRequestPause& MessageAnalyzerProxy::msg_pause() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerProxy.msg_pause)
  return msg_pause_ != NULL ? *msg_pause_ : *default_instance_->msg_pause_;
}
inline ::video_server_protocol::MessageRequestPause* MessageAnalyzerProxy::mutable_msg_pause() {
  set_has_msg_pause();
  if (msg_pause_ == NULL) {
    msg_pause_ = new ::video_server_protocol::MessageRequestPause;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerProxy.msg_pause)
  return msg_pause_;
}
inline ::video_server_protocol::MessageRequestPause* MessageAnalyzerProxy::release_msg_pause() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerProxy.msg_pause)
  clear_has_msg_pause();
  ::video_server_protocol::MessageRequestPause* temp = msg_pause_;
  msg_pause_ = NULL;
  return temp;
}
inline void MessageAnalyzerProxy::set_allocated_msg_pause(::video_server_protocol::MessageRequestPause* msg_pause) {
  delete msg_pause_;
  msg_pause_ = msg_pause;
  if (msg_pause) {
    set_has_msg_pause();
  } else {
    clear_has_msg_pause();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerProxy.msg_pause)
}

// optional .video_server_protocol.MessageRequestResume msg_resume = 5;
inline bool MessageAnalyzerProxy::has_msg_resume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MessageAnalyzerProxy::set_has_msg_resume() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MessageAnalyzerProxy::clear_has_msg_resume() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MessageAnalyzerProxy::clear_msg_resume() {
  if (msg_resume_ != NULL) msg_resume_->::video_server_protocol::MessageRequestResume::Clear();
  clear_has_msg_resume();
}
inline const ::video_server_protocol::MessageRequestResume& MessageAnalyzerProxy::msg_resume() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerProxy.msg_resume)
  return msg_resume_ != NULL ? *msg_resume_ : *default_instance_->msg_resume_;
}
inline ::video_server_protocol::MessageRequestResume* MessageAnalyzerProxy::mutable_msg_resume() {
  set_has_msg_resume();
  if (msg_resume_ == NULL) {
    msg_resume_ = new ::video_server_protocol::MessageRequestResume;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerProxy.msg_resume)
  return msg_resume_;
}
inline ::video_server_protocol::MessageRequestResume* MessageAnalyzerProxy::release_msg_resume() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerProxy.msg_resume)
  clear_has_msg_resume();
  ::video_server_protocol::MessageRequestResume* temp = msg_resume_;
  msg_resume_ = NULL;
  return temp;
}
inline void MessageAnalyzerProxy::set_allocated_msg_resume(::video_server_protocol::MessageRequestResume* msg_resume) {
  delete msg_resume_;
  msg_resume_ = msg_resume;
  if (msg_resume) {
    set_has_msg_resume();
  } else {
    clear_has_msg_resume();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerProxy.msg_resume)
}

// optional .video_server_protocol.MessageRequestStop msg_stop = 6;
inline bool MessageAnalyzerProxy::has_msg_stop() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MessageAnalyzerProxy::set_has_msg_stop() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MessageAnalyzerProxy::clear_has_msg_stop() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MessageAnalyzerProxy::clear_msg_stop() {
  if (msg_stop_ != NULL) msg_stop_->::video_server_protocol::MessageRequestStop::Clear();
  clear_has_msg_stop();
}
inline const ::video_server_protocol::MessageRequestStop& MessageAnalyzerProxy::msg_stop() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerProxy.msg_stop)
  return msg_stop_ != NULL ? *msg_stop_ : *default_instance_->msg_stop_;
}
inline ::video_server_protocol::MessageRequestStop* MessageAnalyzerProxy::mutable_msg_stop() {
  set_has_msg_stop();
  if (msg_stop_ == NULL) {
    msg_stop_ = new ::video_server_protocol::MessageRequestStop;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerProxy.msg_stop)
  return msg_stop_;
}
inline ::video_server_protocol::MessageRequestStop* MessageAnalyzerProxy::release_msg_stop() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerProxy.msg_stop)
  clear_has_msg_stop();
  ::video_server_protocol::MessageRequestStop* temp = msg_stop_;
  msg_stop_ = NULL;
  return temp;
}
inline void MessageAnalyzerProxy::set_allocated_msg_stop(::video_server_protocol::MessageRequestStop* msg_stop) {
  delete msg_stop_;
  msg_stop_ = msg_stop;
  if (msg_stop) {
    set_has_msg_stop();
  } else {
    clear_has_msg_stop();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerProxy.msg_stop)
}

// optional .video_server_protocol.MessageRequestGetStatus msg_get_status = 7;
inline bool MessageAnalyzerProxy::has_msg_get_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MessageAnalyzerProxy::set_has_msg_get_status() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MessageAnalyzerProxy::clear_has_msg_get_status() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MessageAnalyzerProxy::clear_msg_get_status() {
  if (msg_get_status_ != NULL) msg_get_status_->::video_server_protocol::MessageRequestGetStatus::Clear();
  clear_has_msg_get_status();
}
inline const ::video_server_protocol::MessageRequestGetStatus& MessageAnalyzerProxy::msg_get_status() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerProxy.msg_get_status)
  return msg_get_status_ != NULL ? *msg_get_status_ : *default_instance_->msg_get_status_;
}
inline ::video_server_protocol::MessageRequestGetStatus* MessageAnalyzerProxy::mutable_msg_get_status() {
  set_has_msg_get_status();
  if (msg_get_status_ == NULL) {
    msg_get_status_ = new ::video_server_protocol::MessageRequestGetStatus;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerProxy.msg_get_status)
  return msg_get_status_;
}
inline ::video_server_protocol::MessageRequestGetStatus* MessageAnalyzerProxy::release_msg_get_status() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerProxy.msg_get_status)
  clear_has_msg_get_status();
  ::video_server_protocol::MessageRequestGetStatus* temp = msg_get_status_;
  msg_get_status_ = NULL;
  return temp;
}
inline void MessageAnalyzerProxy::set_allocated_msg_get_status(::video_server_protocol::MessageRequestGetStatus* msg_get_status) {
  delete msg_get_status_;
  msg_get_status_ = msg_get_status;
  if (msg_get_status) {
    set_has_msg_get_status();
  } else {
    clear_has_msg_get_status();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerProxy.msg_get_status)
}

// optional .video_server_protocol.MessageRequestGetSettings msg_get_settings = 8;
inline bool MessageAnalyzerProxy::has_msg_get_settings() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MessageAnalyzerProxy::set_has_msg_get_settings() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MessageAnalyzerProxy::clear_has_msg_get_settings() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MessageAnalyzerProxy::clear_msg_get_settings() {
  if (msg_get_settings_ != NULL) msg_get_settings_->::video_server_protocol::MessageRequestGetSettings::Clear();
  clear_has_msg_get_settings();
}
inline const ::video_server_protocol::MessageRequestGetSettings& MessageAnalyzerProxy::msg_get_settings() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerProxy.msg_get_settings)
  return msg_get_settings_ != NULL ? *msg_get_settings_ : *default_instance_->msg_get_settings_;
}
inline ::video_server_protocol::MessageRequestGetSettings* MessageAnalyzerProxy::mutable_msg_get_settings() {
  set_has_msg_get_settings();
  if (msg_get_settings_ == NULL) {
    msg_get_settings_ = new ::video_server_protocol::MessageRequestGetSettings;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerProxy.msg_get_settings)
  return msg_get_settings_;
}
inline ::video_server_protocol::MessageRequestGetSettings* MessageAnalyzerProxy::release_msg_get_settings() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerProxy.msg_get_settings)
  clear_has_msg_get_settings();
  ::video_server_protocol::MessageRequestGetSettings* temp = msg_get_settings_;
  msg_get_settings_ = NULL;
  return temp;
}
inline void MessageAnalyzerProxy::set_allocated_msg_get_settings(::video_server_protocol::MessageRequestGetSettings* msg_get_settings) {
  delete msg_get_settings_;
  msg_get_settings_ = msg_get_settings;
  if (msg_get_settings) {
    set_has_msg_get_settings();
  } else {
    clear_has_msg_get_settings();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerProxy.msg_get_settings)
}

// optional .video_server_protocol.MessageRequestGetLastError msg_get_last_error = 9;
inline bool MessageAnalyzerProxy::has_msg_get_last_error() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MessageAnalyzerProxy::set_has_msg_get_last_error() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MessageAnalyzerProxy::clear_has_msg_get_last_error() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MessageAnalyzerProxy::clear_msg_get_last_error() {
  if (msg_get_last_error_ != NULL) msg_get_last_error_->::video_server_protocol::MessageRequestGetLastError::Clear();
  clear_has_msg_get_last_error();
}
inline const ::video_server_protocol::MessageRequestGetLastError& MessageAnalyzerProxy::msg_get_last_error() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerProxy.msg_get_last_error)
  return msg_get_last_error_ != NULL ? *msg_get_last_error_ : *default_instance_->msg_get_last_error_;
}
inline ::video_server_protocol::MessageRequestGetLastError* MessageAnalyzerProxy::mutable_msg_get_last_error() {
  set_has_msg_get_last_error();
  if (msg_get_last_error_ == NULL) {
    msg_get_last_error_ = new ::video_server_protocol::MessageRequestGetLastError;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerProxy.msg_get_last_error)
  return msg_get_last_error_;
}
inline ::video_server_protocol::MessageRequestGetLastError* MessageAnalyzerProxy::release_msg_get_last_error() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerProxy.msg_get_last_error)
  clear_has_msg_get_last_error();
  ::video_server_protocol::MessageRequestGetLastError* temp = msg_get_last_error_;
  msg_get_last_error_ = NULL;
  return temp;
}
inline void MessageAnalyzerProxy::set_allocated_msg_get_last_error(::video_server_protocol::MessageRequestGetLastError* msg_get_last_error) {
  delete msg_get_last_error_;
  msg_get_last_error_ = msg_get_last_error;
  if (msg_get_last_error) {
    set_has_msg_get_last_error();
  } else {
    clear_has_msg_get_last_error();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerProxy.msg_get_last_error)
}

// -------------------------------------------------------------------

// MessageRequestStart

// required .video_server_protocol.ContainerInitSettings settings = 1;
inline bool MessageRequestStart::has_settings() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageRequestStart::set_has_settings() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageRequestStart::clear_has_settings() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageRequestStart::clear_settings() {
  if (settings_ != NULL) settings_->::video_server_protocol::ContainerInitSettings::Clear();
  clear_has_settings();
}
inline const ::video_server_protocol::ContainerInitSettings& MessageRequestStart::settings() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageRequestStart.settings)
  return settings_ != NULL ? *settings_ : *default_instance_->settings_;
}
inline ::video_server_protocol::ContainerInitSettings* MessageRequestStart::mutable_settings() {
  set_has_settings();
  if (settings_ == NULL) {
    settings_ = new ::video_server_protocol::ContainerInitSettings;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageRequestStart.settings)
  return settings_;
}
inline ::video_server_protocol::ContainerInitSettings* MessageRequestStart::release_settings() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageRequestStart.settings)
  clear_has_settings();
  ::video_server_protocol::ContainerInitSettings* temp = settings_;
  settings_ = NULL;
  return temp;
}
inline void MessageRequestStart::set_allocated_settings(::video_server_protocol::ContainerInitSettings* settings) {
  delete settings_;
  settings_ = settings;
  if (settings) {
    set_has_settings();
  } else {
    clear_has_settings();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageRequestStart.settings)
}

// -------------------------------------------------------------------

// MessageRequestPause

// -------------------------------------------------------------------

// MessageRequestResume

// -------------------------------------------------------------------

// MessageRequestStop

// -------------------------------------------------------------------

// MessageRequestGetStatus

// -------------------------------------------------------------------

// MessageRequestGetSettings

// -------------------------------------------------------------------

// MessageRequestGetLastError

// -------------------------------------------------------------------

// MessageAnalyzerReal

// required .video_server_protocol.MessageHeader header = 1;
inline bool MessageAnalyzerReal::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageAnalyzerReal::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageAnalyzerReal::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageAnalyzerReal::clear_header() {
  if (header_ != NULL) header_->::video_server_protocol::MessageHeader::Clear();
  clear_has_header();
}
inline const ::video_server_protocol::MessageHeader& MessageAnalyzerReal::header() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerReal.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::video_server_protocol::MessageHeader* MessageAnalyzerReal::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::video_server_protocol::MessageHeader;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerReal.header)
  return header_;
}
inline ::video_server_protocol::MessageHeader* MessageAnalyzerReal::release_header() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerReal.header)
  clear_has_header();
  ::video_server_protocol::MessageHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void MessageAnalyzerReal::set_allocated_header(::video_server_protocol::MessageHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerReal.header)
}

// required .video_server_protocol.ESyncCommandType msg_type = 2;
inline bool MessageAnalyzerReal::has_msg_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageAnalyzerReal::set_has_msg_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageAnalyzerReal::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageAnalyzerReal::clear_msg_type() {
  msg_type_ = 0;
  clear_has_msg_type();
}
inline ::video_server_protocol::ESyncCommandType MessageAnalyzerReal::msg_type() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerReal.msg_type)
  return static_cast< ::video_server_protocol::ESyncCommandType >(msg_type_);
}
inline void MessageAnalyzerReal::set_msg_type(::video_server_protocol::ESyncCommandType value) {
  assert(::video_server_protocol::ESyncCommandType_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:video_server_protocol.MessageAnalyzerReal.msg_type)
}

// optional .video_server_protocol.MessageResponseStart msg_start = 4;
inline bool MessageAnalyzerReal::has_msg_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessageAnalyzerReal::set_has_msg_start() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessageAnalyzerReal::clear_has_msg_start() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessageAnalyzerReal::clear_msg_start() {
  if (msg_start_ != NULL) msg_start_->::video_server_protocol::MessageResponseStart::Clear();
  clear_has_msg_start();
}
inline const ::video_server_protocol::MessageResponseStart& MessageAnalyzerReal::msg_start() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerReal.msg_start)
  return msg_start_ != NULL ? *msg_start_ : *default_instance_->msg_start_;
}
inline ::video_server_protocol::MessageResponseStart* MessageAnalyzerReal::mutable_msg_start() {
  set_has_msg_start();
  if (msg_start_ == NULL) {
    msg_start_ = new ::video_server_protocol::MessageResponseStart;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerReal.msg_start)
  return msg_start_;
}
inline ::video_server_protocol::MessageResponseStart* MessageAnalyzerReal::release_msg_start() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerReal.msg_start)
  clear_has_msg_start();
  ::video_server_protocol::MessageResponseStart* temp = msg_start_;
  msg_start_ = NULL;
  return temp;
}
inline void MessageAnalyzerReal::set_allocated_msg_start(::video_server_protocol::MessageResponseStart* msg_start) {
  delete msg_start_;
  msg_start_ = msg_start;
  if (msg_start) {
    set_has_msg_start();
  } else {
    clear_has_msg_start();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerReal.msg_start)
}

// optional .video_server_protocol.MessageResponsePause msg_pause = 5;
inline bool MessageAnalyzerReal::has_msg_pause() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MessageAnalyzerReal::set_has_msg_pause() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MessageAnalyzerReal::clear_has_msg_pause() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MessageAnalyzerReal::clear_msg_pause() {
  if (msg_pause_ != NULL) msg_pause_->::video_server_protocol::MessageResponsePause::Clear();
  clear_has_msg_pause();
}
inline const ::video_server_protocol::MessageResponsePause& MessageAnalyzerReal::msg_pause() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerReal.msg_pause)
  return msg_pause_ != NULL ? *msg_pause_ : *default_instance_->msg_pause_;
}
inline ::video_server_protocol::MessageResponsePause* MessageAnalyzerReal::mutable_msg_pause() {
  set_has_msg_pause();
  if (msg_pause_ == NULL) {
    msg_pause_ = new ::video_server_protocol::MessageResponsePause;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerReal.msg_pause)
  return msg_pause_;
}
inline ::video_server_protocol::MessageResponsePause* MessageAnalyzerReal::release_msg_pause() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerReal.msg_pause)
  clear_has_msg_pause();
  ::video_server_protocol::MessageResponsePause* temp = msg_pause_;
  msg_pause_ = NULL;
  return temp;
}
inline void MessageAnalyzerReal::set_allocated_msg_pause(::video_server_protocol::MessageResponsePause* msg_pause) {
  delete msg_pause_;
  msg_pause_ = msg_pause;
  if (msg_pause) {
    set_has_msg_pause();
  } else {
    clear_has_msg_pause();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerReal.msg_pause)
}

// optional .video_server_protocol.MessageResponseResume msg_resume = 6;
inline bool MessageAnalyzerReal::has_msg_resume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MessageAnalyzerReal::set_has_msg_resume() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MessageAnalyzerReal::clear_has_msg_resume() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MessageAnalyzerReal::clear_msg_resume() {
  if (msg_resume_ != NULL) msg_resume_->::video_server_protocol::MessageResponseResume::Clear();
  clear_has_msg_resume();
}
inline const ::video_server_protocol::MessageResponseResume& MessageAnalyzerReal::msg_resume() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerReal.msg_resume)
  return msg_resume_ != NULL ? *msg_resume_ : *default_instance_->msg_resume_;
}
inline ::video_server_protocol::MessageResponseResume* MessageAnalyzerReal::mutable_msg_resume() {
  set_has_msg_resume();
  if (msg_resume_ == NULL) {
    msg_resume_ = new ::video_server_protocol::MessageResponseResume;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerReal.msg_resume)
  return msg_resume_;
}
inline ::video_server_protocol::MessageResponseResume* MessageAnalyzerReal::release_msg_resume() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerReal.msg_resume)
  clear_has_msg_resume();
  ::video_server_protocol::MessageResponseResume* temp = msg_resume_;
  msg_resume_ = NULL;
  return temp;
}
inline void MessageAnalyzerReal::set_allocated_msg_resume(::video_server_protocol::MessageResponseResume* msg_resume) {
  delete msg_resume_;
  msg_resume_ = msg_resume;
  if (msg_resume) {
    set_has_msg_resume();
  } else {
    clear_has_msg_resume();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerReal.msg_resume)
}

// optional .video_server_protocol.MessageResponseStop msg_stop = 7;
inline bool MessageAnalyzerReal::has_msg_stop() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MessageAnalyzerReal::set_has_msg_stop() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MessageAnalyzerReal::clear_has_msg_stop() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MessageAnalyzerReal::clear_msg_stop() {
  if (msg_stop_ != NULL) msg_stop_->::video_server_protocol::MessageResponseStop::Clear();
  clear_has_msg_stop();
}
inline const ::video_server_protocol::MessageResponseStop& MessageAnalyzerReal::msg_stop() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerReal.msg_stop)
  return msg_stop_ != NULL ? *msg_stop_ : *default_instance_->msg_stop_;
}
inline ::video_server_protocol::MessageResponseStop* MessageAnalyzerReal::mutable_msg_stop() {
  set_has_msg_stop();
  if (msg_stop_ == NULL) {
    msg_stop_ = new ::video_server_protocol::MessageResponseStop;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerReal.msg_stop)
  return msg_stop_;
}
inline ::video_server_protocol::MessageResponseStop* MessageAnalyzerReal::release_msg_stop() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerReal.msg_stop)
  clear_has_msg_stop();
  ::video_server_protocol::MessageResponseStop* temp = msg_stop_;
  msg_stop_ = NULL;
  return temp;
}
inline void MessageAnalyzerReal::set_allocated_msg_stop(::video_server_protocol::MessageResponseStop* msg_stop) {
  delete msg_stop_;
  msg_stop_ = msg_stop;
  if (msg_stop) {
    set_has_msg_stop();
  } else {
    clear_has_msg_stop();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerReal.msg_stop)
}

// optional .video_server_protocol.MessageResponseGetStatus msg_get_status = 8;
inline bool MessageAnalyzerReal::has_msg_get_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MessageAnalyzerReal::set_has_msg_get_status() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MessageAnalyzerReal::clear_has_msg_get_status() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MessageAnalyzerReal::clear_msg_get_status() {
  if (msg_get_status_ != NULL) msg_get_status_->::video_server_protocol::MessageResponseGetStatus::Clear();
  clear_has_msg_get_status();
}
inline const ::video_server_protocol::MessageResponseGetStatus& MessageAnalyzerReal::msg_get_status() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerReal.msg_get_status)
  return msg_get_status_ != NULL ? *msg_get_status_ : *default_instance_->msg_get_status_;
}
inline ::video_server_protocol::MessageResponseGetStatus* MessageAnalyzerReal::mutable_msg_get_status() {
  set_has_msg_get_status();
  if (msg_get_status_ == NULL) {
    msg_get_status_ = new ::video_server_protocol::MessageResponseGetStatus;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerReal.msg_get_status)
  return msg_get_status_;
}
inline ::video_server_protocol::MessageResponseGetStatus* MessageAnalyzerReal::release_msg_get_status() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerReal.msg_get_status)
  clear_has_msg_get_status();
  ::video_server_protocol::MessageResponseGetStatus* temp = msg_get_status_;
  msg_get_status_ = NULL;
  return temp;
}
inline void MessageAnalyzerReal::set_allocated_msg_get_status(::video_server_protocol::MessageResponseGetStatus* msg_get_status) {
  delete msg_get_status_;
  msg_get_status_ = msg_get_status;
  if (msg_get_status) {
    set_has_msg_get_status();
  } else {
    clear_has_msg_get_status();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerReal.msg_get_status)
}

// optional .video_server_protocol.MessageResponseGetSettings msg_get_settings = 9;
inline bool MessageAnalyzerReal::has_msg_get_settings() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MessageAnalyzerReal::set_has_msg_get_settings() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MessageAnalyzerReal::clear_has_msg_get_settings() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MessageAnalyzerReal::clear_msg_get_settings() {
  if (msg_get_settings_ != NULL) msg_get_settings_->::video_server_protocol::MessageResponseGetSettings::Clear();
  clear_has_msg_get_settings();
}
inline const ::video_server_protocol::MessageResponseGetSettings& MessageAnalyzerReal::msg_get_settings() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerReal.msg_get_settings)
  return msg_get_settings_ != NULL ? *msg_get_settings_ : *default_instance_->msg_get_settings_;
}
inline ::video_server_protocol::MessageResponseGetSettings* MessageAnalyzerReal::mutable_msg_get_settings() {
  set_has_msg_get_settings();
  if (msg_get_settings_ == NULL) {
    msg_get_settings_ = new ::video_server_protocol::MessageResponseGetSettings;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerReal.msg_get_settings)
  return msg_get_settings_;
}
inline ::video_server_protocol::MessageResponseGetSettings* MessageAnalyzerReal::release_msg_get_settings() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerReal.msg_get_settings)
  clear_has_msg_get_settings();
  ::video_server_protocol::MessageResponseGetSettings* temp = msg_get_settings_;
  msg_get_settings_ = NULL;
  return temp;
}
inline void MessageAnalyzerReal::set_allocated_msg_get_settings(::video_server_protocol::MessageResponseGetSettings* msg_get_settings) {
  delete msg_get_settings_;
  msg_get_settings_ = msg_get_settings;
  if (msg_get_settings) {
    set_has_msg_get_settings();
  } else {
    clear_has_msg_get_settings();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerReal.msg_get_settings)
}

// optional .video_server_protocol.MessageResponseGetLastError msg_get_last_error = 10;
inline bool MessageAnalyzerReal::has_msg_get_last_error() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MessageAnalyzerReal::set_has_msg_get_last_error() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MessageAnalyzerReal::clear_has_msg_get_last_error() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MessageAnalyzerReal::clear_msg_get_last_error() {
  if (msg_get_last_error_ != NULL) msg_get_last_error_->::video_server_protocol::MessageResponseGetLastError::Clear();
  clear_has_msg_get_last_error();
}
inline const ::video_server_protocol::MessageResponseGetLastError& MessageAnalyzerReal::msg_get_last_error() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerReal.msg_get_last_error)
  return msg_get_last_error_ != NULL ? *msg_get_last_error_ : *default_instance_->msg_get_last_error_;
}
inline ::video_server_protocol::MessageResponseGetLastError* MessageAnalyzerReal::mutable_msg_get_last_error() {
  set_has_msg_get_last_error();
  if (msg_get_last_error_ == NULL) {
    msg_get_last_error_ = new ::video_server_protocol::MessageResponseGetLastError;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerReal.msg_get_last_error)
  return msg_get_last_error_;
}
inline ::video_server_protocol::MessageResponseGetLastError* MessageAnalyzerReal::release_msg_get_last_error() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerReal.msg_get_last_error)
  clear_has_msg_get_last_error();
  ::video_server_protocol::MessageResponseGetLastError* temp = msg_get_last_error_;
  msg_get_last_error_ = NULL;
  return temp;
}
inline void MessageAnalyzerReal::set_allocated_msg_get_last_error(::video_server_protocol::MessageResponseGetLastError* msg_get_last_error) {
  delete msg_get_last_error_;
  msg_get_last_error_ = msg_get_last_error;
  if (msg_get_last_error) {
    set_has_msg_get_last_error();
  } else {
    clear_has_msg_get_last_error();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerReal.msg_get_last_error)
}

// optional .video_server_protocol.MessageResponseAnalyticEvent msg_get_accum_events = 11;
inline bool MessageAnalyzerReal::has_msg_get_accum_events() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MessageAnalyzerReal::set_has_msg_get_accum_events() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MessageAnalyzerReal::clear_has_msg_get_accum_events() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MessageAnalyzerReal::clear_msg_get_accum_events() {
  if (msg_get_accum_events_ != NULL) msg_get_accum_events_->::video_server_protocol::MessageResponseAnalyticEvent::Clear();
  clear_has_msg_get_accum_events();
}
inline const ::video_server_protocol::MessageResponseAnalyticEvent& MessageAnalyzerReal::msg_get_accum_events() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerReal.msg_get_accum_events)
  return msg_get_accum_events_ != NULL ? *msg_get_accum_events_ : *default_instance_->msg_get_accum_events_;
}
inline ::video_server_protocol::MessageResponseAnalyticEvent* MessageAnalyzerReal::mutable_msg_get_accum_events() {
  set_has_msg_get_accum_events();
  if (msg_get_accum_events_ == NULL) {
    msg_get_accum_events_ = new ::video_server_protocol::MessageResponseAnalyticEvent;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerReal.msg_get_accum_events)
  return msg_get_accum_events_;
}
inline ::video_server_protocol::MessageResponseAnalyticEvent* MessageAnalyzerReal::release_msg_get_accum_events() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerReal.msg_get_accum_events)
  clear_has_msg_get_accum_events();
  ::video_server_protocol::MessageResponseAnalyticEvent* temp = msg_get_accum_events_;
  msg_get_accum_events_ = NULL;
  return temp;
}
inline void MessageAnalyzerReal::set_allocated_msg_get_accum_events(::video_server_protocol::MessageResponseAnalyticEvent* msg_get_accum_events) {
  delete msg_get_accum_events_;
  msg_get_accum_events_ = msg_get_accum_events;
  if (msg_get_accum_events) {
    set_has_msg_get_accum_events();
  } else {
    clear_has_msg_get_accum_events();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerReal.msg_get_accum_events)
}

// -------------------------------------------------------------------

// MessageResponseStart

// required bool success = 1;
inline bool MessageResponseStart::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageResponseStart::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageResponseStart::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageResponseStart::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool MessageResponseStart::success() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageResponseStart.success)
  return success_;
}
inline void MessageResponseStart::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:video_server_protocol.MessageResponseStart.success)
}

// -------------------------------------------------------------------

// MessageResponsePause

// -------------------------------------------------------------------

// MessageResponseResume

// -------------------------------------------------------------------

// MessageResponseStop

// -------------------------------------------------------------------

// MessageResponseGetStatus

// required .video_server_protocol.ContainerAnalyzeStatus status = 1;
inline bool MessageResponseGetStatus::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageResponseGetStatus::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageResponseGetStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageResponseGetStatus::clear_status() {
  if (status_ != NULL) status_->::video_server_protocol::ContainerAnalyzeStatus::Clear();
  clear_has_status();
}
inline const ::video_server_protocol::ContainerAnalyzeStatus& MessageResponseGetStatus::status() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageResponseGetStatus.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::video_server_protocol::ContainerAnalyzeStatus* MessageResponseGetStatus::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::video_server_protocol::ContainerAnalyzeStatus;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageResponseGetStatus.status)
  return status_;
}
inline ::video_server_protocol::ContainerAnalyzeStatus* MessageResponseGetStatus::release_status() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageResponseGetStatus.status)
  clear_has_status();
  ::video_server_protocol::ContainerAnalyzeStatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline void MessageResponseGetStatus::set_allocated_status(::video_server_protocol::ContainerAnalyzeStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageResponseGetStatus.status)
}

// -------------------------------------------------------------------

// MessageResponseGetSettings

// required .video_server_protocol.ContainerInitSettings settings = 1;
inline bool MessageResponseGetSettings::has_settings() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageResponseGetSettings::set_has_settings() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageResponseGetSettings::clear_has_settings() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageResponseGetSettings::clear_settings() {
  if (settings_ != NULL) settings_->::video_server_protocol::ContainerInitSettings::Clear();
  clear_has_settings();
}
inline const ::video_server_protocol::ContainerInitSettings& MessageResponseGetSettings::settings() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageResponseGetSettings.settings)
  return settings_ != NULL ? *settings_ : *default_instance_->settings_;
}
inline ::video_server_protocol::ContainerInitSettings* MessageResponseGetSettings::mutable_settings() {
  set_has_settings();
  if (settings_ == NULL) {
    settings_ = new ::video_server_protocol::ContainerInitSettings;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageResponseGetSettings.settings)
  return settings_;
}
inline ::video_server_protocol::ContainerInitSettings* MessageResponseGetSettings::release_settings() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageResponseGetSettings.settings)
  clear_has_settings();
  ::video_server_protocol::ContainerInitSettings* temp = settings_;
  settings_ = NULL;
  return temp;
}
inline void MessageResponseGetSettings::set_allocated_settings(::video_server_protocol::ContainerInitSettings* settings) {
  delete settings_;
  settings_ = settings;
  if (settings) {
    set_has_settings();
  } else {
    clear_has_settings();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageResponseGetSettings.settings)
}

// -------------------------------------------------------------------

// MessageResponseGetLastError

// required string message = 1;
inline bool MessageResponseGetLastError::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageResponseGetLastError::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageResponseGetLastError::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageResponseGetLastError::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& MessageResponseGetLastError::message() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageResponseGetLastError.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageResponseGetLastError::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.MessageResponseGetLastError.message)
}
inline void MessageResponseGetLastError::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.MessageResponseGetLastError.message)
}
inline void MessageResponseGetLastError::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.MessageResponseGetLastError.message)
}
inline ::std::string* MessageResponseGetLastError::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageResponseGetLastError.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageResponseGetLastError::release_message() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageResponseGetLastError.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageResponseGetLastError::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageResponseGetLastError.message)
}

// -------------------------------------------------------------------

// MessageResponseAnalyticEvent

// repeated .video_server_protocol.ContainerAnalyticEvent events = 1;
inline int MessageResponseAnalyticEvent::events_size() const {
  return events_.size();
}
inline void MessageResponseAnalyticEvent::clear_events() {
  events_.Clear();
}
inline const ::video_server_protocol::ContainerAnalyticEvent& MessageResponseAnalyticEvent::events(int index) const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageResponseAnalyticEvent.events)
  return events_.Get(index);
}
inline ::video_server_protocol::ContainerAnalyticEvent* MessageResponseAnalyticEvent::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageResponseAnalyticEvent.events)
  return events_.Mutable(index);
}
inline ::video_server_protocol::ContainerAnalyticEvent* MessageResponseAnalyticEvent::add_events() {
  // @@protoc_insertion_point(field_add:video_server_protocol.MessageResponseAnalyticEvent.events)
  return events_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::video_server_protocol::ContainerAnalyticEvent >*
MessageResponseAnalyticEvent::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:video_server_protocol.MessageResponseAnalyticEvent.events)
  return &events_;
}
inline const ::google::protobuf::RepeatedPtrField< ::video_server_protocol::ContainerAnalyticEvent >&
MessageResponseAnalyticEvent::events() const {
  // @@protoc_insertion_point(field_list:video_server_protocol.MessageResponseAnalyticEvent.events)
  return events_;
}

// -------------------------------------------------------------------

// ProtobufInternalCommunicateAnalyzer

// required .video_server_protocol.EWho sender = 1;
inline bool ProtobufInternalCommunicateAnalyzer::has_sender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtobufInternalCommunicateAnalyzer::set_has_sender() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtobufInternalCommunicateAnalyzer::clear_has_sender() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtobufInternalCommunicateAnalyzer::clear_sender() {
  sender_ = 0;
  clear_has_sender();
}
inline ::video_server_protocol::EWho ProtobufInternalCommunicateAnalyzer::sender() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ProtobufInternalCommunicateAnalyzer.sender)
  return static_cast< ::video_server_protocol::EWho >(sender_);
}
inline void ProtobufInternalCommunicateAnalyzer::set_sender(::video_server_protocol::EWho value) {
  assert(::video_server_protocol::EWho_IsValid(value));
  set_has_sender();
  sender_ = value;
  // @@protoc_insertion_point(field_set:video_server_protocol.ProtobufInternalCommunicateAnalyzer.sender)
}

// optional .video_server_protocol.MessageAnalyzerProxy msg_proxy = 2;
inline bool ProtobufInternalCommunicateAnalyzer::has_msg_proxy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtobufInternalCommunicateAnalyzer::set_has_msg_proxy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtobufInternalCommunicateAnalyzer::clear_has_msg_proxy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtobufInternalCommunicateAnalyzer::clear_msg_proxy() {
  if (msg_proxy_ != NULL) msg_proxy_->::video_server_protocol::MessageAnalyzerProxy::Clear();
  clear_has_msg_proxy();
}
inline const ::video_server_protocol::MessageAnalyzerProxy& ProtobufInternalCommunicateAnalyzer::msg_proxy() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ProtobufInternalCommunicateAnalyzer.msg_proxy)
  return msg_proxy_ != NULL ? *msg_proxy_ : *default_instance_->msg_proxy_;
}
inline ::video_server_protocol::MessageAnalyzerProxy* ProtobufInternalCommunicateAnalyzer::mutable_msg_proxy() {
  set_has_msg_proxy();
  if (msg_proxy_ == NULL) {
    msg_proxy_ = new ::video_server_protocol::MessageAnalyzerProxy;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ProtobufInternalCommunicateAnalyzer.msg_proxy)
  return msg_proxy_;
}
inline ::video_server_protocol::MessageAnalyzerProxy* ProtobufInternalCommunicateAnalyzer::release_msg_proxy() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ProtobufInternalCommunicateAnalyzer.msg_proxy)
  clear_has_msg_proxy();
  ::video_server_protocol::MessageAnalyzerProxy* temp = msg_proxy_;
  msg_proxy_ = NULL;
  return temp;
}
inline void ProtobufInternalCommunicateAnalyzer::set_allocated_msg_proxy(::video_server_protocol::MessageAnalyzerProxy* msg_proxy) {
  delete msg_proxy_;
  msg_proxy_ = msg_proxy;
  if (msg_proxy) {
    set_has_msg_proxy();
  } else {
    clear_has_msg_proxy();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ProtobufInternalCommunicateAnalyzer.msg_proxy)
}

// optional .video_server_protocol.MessageAnalyzerReal msg_real = 3;
inline bool ProtobufInternalCommunicateAnalyzer::has_msg_real() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtobufInternalCommunicateAnalyzer::set_has_msg_real() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtobufInternalCommunicateAnalyzer::clear_has_msg_real() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtobufInternalCommunicateAnalyzer::clear_msg_real() {
  if (msg_real_ != NULL) msg_real_->::video_server_protocol::MessageAnalyzerReal::Clear();
  clear_has_msg_real();
}
inline const ::video_server_protocol::MessageAnalyzerReal& ProtobufInternalCommunicateAnalyzer::msg_real() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ProtobufInternalCommunicateAnalyzer.msg_real)
  return msg_real_ != NULL ? *msg_real_ : *default_instance_->msg_real_;
}
inline ::video_server_protocol::MessageAnalyzerReal* ProtobufInternalCommunicateAnalyzer::mutable_msg_real() {
  set_has_msg_real();
  if (msg_real_ == NULL) {
    msg_real_ = new ::video_server_protocol::MessageAnalyzerReal;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ProtobufInternalCommunicateAnalyzer.msg_real)
  return msg_real_;
}
inline ::video_server_protocol::MessageAnalyzerReal* ProtobufInternalCommunicateAnalyzer::release_msg_real() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ProtobufInternalCommunicateAnalyzer.msg_real)
  clear_has_msg_real();
  ::video_server_protocol::MessageAnalyzerReal* temp = msg_real_;
  msg_real_ = NULL;
  return temp;
}
inline void ProtobufInternalCommunicateAnalyzer::set_allocated_msg_real(::video_server_protocol::MessageAnalyzerReal* msg_real) {
  delete msg_real_;
  msg_real_ = msg_real;
  if (msg_real) {
    set_has_msg_real();
  } else {
    clear_has_msg_real();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ProtobufInternalCommunicateAnalyzer.msg_real)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace video_server_protocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::video_server_protocol::EAnalyzeState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::video_server_protocol::EAnalyzeState>() {
  return ::video_server_protocol::EAnalyzeState_descriptor();
}
template <> struct is_proto_enum< ::video_server_protocol::ESyncCommandType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::video_server_protocol::ESyncCommandType>() {
  return ::video_server_protocol::ESyncCommandType_descriptor();
}
template <> struct is_proto_enum< ::video_server_protocol::EWho> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::video_server_protocol::EWho>() {
  return ::video_server_protocol::EWho_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_internal_5fcommunication_5fanalyzer_2eproto__INCLUDED
