// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal_communication_analyzer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "internal_communication_analyzer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace video_server_protocol {

namespace {

const ::google::protobuf::Descriptor* ContainerDpfObjreprMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerDpfObjreprMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerAnalyticEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerAnalyticEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerAnalyzeStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerAnalyzeStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* FilterPluginParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FilterPluginParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* FilterPluginMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FilterPluginMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerInitSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerInitSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageModuleUniqueId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageModuleUniqueId_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageAnalyzerProxy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageAnalyzerProxy_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageRequestStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageRequestStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageRequestPause_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageRequestPause_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageRequestResume_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageRequestResume_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageRequestStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageRequestStop_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageRequestGetStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageRequestGetStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageRequestGetSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageRequestGetSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageRequestGetLastError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageRequestGetLastError_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageAnalyzerReal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageAnalyzerReal_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageResponseStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageResponseStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageResponsePause_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageResponsePause_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageResponseResume_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageResponseResume_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageResponseStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageResponseStop_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageResponseGetStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageResponseGetStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageResponseGetSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageResponseGetSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageResponseGetLastError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageResponseGetLastError_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageResponseAnalyticEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageResponseAnalyticEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtobufInternalCommunicateAnalyzer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtobufInternalCommunicateAnalyzer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EAnalyzeState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESyncCommandType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EWho_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_internal_5fcommunication_5fanalyzer_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_internal_5fcommunication_5fanalyzer_2eproto() {
  protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "internal_communication_analyzer.proto");
  GOOGLE_CHECK(file != NULL);
  ContainerDpfObjreprMap_descriptor_ = file->message_type(0);
  static const int ContainerDpfObjreprMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerDpfObjreprMap, dpf_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerDpfObjreprMap, objrepr_classinfo_id_),
  };
  ContainerDpfObjreprMap_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ContainerDpfObjreprMap_descriptor_,
      ContainerDpfObjreprMap::default_instance_,
      ContainerDpfObjreprMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerDpfObjreprMap, _has_bits_[0]),
      -1,
      -1,
      sizeof(ContainerDpfObjreprMap),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerDpfObjreprMap, _internal_metadata_),
      -1);
  ContainerAnalyticEvent_descriptor_ = file->message_type(1);
  static const int ContainerAnalyticEvent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerAnalyticEvent, sensor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerAnalyticEvent, event_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerAnalyticEvent, plugin_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerAnalyticEvent, plugin_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerAnalyticEvent, processing_id_),
  };
  ContainerAnalyticEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ContainerAnalyticEvent_descriptor_,
      ContainerAnalyticEvent::default_instance_,
      ContainerAnalyticEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerAnalyticEvent, _has_bits_[0]),
      -1,
      -1,
      sizeof(ContainerAnalyticEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerAnalyticEvent, _internal_metadata_),
      -1);
  ContainerAnalyzeStatus_descriptor_ = file->message_type(2);
  static const int ContainerAnalyzeStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerAnalyzeStatus, sensor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerAnalyzeStatus, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerAnalyzeStatus, processing_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerAnalyzeStatus, processing_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerAnalyzeStatus, profile_id_),
  };
  ContainerAnalyzeStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ContainerAnalyzeStatus_descriptor_,
      ContainerAnalyzeStatus::default_instance_,
      ContainerAnalyzeStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerAnalyzeStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(ContainerAnalyzeStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerAnalyzeStatus, _internal_metadata_),
      -1);
  FilterPluginParam_descriptor_ = file->message_type(3);
  static const int FilterPluginParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterPluginParam, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterPluginParam, val_),
  };
  FilterPluginParam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FilterPluginParam_descriptor_,
      FilterPluginParam::default_instance_,
      FilterPluginParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterPluginParam, _has_bits_[0]),
      -1,
      -1,
      sizeof(FilterPluginParam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterPluginParam, _internal_metadata_),
      -1);
  FilterPluginMetadata_descriptor_ = file->message_type(4);
  static const int FilterPluginMetadata_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterPluginMetadata, plugin_static_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterPluginMetadata, gstreamer_element_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterPluginMetadata, params_),
  };
  FilterPluginMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FilterPluginMetadata_descriptor_,
      FilterPluginMetadata::default_instance_,
      FilterPluginMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterPluginMetadata, _has_bits_[0]),
      -1,
      -1,
      sizeof(FilterPluginMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterPluginMetadata, _internal_metadata_),
      -1);
  ContainerInitSettings_descriptor_ = file->message_type(5);
  static const int ContainerInitSettings_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInitSettings, sensor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInitSettings, profile_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInitSettings, source_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInitSettings, processing_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInitSettings, processing_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInitSettings, dpf_objrepr_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInitSettings, intervideosink_channel_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInitSettings, shm_rtp_stream_caps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInitSettings, shm_rtp_stream_encoding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInitSettings, plugins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInitSettings, videoreceiverrtppayloadsocket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInitSettings, processing_flags_),
  };
  ContainerInitSettings_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ContainerInitSettings_descriptor_,
      ContainerInitSettings::default_instance_,
      ContainerInitSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInitSettings, _has_bits_[0]),
      -1,
      -1,
      sizeof(ContainerInitSettings),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInitSettings, _internal_metadata_),
      -1);
  MessageModuleUniqueId_descriptor_ = file->message_type(6);
  static const int MessageModuleUniqueId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageModuleUniqueId, ip_octets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageModuleUniqueId, pid_),
  };
  MessageModuleUniqueId_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageModuleUniqueId_descriptor_,
      MessageModuleUniqueId::default_instance_,
      MessageModuleUniqueId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageModuleUniqueId, _has_bits_[0]),
      -1,
      -1,
      sizeof(MessageModuleUniqueId),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageModuleUniqueId, _internal_metadata_),
      -1);
  MessageHeader_descriptor_ = file->message_type(7);
  static const int MessageHeader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHeader, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHeader, module_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHeader, last_error_),
  };
  MessageHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageHeader_descriptor_,
      MessageHeader::default_instance_,
      MessageHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHeader, _has_bits_[0]),
      -1,
      -1,
      sizeof(MessageHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHeader, _internal_metadata_),
      -1);
  MessageAnalyzerProxy_descriptor_ = file->message_type(8);
  static const int MessageAnalyzerProxy_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageAnalyzerProxy, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageAnalyzerProxy, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageAnalyzerProxy, msg_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageAnalyzerProxy, msg_pause_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageAnalyzerProxy, msg_resume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageAnalyzerProxy, msg_stop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageAnalyzerProxy, msg_get_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageAnalyzerProxy, msg_get_settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageAnalyzerProxy, msg_get_last_error_),
  };
  MessageAnalyzerProxy_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageAnalyzerProxy_descriptor_,
      MessageAnalyzerProxy::default_instance_,
      MessageAnalyzerProxy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageAnalyzerProxy, _has_bits_[0]),
      -1,
      -1,
      sizeof(MessageAnalyzerProxy),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageAnalyzerProxy, _internal_metadata_),
      -1);
  MessageRequestStart_descriptor_ = file->message_type(9);
  static const int MessageRequestStart_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRequestStart, settings_),
  };
  MessageRequestStart_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageRequestStart_descriptor_,
      MessageRequestStart::default_instance_,
      MessageRequestStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRequestStart, _has_bits_[0]),
      -1,
      -1,
      sizeof(MessageRequestStart),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRequestStart, _internal_metadata_),
      -1);
  MessageRequestPause_descriptor_ = file->message_type(10);
  static const int MessageRequestPause_offsets_[1] = {
  };
  MessageRequestPause_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageRequestPause_descriptor_,
      MessageRequestPause::default_instance_,
      MessageRequestPause_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRequestPause, _has_bits_[0]),
      -1,
      -1,
      sizeof(MessageRequestPause),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRequestPause, _internal_metadata_),
      -1);
  MessageRequestResume_descriptor_ = file->message_type(11);
  static const int MessageRequestResume_offsets_[1] = {
  };
  MessageRequestResume_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageRequestResume_descriptor_,
      MessageRequestResume::default_instance_,
      MessageRequestResume_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRequestResume, _has_bits_[0]),
      -1,
      -1,
      sizeof(MessageRequestResume),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRequestResume, _internal_metadata_),
      -1);
  MessageRequestStop_descriptor_ = file->message_type(12);
  static const int MessageRequestStop_offsets_[1] = {
  };
  MessageRequestStop_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageRequestStop_descriptor_,
      MessageRequestStop::default_instance_,
      MessageRequestStop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRequestStop, _has_bits_[0]),
      -1,
      -1,
      sizeof(MessageRequestStop),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRequestStop, _internal_metadata_),
      -1);
  MessageRequestGetStatus_descriptor_ = file->message_type(13);
  static const int MessageRequestGetStatus_offsets_[1] = {
  };
  MessageRequestGetStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageRequestGetStatus_descriptor_,
      MessageRequestGetStatus::default_instance_,
      MessageRequestGetStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRequestGetStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(MessageRequestGetStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRequestGetStatus, _internal_metadata_),
      -1);
  MessageRequestGetSettings_descriptor_ = file->message_type(14);
  static const int MessageRequestGetSettings_offsets_[1] = {
  };
  MessageRequestGetSettings_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageRequestGetSettings_descriptor_,
      MessageRequestGetSettings::default_instance_,
      MessageRequestGetSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRequestGetSettings, _has_bits_[0]),
      -1,
      -1,
      sizeof(MessageRequestGetSettings),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRequestGetSettings, _internal_metadata_),
      -1);
  MessageRequestGetLastError_descriptor_ = file->message_type(15);
  static const int MessageRequestGetLastError_offsets_[1] = {
  };
  MessageRequestGetLastError_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageRequestGetLastError_descriptor_,
      MessageRequestGetLastError::default_instance_,
      MessageRequestGetLastError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRequestGetLastError, _has_bits_[0]),
      -1,
      -1,
      sizeof(MessageRequestGetLastError),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRequestGetLastError, _internal_metadata_),
      -1);
  MessageAnalyzerReal_descriptor_ = file->message_type(16);
  static const int MessageAnalyzerReal_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageAnalyzerReal, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageAnalyzerReal, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageAnalyzerReal, msg_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageAnalyzerReal, msg_pause_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageAnalyzerReal, msg_resume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageAnalyzerReal, msg_stop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageAnalyzerReal, msg_get_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageAnalyzerReal, msg_get_settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageAnalyzerReal, msg_get_last_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageAnalyzerReal, msg_get_accum_events_),
  };
  MessageAnalyzerReal_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageAnalyzerReal_descriptor_,
      MessageAnalyzerReal::default_instance_,
      MessageAnalyzerReal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageAnalyzerReal, _has_bits_[0]),
      -1,
      -1,
      sizeof(MessageAnalyzerReal),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageAnalyzerReal, _internal_metadata_),
      -1);
  MessageResponseStart_descriptor_ = file->message_type(17);
  static const int MessageResponseStart_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageResponseStart, success_),
  };
  MessageResponseStart_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageResponseStart_descriptor_,
      MessageResponseStart::default_instance_,
      MessageResponseStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageResponseStart, _has_bits_[0]),
      -1,
      -1,
      sizeof(MessageResponseStart),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageResponseStart, _internal_metadata_),
      -1);
  MessageResponsePause_descriptor_ = file->message_type(18);
  static const int MessageResponsePause_offsets_[1] = {
  };
  MessageResponsePause_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageResponsePause_descriptor_,
      MessageResponsePause::default_instance_,
      MessageResponsePause_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageResponsePause, _has_bits_[0]),
      -1,
      -1,
      sizeof(MessageResponsePause),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageResponsePause, _internal_metadata_),
      -1);
  MessageResponseResume_descriptor_ = file->message_type(19);
  static const int MessageResponseResume_offsets_[1] = {
  };
  MessageResponseResume_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageResponseResume_descriptor_,
      MessageResponseResume::default_instance_,
      MessageResponseResume_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageResponseResume, _has_bits_[0]),
      -1,
      -1,
      sizeof(MessageResponseResume),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageResponseResume, _internal_metadata_),
      -1);
  MessageResponseStop_descriptor_ = file->message_type(20);
  static const int MessageResponseStop_offsets_[1] = {
  };
  MessageResponseStop_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageResponseStop_descriptor_,
      MessageResponseStop::default_instance_,
      MessageResponseStop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageResponseStop, _has_bits_[0]),
      -1,
      -1,
      sizeof(MessageResponseStop),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageResponseStop, _internal_metadata_),
      -1);
  MessageResponseGetStatus_descriptor_ = file->message_type(21);
  static const int MessageResponseGetStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageResponseGetStatus, status_),
  };
  MessageResponseGetStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageResponseGetStatus_descriptor_,
      MessageResponseGetStatus::default_instance_,
      MessageResponseGetStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageResponseGetStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(MessageResponseGetStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageResponseGetStatus, _internal_metadata_),
      -1);
  MessageResponseGetSettings_descriptor_ = file->message_type(22);
  static const int MessageResponseGetSettings_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageResponseGetSettings, settings_),
  };
  MessageResponseGetSettings_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageResponseGetSettings_descriptor_,
      MessageResponseGetSettings::default_instance_,
      MessageResponseGetSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageResponseGetSettings, _has_bits_[0]),
      -1,
      -1,
      sizeof(MessageResponseGetSettings),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageResponseGetSettings, _internal_metadata_),
      -1);
  MessageResponseGetLastError_descriptor_ = file->message_type(23);
  static const int MessageResponseGetLastError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageResponseGetLastError, message_),
  };
  MessageResponseGetLastError_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageResponseGetLastError_descriptor_,
      MessageResponseGetLastError::default_instance_,
      MessageResponseGetLastError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageResponseGetLastError, _has_bits_[0]),
      -1,
      -1,
      sizeof(MessageResponseGetLastError),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageResponseGetLastError, _internal_metadata_),
      -1);
  MessageResponseAnalyticEvent_descriptor_ = file->message_type(24);
  static const int MessageResponseAnalyticEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageResponseAnalyticEvent, events_),
  };
  MessageResponseAnalyticEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageResponseAnalyticEvent_descriptor_,
      MessageResponseAnalyticEvent::default_instance_,
      MessageResponseAnalyticEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageResponseAnalyticEvent, _has_bits_[0]),
      -1,
      -1,
      sizeof(MessageResponseAnalyticEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageResponseAnalyticEvent, _internal_metadata_),
      -1);
  ProtobufInternalCommunicateAnalyzer_descriptor_ = file->message_type(25);
  static const int ProtobufInternalCommunicateAnalyzer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInternalCommunicateAnalyzer, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInternalCommunicateAnalyzer, msg_proxy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInternalCommunicateAnalyzer, msg_real_),
  };
  ProtobufInternalCommunicateAnalyzer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProtobufInternalCommunicateAnalyzer_descriptor_,
      ProtobufInternalCommunicateAnalyzer::default_instance_,
      ProtobufInternalCommunicateAnalyzer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInternalCommunicateAnalyzer, _has_bits_[0]),
      -1,
      -1,
      sizeof(ProtobufInternalCommunicateAnalyzer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtobufInternalCommunicateAnalyzer, _internal_metadata_),
      -1);
  EAnalyzeState_descriptor_ = file->enum_type(0);
  ESyncCommandType_descriptor_ = file->enum_type(1);
  EWho_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_internal_5fcommunication_5fanalyzer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ContainerDpfObjreprMap_descriptor_, &ContainerDpfObjreprMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ContainerAnalyticEvent_descriptor_, &ContainerAnalyticEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ContainerAnalyzeStatus_descriptor_, &ContainerAnalyzeStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FilterPluginParam_descriptor_, &FilterPluginParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FilterPluginMetadata_descriptor_, &FilterPluginMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ContainerInitSettings_descriptor_, &ContainerInitSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageModuleUniqueId_descriptor_, &MessageModuleUniqueId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageHeader_descriptor_, &MessageHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageAnalyzerProxy_descriptor_, &MessageAnalyzerProxy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageRequestStart_descriptor_, &MessageRequestStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageRequestPause_descriptor_, &MessageRequestPause::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageRequestResume_descriptor_, &MessageRequestResume::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageRequestStop_descriptor_, &MessageRequestStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageRequestGetStatus_descriptor_, &MessageRequestGetStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageRequestGetSettings_descriptor_, &MessageRequestGetSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageRequestGetLastError_descriptor_, &MessageRequestGetLastError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageAnalyzerReal_descriptor_, &MessageAnalyzerReal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageResponseStart_descriptor_, &MessageResponseStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageResponsePause_descriptor_, &MessageResponsePause::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageResponseResume_descriptor_, &MessageResponseResume::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageResponseStop_descriptor_, &MessageResponseStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageResponseGetStatus_descriptor_, &MessageResponseGetStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageResponseGetSettings_descriptor_, &MessageResponseGetSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageResponseGetLastError_descriptor_, &MessageResponseGetLastError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageResponseAnalyticEvent_descriptor_, &MessageResponseAnalyticEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProtobufInternalCommunicateAnalyzer_descriptor_, &ProtobufInternalCommunicateAnalyzer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_internal_5fcommunication_5fanalyzer_2eproto() {
  delete ContainerDpfObjreprMap::default_instance_;
  delete ContainerDpfObjreprMap_reflection_;
  delete ContainerAnalyticEvent::default_instance_;
  delete ContainerAnalyticEvent_reflection_;
  delete ContainerAnalyzeStatus::default_instance_;
  delete ContainerAnalyzeStatus_reflection_;
  delete FilterPluginParam::default_instance_;
  delete FilterPluginParam_reflection_;
  delete FilterPluginMetadata::default_instance_;
  delete FilterPluginMetadata_reflection_;
  delete ContainerInitSettings::default_instance_;
  delete ContainerInitSettings_reflection_;
  delete MessageModuleUniqueId::default_instance_;
  delete MessageModuleUniqueId_reflection_;
  delete MessageHeader::default_instance_;
  delete MessageHeader_reflection_;
  delete MessageAnalyzerProxy::default_instance_;
  delete MessageAnalyzerProxy_reflection_;
  delete MessageRequestStart::default_instance_;
  delete MessageRequestStart_reflection_;
  delete MessageRequestPause::default_instance_;
  delete MessageRequestPause_reflection_;
  delete MessageRequestResume::default_instance_;
  delete MessageRequestResume_reflection_;
  delete MessageRequestStop::default_instance_;
  delete MessageRequestStop_reflection_;
  delete MessageRequestGetStatus::default_instance_;
  delete MessageRequestGetStatus_reflection_;
  delete MessageRequestGetSettings::default_instance_;
  delete MessageRequestGetSettings_reflection_;
  delete MessageRequestGetLastError::default_instance_;
  delete MessageRequestGetLastError_reflection_;
  delete MessageAnalyzerReal::default_instance_;
  delete MessageAnalyzerReal_reflection_;
  delete MessageResponseStart::default_instance_;
  delete MessageResponseStart_reflection_;
  delete MessageResponsePause::default_instance_;
  delete MessageResponsePause_reflection_;
  delete MessageResponseResume::default_instance_;
  delete MessageResponseResume_reflection_;
  delete MessageResponseStop::default_instance_;
  delete MessageResponseStop_reflection_;
  delete MessageResponseGetStatus::default_instance_;
  delete MessageResponseGetStatus_reflection_;
  delete MessageResponseGetSettings::default_instance_;
  delete MessageResponseGetSettings_reflection_;
  delete MessageResponseGetLastError::default_instance_;
  delete MessageResponseGetLastError_reflection_;
  delete MessageResponseAnalyticEvent::default_instance_;
  delete MessageResponseAnalyticEvent_reflection_;
  delete ProtobufInternalCommunicateAnalyzer::default_instance_;
  delete ProtobufInternalCommunicateAnalyzer_reflection_;
}

void protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n%internal_communication_analyzer.proto\022"
    "\025video_server_protocol\"I\n\026ContainerDpfOb"
    "jreprMap\022\021\n\tdpf_label\030\001 \002(\t\022\034\n\024objrepr_c"
    "lassinfo_id\030\002 \002(\004\"\203\001\n\026ContainerAnalyticE"
    "vent\022\021\n\tsensor_id\030\001 \002(\004\022\025\n\revent_message"
    "\030\002 \002(\t\022\023\n\013plugin_name\030\003 \002(\t\022\023\n\013plugin_ty"
    "pe\030\004 \002(\t\022\025\n\rprocessing_id\030\005 \002(\t\"\244\001\n\026Cont"
    "ainerAnalyzeStatus\022\021\n\tsensor_id\030\001 \002(\004\0223\n"
    "\005state\030\002 \002(\0162$.video_server_protocol.EAn"
    "alyzeState\022\025\n\rprocessing_id\030\003 \002(\t\022\027\n\017pro"
    "cessing_name\030\004 \002(\t\022\022\n\nprofile_id\030\005 \002(\004\"-"
    "\n\021FilterPluginParam\022\013\n\003key\030\001 \002(\t\022\013\n\003val\030"
    "\002 \002(\t\"\214\001\n\024FilterPluginMetadata\022\032\n\022plugin"
    "_static_name\030\001 \002(\t\022\036\n\026gstreamer_element_"
    "name\030\002 \002(\t\0228\n\006params\030\003 \003(\0132(.video_serve"
    "r_protocol.FilterPluginParam\"\254\003\n\025Contain"
    "erInitSettings\022\021\n\tsensor_id\030\001 \002(\004\022\022\n\npro"
    "file_id\030\002 \002(\004\022\022\n\nsource_url\030\003 \002(\t\022\025\n\rpro"
    "cessing_id\030\004 \002(\t\022\027\n\017processing_name\030\005 \002("
    "\t\022F\n\017dpf_objrepr_map\030\006 \003(\0132-.video_serve"
    "r_protocol.ContainerDpfObjreprMap\022#\n\033int"
    "ervideosink_channel_name\030\007 \002(\t\022\033\n\023shm_rt"
    "p_stream_caps\030\010 \002(\t\022\037\n\027shm_rtp_stream_en"
    "coding\030\t \002(\t\022<\n\007plugins\030\n \003(\0132+.video_se"
    "rver_protocol.FilterPluginMetadata\022%\n\035Vi"
    "deoReceiverRtpPayloadSocket\030\013 \002(\t\022\030\n\020pro"
    "cessing_flags\030\014 \002(\005\"7\n\025MessageModuleUniq"
    "ueId\022\021\n\tip_octets\030\001 \002(\005\022\013\n\003pid\030\002 \002(\005\"r\n\r"
    "MessageHeader\0228\n\002id\030\001 \002(\0132,.video_server"
    "_protocol.MessageModuleUniqueId\022\023\n\013modul"
    "e_name\030\002 \002(\t\022\022\n\nlast_error\030\003 \001(\t\"\346\004\n\024Mes"
    "sageAnalyzerProxy\0224\n\006header\030\001 \002(\0132$.vide"
    "o_server_protocol.MessageHeader\0229\n\010msg_t"
    "ype\030\002 \002(\0162\'.video_server_protocol.ESyncC"
    "ommandType\022=\n\tmsg_start\030\003 \001(\0132*.video_se"
    "rver_protocol.MessageRequestStart\022=\n\tmsg"
    "_pause\030\004 \001(\0132*.video_server_protocol.Mes"
    "sageRequestPause\022\?\n\nmsg_resume\030\005 \001(\0132+.v"
    "ideo_server_protocol.MessageRequestResum"
    "e\022;\n\010msg_stop\030\006 \001(\0132).video_server_proto"
    "col.MessageRequestStop\022F\n\016msg_get_status"
    "\030\007 \001(\0132..video_server_protocol.MessageRe"
    "questGetStatus\022J\n\020msg_get_settings\030\010 \001(\013"
    "20.video_server_protocol.MessageRequestG"
    "etSettings\022M\n\022msg_get_last_error\030\t \001(\01321"
    ".video_server_protocol.MessageRequestGet"
    "LastError\"U\n\023MessageRequestStart\022>\n\010sett"
    "ings\030\001 \002(\0132,.video_server_protocol.Conta"
    "inerInitSettings\"\025\n\023MessageRequestPause\""
    "\026\n\024MessageRequestResume\"\024\n\022MessageReques"
    "tStop\"\031\n\027MessageRequestGetStatus\"\033\n\031Mess"
    "ageRequestGetSettings\"\034\n\032MessageRequestG"
    "etLastError\"\277\005\n\023MessageAnalyzerReal\0224\n\006h"
    "eader\030\001 \002(\0132$.video_server_protocol.Mess"
    "ageHeader\0229\n\010msg_type\030\002 \002(\0162\'.video_serv"
    "er_protocol.ESyncCommandType\022>\n\tmsg_star"
    "t\030\004 \001(\0132+.video_server_protocol.MessageR"
    "esponseStart\022>\n\tmsg_pause\030\005 \001(\0132+.video_"
    "server_protocol.MessageResponsePause\022@\n\n"
    "msg_resume\030\006 \001(\0132,.video_server_protocol"
    ".MessageResponseResume\022<\n\010msg_stop\030\007 \001(\013"
    "2*.video_server_protocol.MessageResponse"
    "Stop\022G\n\016msg_get_status\030\010 \001(\0132/.video_ser"
    "ver_protocol.MessageResponseGetStatus\022K\n"
    "\020msg_get_settings\030\t \001(\01321.video_server_p"
    "rotocol.MessageResponseGetSettings\022N\n\022ms"
    "g_get_last_error\030\n \001(\01322.video_server_pr"
    "otocol.MessageResponseGetLastError\022Q\n\024ms"
    "g_get_accum_events\030\013 \001(\01323.video_server_"
    "protocol.MessageResponseAnalyticEvent\"\'\n"
    "\024MessageResponseStart\022\017\n\007success\030\001 \002(\010\"\026"
    "\n\024MessageResponsePause\"\027\n\025MessageRespons"
    "eResume\"\025\n\023MessageResponseStop\"Y\n\030Messag"
    "eResponseGetStatus\022=\n\006status\030\001 \002(\0132-.vid"
    "eo_server_protocol.ContainerAnalyzeStatu"
    "s\"\\\n\032MessageResponseGetSettings\022>\n\010setti"
    "ngs\030\001 \002(\0132,.video_server_protocol.Contai"
    "nerInitSettings\".\n\033MessageResponseGetLas"
    "tError\022\017\n\007message\030\001 \002(\t\"]\n\034MessageRespon"
    "seAnalyticEvent\022=\n\006events\030\001 \003(\0132-.video_"
    "server_protocol.ContainerAnalyticEvent\"\320"
    "\001\n#ProtobufInternalCommunicateAnalyzer\022+"
    "\n\006sender\030\001 \002(\0162\033.video_server_protocol.E"
    "Who\022>\n\tmsg_proxy\030\002 \001(\0132+.video_server_pr"
    "otocol.MessageAnalyzerProxy\022<\n\010msg_real\030"
    "\003 \001(\0132*.video_server_protocol.MessageAna"
    "lyzerReal*t\n\rEAnalyzeState\022\022\n\016AS_UNAVAIL"
    "ABLE\020\000\022\020\n\014AS_PREPARING\020\001\022\014\n\010AS_READY\020\002\022\r"
    "\n\tAS_ACTIVE\020\003\022\016\n\nAS_CRUSHED\020\004\022\020\n\014AS_UNDE"
    "FINED\020\005*\303\001\n\020ESyncCommandType\022\r\n\tSCT_STAR"
    "T\020\000\022\r\n\tSCT_PAUSE\020\001\022\016\n\nSCT_RESUME\020\002\022\014\n\010SC"
    "T_STOP\020\003\022\036\n\032SCT_GET_ACCUMULATED_EVENTS\020\004"
    "\022\022\n\016SCT_GET_STATUS\020\005\022\024\n\020SCT_GET_SETTINGS"
    "\020\006\022\026\n\022SCT_GET_LAST_ERROR\020\007\022\021\n\rSCT_UNDEFI"
    "NED\020\010*B\n\004EWho\022\024\n\020W_ANALYZER_PROXY\020\000\022\023\n\017W"
    "_ANALYZER_REAL\020\001\022\017\n\013W_UNDEFINED\020\002", 3833);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "internal_communication_analyzer.proto", &protobuf_RegisterTypes);
  ContainerDpfObjreprMap::default_instance_ = new ContainerDpfObjreprMap();
  ContainerAnalyticEvent::default_instance_ = new ContainerAnalyticEvent();
  ContainerAnalyzeStatus::default_instance_ = new ContainerAnalyzeStatus();
  FilterPluginParam::default_instance_ = new FilterPluginParam();
  FilterPluginMetadata::default_instance_ = new FilterPluginMetadata();
  ContainerInitSettings::default_instance_ = new ContainerInitSettings();
  MessageModuleUniqueId::default_instance_ = new MessageModuleUniqueId();
  MessageHeader::default_instance_ = new MessageHeader();
  MessageAnalyzerProxy::default_instance_ = new MessageAnalyzerProxy();
  MessageRequestStart::default_instance_ = new MessageRequestStart();
  MessageRequestPause::default_instance_ = new MessageRequestPause();
  MessageRequestResume::default_instance_ = new MessageRequestResume();
  MessageRequestStop::default_instance_ = new MessageRequestStop();
  MessageRequestGetStatus::default_instance_ = new MessageRequestGetStatus();
  MessageRequestGetSettings::default_instance_ = new MessageRequestGetSettings();
  MessageRequestGetLastError::default_instance_ = new MessageRequestGetLastError();
  MessageAnalyzerReal::default_instance_ = new MessageAnalyzerReal();
  MessageResponseStart::default_instance_ = new MessageResponseStart();
  MessageResponsePause::default_instance_ = new MessageResponsePause();
  MessageResponseResume::default_instance_ = new MessageResponseResume();
  MessageResponseStop::default_instance_ = new MessageResponseStop();
  MessageResponseGetStatus::default_instance_ = new MessageResponseGetStatus();
  MessageResponseGetSettings::default_instance_ = new MessageResponseGetSettings();
  MessageResponseGetLastError::default_instance_ = new MessageResponseGetLastError();
  MessageResponseAnalyticEvent::default_instance_ = new MessageResponseAnalyticEvent();
  ProtobufInternalCommunicateAnalyzer::default_instance_ = new ProtobufInternalCommunicateAnalyzer();
  ContainerDpfObjreprMap::default_instance_->InitAsDefaultInstance();
  ContainerAnalyticEvent::default_instance_->InitAsDefaultInstance();
  ContainerAnalyzeStatus::default_instance_->InitAsDefaultInstance();
  FilterPluginParam::default_instance_->InitAsDefaultInstance();
  FilterPluginMetadata::default_instance_->InitAsDefaultInstance();
  ContainerInitSettings::default_instance_->InitAsDefaultInstance();
  MessageModuleUniqueId::default_instance_->InitAsDefaultInstance();
  MessageHeader::default_instance_->InitAsDefaultInstance();
  MessageAnalyzerProxy::default_instance_->InitAsDefaultInstance();
  MessageRequestStart::default_instance_->InitAsDefaultInstance();
  MessageRequestPause::default_instance_->InitAsDefaultInstance();
  MessageRequestResume::default_instance_->InitAsDefaultInstance();
  MessageRequestStop::default_instance_->InitAsDefaultInstance();
  MessageRequestGetStatus::default_instance_->InitAsDefaultInstance();
  MessageRequestGetSettings::default_instance_->InitAsDefaultInstance();
  MessageRequestGetLastError::default_instance_->InitAsDefaultInstance();
  MessageAnalyzerReal::default_instance_->InitAsDefaultInstance();
  MessageResponseStart::default_instance_->InitAsDefaultInstance();
  MessageResponsePause::default_instance_->InitAsDefaultInstance();
  MessageResponseResume::default_instance_->InitAsDefaultInstance();
  MessageResponseStop::default_instance_->InitAsDefaultInstance();
  MessageResponseGetStatus::default_instance_->InitAsDefaultInstance();
  MessageResponseGetSettings::default_instance_->InitAsDefaultInstance();
  MessageResponseGetLastError::default_instance_->InitAsDefaultInstance();
  MessageResponseAnalyticEvent::default_instance_->InitAsDefaultInstance();
  ProtobufInternalCommunicateAnalyzer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_internal_5fcommunication_5fanalyzer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_internal_5fcommunication_5fanalyzer_2eproto {
  StaticDescriptorInitializer_internal_5fcommunication_5fanalyzer_2eproto() {
    protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  }
} static_descriptor_initializer_internal_5fcommunication_5fanalyzer_2eproto_;
const ::google::protobuf::EnumDescriptor* EAnalyzeState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAnalyzeState_descriptor_;
}
bool EAnalyzeState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESyncCommandType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESyncCommandType_descriptor_;
}
bool ESyncCommandType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EWho_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWho_descriptor_;
}
bool EWho_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContainerDpfObjreprMap::kDpfLabelFieldNumber;
const int ContainerDpfObjreprMap::kObjreprClassinfoIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContainerDpfObjreprMap::ContainerDpfObjreprMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_server_protocol.ContainerDpfObjreprMap)
}

void ContainerDpfObjreprMap::InitAsDefaultInstance() {
}

ContainerDpfObjreprMap::ContainerDpfObjreprMap(const ContainerDpfObjreprMap& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_server_protocol.ContainerDpfObjreprMap)
}

void ContainerDpfObjreprMap::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dpf_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objrepr_classinfo_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerDpfObjreprMap::~ContainerDpfObjreprMap() {
  // @@protoc_insertion_point(destructor:video_server_protocol.ContainerDpfObjreprMap)
  SharedDtor();
}

void ContainerDpfObjreprMap::SharedDtor() {
  dpf_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ContainerDpfObjreprMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerDpfObjreprMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerDpfObjreprMap_descriptor_;
}

const ContainerDpfObjreprMap& ContainerDpfObjreprMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  return *default_instance_;
}

ContainerDpfObjreprMap* ContainerDpfObjreprMap::default_instance_ = NULL;

ContainerDpfObjreprMap* ContainerDpfObjreprMap::New(::google::protobuf::Arena* arena) const {
  ContainerDpfObjreprMap* n = new ContainerDpfObjreprMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContainerDpfObjreprMap::Clear() {
// @@protoc_insertion_point(message_clear_start:video_server_protocol.ContainerDpfObjreprMap)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_dpf_label()) {
      dpf_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    objrepr_classinfo_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ContainerDpfObjreprMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_server_protocol.ContainerDpfObjreprMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dpf_label = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dpf_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dpf_label().data(), this->dpf_label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "video_server_protocol.ContainerDpfObjreprMap.dpf_label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_objrepr_classinfo_id;
        break;
      }

      // required uint64 objrepr_classinfo_id = 2;
      case 2: {
        if (tag == 16) {
         parse_objrepr_classinfo_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &objrepr_classinfo_id_)));
          set_has_objrepr_classinfo_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:video_server_protocol.ContainerDpfObjreprMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_server_protocol.ContainerDpfObjreprMap)
  return false;
#undef DO_
}

void ContainerDpfObjreprMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_server_protocol.ContainerDpfObjreprMap)
  // required string dpf_label = 1;
  if (has_dpf_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dpf_label().data(), this->dpf_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.ContainerDpfObjreprMap.dpf_label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dpf_label(), output);
  }

  // required uint64 objrepr_classinfo_id = 2;
  if (has_objrepr_classinfo_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->objrepr_classinfo_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_server_protocol.ContainerDpfObjreprMap)
}

::google::protobuf::uint8* ContainerDpfObjreprMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_server_protocol.ContainerDpfObjreprMap)
  // required string dpf_label = 1;
  if (has_dpf_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dpf_label().data(), this->dpf_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.ContainerDpfObjreprMap.dpf_label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dpf_label(), target);
  }

  // required uint64 objrepr_classinfo_id = 2;
  if (has_objrepr_classinfo_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->objrepr_classinfo_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_server_protocol.ContainerDpfObjreprMap)
  return target;
}

int ContainerDpfObjreprMap::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:video_server_protocol.ContainerDpfObjreprMap)
  int total_size = 0;

  if (has_dpf_label()) {
    // required string dpf_label = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dpf_label());
  }

  if (has_objrepr_classinfo_id()) {
    // required uint64 objrepr_classinfo_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->objrepr_classinfo_id());
  }

  return total_size;
}
int ContainerDpfObjreprMap::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:video_server_protocol.ContainerDpfObjreprMap)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string dpf_label = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dpf_label());

    // required uint64 objrepr_classinfo_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->objrepr_classinfo_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerDpfObjreprMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:video_server_protocol.ContainerDpfObjreprMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ContainerDpfObjreprMap* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ContainerDpfObjreprMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:video_server_protocol.ContainerDpfObjreprMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:video_server_protocol.ContainerDpfObjreprMap)
    MergeFrom(*source);
  }
}

void ContainerDpfObjreprMap::MergeFrom(const ContainerDpfObjreprMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video_server_protocol.ContainerDpfObjreprMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dpf_label()) {
      set_has_dpf_label();
      dpf_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dpf_label_);
    }
    if (from.has_objrepr_classinfo_id()) {
      set_objrepr_classinfo_id(from.objrepr_classinfo_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ContainerDpfObjreprMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:video_server_protocol.ContainerDpfObjreprMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerDpfObjreprMap::CopyFrom(const ContainerDpfObjreprMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video_server_protocol.ContainerDpfObjreprMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerDpfObjreprMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ContainerDpfObjreprMap::Swap(ContainerDpfObjreprMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContainerDpfObjreprMap::InternalSwap(ContainerDpfObjreprMap* other) {
  dpf_label_.Swap(&other->dpf_label_);
  std::swap(objrepr_classinfo_id_, other->objrepr_classinfo_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContainerDpfObjreprMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerDpfObjreprMap_descriptor_;
  metadata.reflection = ContainerDpfObjreprMap_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContainerDpfObjreprMap

// required string dpf_label = 1;
bool ContainerDpfObjreprMap::has_dpf_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ContainerDpfObjreprMap::set_has_dpf_label() {
  _has_bits_[0] |= 0x00000001u;
}
void ContainerDpfObjreprMap::clear_has_dpf_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void ContainerDpfObjreprMap::clear_dpf_label() {
  dpf_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dpf_label();
}
 const ::std::string& ContainerDpfObjreprMap::dpf_label() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerDpfObjreprMap.dpf_label)
  return dpf_label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContainerDpfObjreprMap::set_dpf_label(const ::std::string& value) {
  set_has_dpf_label();
  dpf_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerDpfObjreprMap.dpf_label)
}
 void ContainerDpfObjreprMap::set_dpf_label(const char* value) {
  set_has_dpf_label();
  dpf_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.ContainerDpfObjreprMap.dpf_label)
}
 void ContainerDpfObjreprMap::set_dpf_label(const char* value, size_t size) {
  set_has_dpf_label();
  dpf_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.ContainerDpfObjreprMap.dpf_label)
}
 ::std::string* ContainerDpfObjreprMap::mutable_dpf_label() {
  set_has_dpf_label();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerDpfObjreprMap.dpf_label)
  return dpf_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ContainerDpfObjreprMap::release_dpf_label() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ContainerDpfObjreprMap.dpf_label)
  clear_has_dpf_label();
  return dpf_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContainerDpfObjreprMap::set_allocated_dpf_label(::std::string* dpf_label) {
  if (dpf_label != NULL) {
    set_has_dpf_label();
  } else {
    clear_has_dpf_label();
  }
  dpf_label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dpf_label);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ContainerDpfObjreprMap.dpf_label)
}

// required uint64 objrepr_classinfo_id = 2;
bool ContainerDpfObjreprMap::has_objrepr_classinfo_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ContainerDpfObjreprMap::set_has_objrepr_classinfo_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ContainerDpfObjreprMap::clear_has_objrepr_classinfo_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ContainerDpfObjreprMap::clear_objrepr_classinfo_id() {
  objrepr_classinfo_id_ = GOOGLE_ULONGLONG(0);
  clear_has_objrepr_classinfo_id();
}
 ::google::protobuf::uint64 ContainerDpfObjreprMap::objrepr_classinfo_id() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerDpfObjreprMap.objrepr_classinfo_id)
  return objrepr_classinfo_id_;
}
 void ContainerDpfObjreprMap::set_objrepr_classinfo_id(::google::protobuf::uint64 value) {
  set_has_objrepr_classinfo_id();
  objrepr_classinfo_id_ = value;
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerDpfObjreprMap.objrepr_classinfo_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContainerAnalyticEvent::kSensorIdFieldNumber;
const int ContainerAnalyticEvent::kEventMessageFieldNumber;
const int ContainerAnalyticEvent::kPluginNameFieldNumber;
const int ContainerAnalyticEvent::kPluginTypeFieldNumber;
const int ContainerAnalyticEvent::kProcessingIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContainerAnalyticEvent::ContainerAnalyticEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_server_protocol.ContainerAnalyticEvent)
}

void ContainerAnalyticEvent::InitAsDefaultInstance() {
}

ContainerAnalyticEvent::ContainerAnalyticEvent(const ContainerAnalyticEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_server_protocol.ContainerAnalyticEvent)
}

void ContainerAnalyticEvent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sensor_id_ = GOOGLE_ULONGLONG(0);
  event_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plugin_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plugin_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processing_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerAnalyticEvent::~ContainerAnalyticEvent() {
  // @@protoc_insertion_point(destructor:video_server_protocol.ContainerAnalyticEvent)
  SharedDtor();
}

void ContainerAnalyticEvent::SharedDtor() {
  event_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plugin_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plugin_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processing_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ContainerAnalyticEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerAnalyticEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerAnalyticEvent_descriptor_;
}

const ContainerAnalyticEvent& ContainerAnalyticEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  return *default_instance_;
}

ContainerAnalyticEvent* ContainerAnalyticEvent::default_instance_ = NULL;

ContainerAnalyticEvent* ContainerAnalyticEvent::New(::google::protobuf::Arena* arena) const {
  ContainerAnalyticEvent* n = new ContainerAnalyticEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContainerAnalyticEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:video_server_protocol.ContainerAnalyticEvent)
  if (_has_bits_[0 / 32] & 31u) {
    sensor_id_ = GOOGLE_ULONGLONG(0);
    if (has_event_message()) {
      event_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_plugin_name()) {
      plugin_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_plugin_type()) {
      plugin_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_processing_id()) {
      processing_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ContainerAnalyticEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_server_protocol.ContainerAnalyticEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 sensor_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sensor_id_)));
          set_has_sensor_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_event_message;
        break;
      }

      // required string event_message = 2;
      case 2: {
        if (tag == 18) {
         parse_event_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_message().data(), this->event_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "video_server_protocol.ContainerAnalyticEvent.event_message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_plugin_name;
        break;
      }

      // required string plugin_name = 3;
      case 3: {
        if (tag == 26) {
         parse_plugin_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plugin_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->plugin_name().data(), this->plugin_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "video_server_protocol.ContainerAnalyticEvent.plugin_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_plugin_type;
        break;
      }

      // required string plugin_type = 4;
      case 4: {
        if (tag == 34) {
         parse_plugin_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plugin_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->plugin_type().data(), this->plugin_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "video_server_protocol.ContainerAnalyticEvent.plugin_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_processing_id;
        break;
      }

      // required string processing_id = 5;
      case 5: {
        if (tag == 42) {
         parse_processing_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processing_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->processing_id().data(), this->processing_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "video_server_protocol.ContainerAnalyticEvent.processing_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:video_server_protocol.ContainerAnalyticEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_server_protocol.ContainerAnalyticEvent)
  return false;
#undef DO_
}

void ContainerAnalyticEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_server_protocol.ContainerAnalyticEvent)
  // required uint64 sensor_id = 1;
  if (has_sensor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sensor_id(), output);
  }

  // required string event_message = 2;
  if (has_event_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_message().data(), this->event_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.ContainerAnalyticEvent.event_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->event_message(), output);
  }

  // required string plugin_name = 3;
  if (has_plugin_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plugin_name().data(), this->plugin_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.ContainerAnalyticEvent.plugin_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->plugin_name(), output);
  }

  // required string plugin_type = 4;
  if (has_plugin_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plugin_type().data(), this->plugin_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.ContainerAnalyticEvent.plugin_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->plugin_type(), output);
  }

  // required string processing_id = 5;
  if (has_processing_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->processing_id().data(), this->processing_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.ContainerAnalyticEvent.processing_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->processing_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_server_protocol.ContainerAnalyticEvent)
}

::google::protobuf::uint8* ContainerAnalyticEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_server_protocol.ContainerAnalyticEvent)
  // required uint64 sensor_id = 1;
  if (has_sensor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sensor_id(), target);
  }

  // required string event_message = 2;
  if (has_event_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_message().data(), this->event_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.ContainerAnalyticEvent.event_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->event_message(), target);
  }

  // required string plugin_name = 3;
  if (has_plugin_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plugin_name().data(), this->plugin_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.ContainerAnalyticEvent.plugin_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->plugin_name(), target);
  }

  // required string plugin_type = 4;
  if (has_plugin_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plugin_type().data(), this->plugin_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.ContainerAnalyticEvent.plugin_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->plugin_type(), target);
  }

  // required string processing_id = 5;
  if (has_processing_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->processing_id().data(), this->processing_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.ContainerAnalyticEvent.processing_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->processing_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_server_protocol.ContainerAnalyticEvent)
  return target;
}

int ContainerAnalyticEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:video_server_protocol.ContainerAnalyticEvent)
  int total_size = 0;

  if (has_sensor_id()) {
    // required uint64 sensor_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sensor_id());
  }

  if (has_event_message()) {
    // required string event_message = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->event_message());
  }

  if (has_plugin_name()) {
    // required string plugin_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->plugin_name());
  }

  if (has_plugin_type()) {
    // required string plugin_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->plugin_type());
  }

  if (has_processing_id()) {
    // required string processing_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->processing_id());
  }

  return total_size;
}
int ContainerAnalyticEvent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:video_server_protocol.ContainerAnalyticEvent)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint64 sensor_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sensor_id());

    // required string event_message = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->event_message());

    // required string plugin_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->plugin_name());

    // required string plugin_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->plugin_type());

    // required string processing_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->processing_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerAnalyticEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:video_server_protocol.ContainerAnalyticEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ContainerAnalyticEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ContainerAnalyticEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:video_server_protocol.ContainerAnalyticEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:video_server_protocol.ContainerAnalyticEvent)
    MergeFrom(*source);
  }
}

void ContainerAnalyticEvent::MergeFrom(const ContainerAnalyticEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video_server_protocol.ContainerAnalyticEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sensor_id()) {
      set_sensor_id(from.sensor_id());
    }
    if (from.has_event_message()) {
      set_has_event_message();
      event_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_message_);
    }
    if (from.has_plugin_name()) {
      set_has_plugin_name();
      plugin_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plugin_name_);
    }
    if (from.has_plugin_type()) {
      set_has_plugin_type();
      plugin_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plugin_type_);
    }
    if (from.has_processing_id()) {
      set_has_processing_id();
      processing_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.processing_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ContainerAnalyticEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:video_server_protocol.ContainerAnalyticEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerAnalyticEvent::CopyFrom(const ContainerAnalyticEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video_server_protocol.ContainerAnalyticEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerAnalyticEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ContainerAnalyticEvent::Swap(ContainerAnalyticEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContainerAnalyticEvent::InternalSwap(ContainerAnalyticEvent* other) {
  std::swap(sensor_id_, other->sensor_id_);
  event_message_.Swap(&other->event_message_);
  plugin_name_.Swap(&other->plugin_name_);
  plugin_type_.Swap(&other->plugin_type_);
  processing_id_.Swap(&other->processing_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContainerAnalyticEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerAnalyticEvent_descriptor_;
  metadata.reflection = ContainerAnalyticEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContainerAnalyticEvent

// required uint64 sensor_id = 1;
bool ContainerAnalyticEvent::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ContainerAnalyticEvent::set_has_sensor_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ContainerAnalyticEvent::clear_has_sensor_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ContainerAnalyticEvent::clear_sensor_id() {
  sensor_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sensor_id();
}
 ::google::protobuf::uint64 ContainerAnalyticEvent::sensor_id() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerAnalyticEvent.sensor_id)
  return sensor_id_;
}
 void ContainerAnalyticEvent::set_sensor_id(::google::protobuf::uint64 value) {
  set_has_sensor_id();
  sensor_id_ = value;
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerAnalyticEvent.sensor_id)
}

// required string event_message = 2;
bool ContainerAnalyticEvent::has_event_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ContainerAnalyticEvent::set_has_event_message() {
  _has_bits_[0] |= 0x00000002u;
}
void ContainerAnalyticEvent::clear_has_event_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void ContainerAnalyticEvent::clear_event_message() {
  event_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_event_message();
}
 const ::std::string& ContainerAnalyticEvent::event_message() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerAnalyticEvent.event_message)
  return event_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContainerAnalyticEvent::set_event_message(const ::std::string& value) {
  set_has_event_message();
  event_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerAnalyticEvent.event_message)
}
 void ContainerAnalyticEvent::set_event_message(const char* value) {
  set_has_event_message();
  event_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.ContainerAnalyticEvent.event_message)
}
 void ContainerAnalyticEvent::set_event_message(const char* value, size_t size) {
  set_has_event_message();
  event_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.ContainerAnalyticEvent.event_message)
}
 ::std::string* ContainerAnalyticEvent::mutable_event_message() {
  set_has_event_message();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerAnalyticEvent.event_message)
  return event_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ContainerAnalyticEvent::release_event_message() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ContainerAnalyticEvent.event_message)
  clear_has_event_message();
  return event_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContainerAnalyticEvent::set_allocated_event_message(::std::string* event_message) {
  if (event_message != NULL) {
    set_has_event_message();
  } else {
    clear_has_event_message();
  }
  event_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_message);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ContainerAnalyticEvent.event_message)
}

// required string plugin_name = 3;
bool ContainerAnalyticEvent::has_plugin_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ContainerAnalyticEvent::set_has_plugin_name() {
  _has_bits_[0] |= 0x00000004u;
}
void ContainerAnalyticEvent::clear_has_plugin_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void ContainerAnalyticEvent::clear_plugin_name() {
  plugin_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_plugin_name();
}
 const ::std::string& ContainerAnalyticEvent::plugin_name() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerAnalyticEvent.plugin_name)
  return plugin_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContainerAnalyticEvent::set_plugin_name(const ::std::string& value) {
  set_has_plugin_name();
  plugin_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerAnalyticEvent.plugin_name)
}
 void ContainerAnalyticEvent::set_plugin_name(const char* value) {
  set_has_plugin_name();
  plugin_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.ContainerAnalyticEvent.plugin_name)
}
 void ContainerAnalyticEvent::set_plugin_name(const char* value, size_t size) {
  set_has_plugin_name();
  plugin_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.ContainerAnalyticEvent.plugin_name)
}
 ::std::string* ContainerAnalyticEvent::mutable_plugin_name() {
  set_has_plugin_name();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerAnalyticEvent.plugin_name)
  return plugin_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ContainerAnalyticEvent::release_plugin_name() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ContainerAnalyticEvent.plugin_name)
  clear_has_plugin_name();
  return plugin_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContainerAnalyticEvent::set_allocated_plugin_name(::std::string* plugin_name) {
  if (plugin_name != NULL) {
    set_has_plugin_name();
  } else {
    clear_has_plugin_name();
  }
  plugin_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plugin_name);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ContainerAnalyticEvent.plugin_name)
}

// required string plugin_type = 4;
bool ContainerAnalyticEvent::has_plugin_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ContainerAnalyticEvent::set_has_plugin_type() {
  _has_bits_[0] |= 0x00000008u;
}
void ContainerAnalyticEvent::clear_has_plugin_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void ContainerAnalyticEvent::clear_plugin_type() {
  plugin_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_plugin_type();
}
 const ::std::string& ContainerAnalyticEvent::plugin_type() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerAnalyticEvent.plugin_type)
  return plugin_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContainerAnalyticEvent::set_plugin_type(const ::std::string& value) {
  set_has_plugin_type();
  plugin_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerAnalyticEvent.plugin_type)
}
 void ContainerAnalyticEvent::set_plugin_type(const char* value) {
  set_has_plugin_type();
  plugin_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.ContainerAnalyticEvent.plugin_type)
}
 void ContainerAnalyticEvent::set_plugin_type(const char* value, size_t size) {
  set_has_plugin_type();
  plugin_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.ContainerAnalyticEvent.plugin_type)
}
 ::std::string* ContainerAnalyticEvent::mutable_plugin_type() {
  set_has_plugin_type();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerAnalyticEvent.plugin_type)
  return plugin_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ContainerAnalyticEvent::release_plugin_type() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ContainerAnalyticEvent.plugin_type)
  clear_has_plugin_type();
  return plugin_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContainerAnalyticEvent::set_allocated_plugin_type(::std::string* plugin_type) {
  if (plugin_type != NULL) {
    set_has_plugin_type();
  } else {
    clear_has_plugin_type();
  }
  plugin_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plugin_type);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ContainerAnalyticEvent.plugin_type)
}

// required string processing_id = 5;
bool ContainerAnalyticEvent::has_processing_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ContainerAnalyticEvent::set_has_processing_id() {
  _has_bits_[0] |= 0x00000010u;
}
void ContainerAnalyticEvent::clear_has_processing_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void ContainerAnalyticEvent::clear_processing_id() {
  processing_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_processing_id();
}
 const ::std::string& ContainerAnalyticEvent::processing_id() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerAnalyticEvent.processing_id)
  return processing_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContainerAnalyticEvent::set_processing_id(const ::std::string& value) {
  set_has_processing_id();
  processing_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerAnalyticEvent.processing_id)
}
 void ContainerAnalyticEvent::set_processing_id(const char* value) {
  set_has_processing_id();
  processing_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.ContainerAnalyticEvent.processing_id)
}
 void ContainerAnalyticEvent::set_processing_id(const char* value, size_t size) {
  set_has_processing_id();
  processing_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.ContainerAnalyticEvent.processing_id)
}
 ::std::string* ContainerAnalyticEvent::mutable_processing_id() {
  set_has_processing_id();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerAnalyticEvent.processing_id)
  return processing_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ContainerAnalyticEvent::release_processing_id() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ContainerAnalyticEvent.processing_id)
  clear_has_processing_id();
  return processing_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContainerAnalyticEvent::set_allocated_processing_id(::std::string* processing_id) {
  if (processing_id != NULL) {
    set_has_processing_id();
  } else {
    clear_has_processing_id();
  }
  processing_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), processing_id);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ContainerAnalyticEvent.processing_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContainerAnalyzeStatus::kSensorIdFieldNumber;
const int ContainerAnalyzeStatus::kStateFieldNumber;
const int ContainerAnalyzeStatus::kProcessingIdFieldNumber;
const int ContainerAnalyzeStatus::kProcessingNameFieldNumber;
const int ContainerAnalyzeStatus::kProfileIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContainerAnalyzeStatus::ContainerAnalyzeStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_server_protocol.ContainerAnalyzeStatus)
}

void ContainerAnalyzeStatus::InitAsDefaultInstance() {
}

ContainerAnalyzeStatus::ContainerAnalyzeStatus(const ContainerAnalyzeStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_server_protocol.ContainerAnalyzeStatus)
}

void ContainerAnalyzeStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sensor_id_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  processing_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processing_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profile_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerAnalyzeStatus::~ContainerAnalyzeStatus() {
  // @@protoc_insertion_point(destructor:video_server_protocol.ContainerAnalyzeStatus)
  SharedDtor();
}

void ContainerAnalyzeStatus::SharedDtor() {
  processing_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processing_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ContainerAnalyzeStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerAnalyzeStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerAnalyzeStatus_descriptor_;
}

const ContainerAnalyzeStatus& ContainerAnalyzeStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  return *default_instance_;
}

ContainerAnalyzeStatus* ContainerAnalyzeStatus::default_instance_ = NULL;

ContainerAnalyzeStatus* ContainerAnalyzeStatus::New(::google::protobuf::Arena* arena) const {
  ContainerAnalyzeStatus* n = new ContainerAnalyzeStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContainerAnalyzeStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:video_server_protocol.ContainerAnalyzeStatus)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ContainerAnalyzeStatus, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ContainerAnalyzeStatus*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(profile_id_, state_);
    sensor_id_ = GOOGLE_ULONGLONG(0);
    if (has_processing_id()) {
      processing_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_processing_name()) {
      processing_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ContainerAnalyzeStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_server_protocol.ContainerAnalyzeStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 sensor_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sensor_id_)));
          set_has_sensor_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required .video_server_protocol.EAnalyzeState state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::video_server_protocol::EAnalyzeState_IsValid(value)) {
            set_state(static_cast< ::video_server_protocol::EAnalyzeState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_processing_id;
        break;
      }

      // required string processing_id = 3;
      case 3: {
        if (tag == 26) {
         parse_processing_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processing_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->processing_id().data(), this->processing_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "video_server_protocol.ContainerAnalyzeStatus.processing_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_processing_name;
        break;
      }

      // required string processing_name = 4;
      case 4: {
        if (tag == 34) {
         parse_processing_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processing_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->processing_name().data(), this->processing_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "video_server_protocol.ContainerAnalyzeStatus.processing_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_profile_id;
        break;
      }

      // required uint64 profile_id = 5;
      case 5: {
        if (tag == 40) {
         parse_profile_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &profile_id_)));
          set_has_profile_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:video_server_protocol.ContainerAnalyzeStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_server_protocol.ContainerAnalyzeStatus)
  return false;
#undef DO_
}

void ContainerAnalyzeStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_server_protocol.ContainerAnalyzeStatus)
  // required uint64 sensor_id = 1;
  if (has_sensor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sensor_id(), output);
  }

  // required .video_server_protocol.EAnalyzeState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // required string processing_id = 3;
  if (has_processing_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->processing_id().data(), this->processing_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.ContainerAnalyzeStatus.processing_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->processing_id(), output);
  }

  // required string processing_name = 4;
  if (has_processing_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->processing_name().data(), this->processing_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.ContainerAnalyzeStatus.processing_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->processing_name(), output);
  }

  // required uint64 profile_id = 5;
  if (has_profile_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->profile_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_server_protocol.ContainerAnalyzeStatus)
}

::google::protobuf::uint8* ContainerAnalyzeStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_server_protocol.ContainerAnalyzeStatus)
  // required uint64 sensor_id = 1;
  if (has_sensor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sensor_id(), target);
  }

  // required .video_server_protocol.EAnalyzeState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // required string processing_id = 3;
  if (has_processing_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->processing_id().data(), this->processing_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.ContainerAnalyzeStatus.processing_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->processing_id(), target);
  }

  // required string processing_name = 4;
  if (has_processing_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->processing_name().data(), this->processing_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.ContainerAnalyzeStatus.processing_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->processing_name(), target);
  }

  // required uint64 profile_id = 5;
  if (has_profile_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->profile_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_server_protocol.ContainerAnalyzeStatus)
  return target;
}

int ContainerAnalyzeStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:video_server_protocol.ContainerAnalyzeStatus)
  int total_size = 0;

  if (has_sensor_id()) {
    // required uint64 sensor_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sensor_id());
  }

  if (has_state()) {
    // required .video_server_protocol.EAnalyzeState state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  if (has_processing_id()) {
    // required string processing_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->processing_id());
  }

  if (has_processing_name()) {
    // required string processing_name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->processing_name());
  }

  if (has_profile_id()) {
    // required uint64 profile_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->profile_id());
  }

  return total_size;
}
int ContainerAnalyzeStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:video_server_protocol.ContainerAnalyzeStatus)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint64 sensor_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sensor_id());

    // required .video_server_protocol.EAnalyzeState state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());

    // required string processing_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->processing_id());

    // required string processing_name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->processing_name());

    // required uint64 profile_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->profile_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerAnalyzeStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:video_server_protocol.ContainerAnalyzeStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ContainerAnalyzeStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ContainerAnalyzeStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:video_server_protocol.ContainerAnalyzeStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:video_server_protocol.ContainerAnalyzeStatus)
    MergeFrom(*source);
  }
}

void ContainerAnalyzeStatus::MergeFrom(const ContainerAnalyzeStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video_server_protocol.ContainerAnalyzeStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sensor_id()) {
      set_sensor_id(from.sensor_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_processing_id()) {
      set_has_processing_id();
      processing_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.processing_id_);
    }
    if (from.has_processing_name()) {
      set_has_processing_name();
      processing_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.processing_name_);
    }
    if (from.has_profile_id()) {
      set_profile_id(from.profile_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ContainerAnalyzeStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:video_server_protocol.ContainerAnalyzeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerAnalyzeStatus::CopyFrom(const ContainerAnalyzeStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video_server_protocol.ContainerAnalyzeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerAnalyzeStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ContainerAnalyzeStatus::Swap(ContainerAnalyzeStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContainerAnalyzeStatus::InternalSwap(ContainerAnalyzeStatus* other) {
  std::swap(sensor_id_, other->sensor_id_);
  std::swap(state_, other->state_);
  processing_id_.Swap(&other->processing_id_);
  processing_name_.Swap(&other->processing_name_);
  std::swap(profile_id_, other->profile_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContainerAnalyzeStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerAnalyzeStatus_descriptor_;
  metadata.reflection = ContainerAnalyzeStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContainerAnalyzeStatus

// required uint64 sensor_id = 1;
bool ContainerAnalyzeStatus::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ContainerAnalyzeStatus::set_has_sensor_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ContainerAnalyzeStatus::clear_has_sensor_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ContainerAnalyzeStatus::clear_sensor_id() {
  sensor_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sensor_id();
}
 ::google::protobuf::uint64 ContainerAnalyzeStatus::sensor_id() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerAnalyzeStatus.sensor_id)
  return sensor_id_;
}
 void ContainerAnalyzeStatus::set_sensor_id(::google::protobuf::uint64 value) {
  set_has_sensor_id();
  sensor_id_ = value;
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerAnalyzeStatus.sensor_id)
}

// required .video_server_protocol.EAnalyzeState state = 2;
bool ContainerAnalyzeStatus::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ContainerAnalyzeStatus::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
void ContainerAnalyzeStatus::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void ContainerAnalyzeStatus::clear_state() {
  state_ = 0;
  clear_has_state();
}
 ::video_server_protocol::EAnalyzeState ContainerAnalyzeStatus::state() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerAnalyzeStatus.state)
  return static_cast< ::video_server_protocol::EAnalyzeState >(state_);
}
 void ContainerAnalyzeStatus::set_state(::video_server_protocol::EAnalyzeState value) {
  assert(::video_server_protocol::EAnalyzeState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerAnalyzeStatus.state)
}

// required string processing_id = 3;
bool ContainerAnalyzeStatus::has_processing_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ContainerAnalyzeStatus::set_has_processing_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ContainerAnalyzeStatus::clear_has_processing_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ContainerAnalyzeStatus::clear_processing_id() {
  processing_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_processing_id();
}
 const ::std::string& ContainerAnalyzeStatus::processing_id() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerAnalyzeStatus.processing_id)
  return processing_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContainerAnalyzeStatus::set_processing_id(const ::std::string& value) {
  set_has_processing_id();
  processing_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerAnalyzeStatus.processing_id)
}
 void ContainerAnalyzeStatus::set_processing_id(const char* value) {
  set_has_processing_id();
  processing_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.ContainerAnalyzeStatus.processing_id)
}
 void ContainerAnalyzeStatus::set_processing_id(const char* value, size_t size) {
  set_has_processing_id();
  processing_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.ContainerAnalyzeStatus.processing_id)
}
 ::std::string* ContainerAnalyzeStatus::mutable_processing_id() {
  set_has_processing_id();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerAnalyzeStatus.processing_id)
  return processing_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ContainerAnalyzeStatus::release_processing_id() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ContainerAnalyzeStatus.processing_id)
  clear_has_processing_id();
  return processing_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContainerAnalyzeStatus::set_allocated_processing_id(::std::string* processing_id) {
  if (processing_id != NULL) {
    set_has_processing_id();
  } else {
    clear_has_processing_id();
  }
  processing_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), processing_id);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ContainerAnalyzeStatus.processing_id)
}

// required string processing_name = 4;
bool ContainerAnalyzeStatus::has_processing_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ContainerAnalyzeStatus::set_has_processing_name() {
  _has_bits_[0] |= 0x00000008u;
}
void ContainerAnalyzeStatus::clear_has_processing_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void ContainerAnalyzeStatus::clear_processing_name() {
  processing_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_processing_name();
}
 const ::std::string& ContainerAnalyzeStatus::processing_name() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerAnalyzeStatus.processing_name)
  return processing_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContainerAnalyzeStatus::set_processing_name(const ::std::string& value) {
  set_has_processing_name();
  processing_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerAnalyzeStatus.processing_name)
}
 void ContainerAnalyzeStatus::set_processing_name(const char* value) {
  set_has_processing_name();
  processing_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.ContainerAnalyzeStatus.processing_name)
}
 void ContainerAnalyzeStatus::set_processing_name(const char* value, size_t size) {
  set_has_processing_name();
  processing_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.ContainerAnalyzeStatus.processing_name)
}
 ::std::string* ContainerAnalyzeStatus::mutable_processing_name() {
  set_has_processing_name();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerAnalyzeStatus.processing_name)
  return processing_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ContainerAnalyzeStatus::release_processing_name() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ContainerAnalyzeStatus.processing_name)
  clear_has_processing_name();
  return processing_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContainerAnalyzeStatus::set_allocated_processing_name(::std::string* processing_name) {
  if (processing_name != NULL) {
    set_has_processing_name();
  } else {
    clear_has_processing_name();
  }
  processing_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), processing_name);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ContainerAnalyzeStatus.processing_name)
}

// required uint64 profile_id = 5;
bool ContainerAnalyzeStatus::has_profile_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ContainerAnalyzeStatus::set_has_profile_id() {
  _has_bits_[0] |= 0x00000010u;
}
void ContainerAnalyzeStatus::clear_has_profile_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void ContainerAnalyzeStatus::clear_profile_id() {
  profile_id_ = GOOGLE_ULONGLONG(0);
  clear_has_profile_id();
}
 ::google::protobuf::uint64 ContainerAnalyzeStatus::profile_id() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerAnalyzeStatus.profile_id)
  return profile_id_;
}
 void ContainerAnalyzeStatus::set_profile_id(::google::protobuf::uint64 value) {
  set_has_profile_id();
  profile_id_ = value;
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerAnalyzeStatus.profile_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FilterPluginParam::kKeyFieldNumber;
const int FilterPluginParam::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FilterPluginParam::FilterPluginParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_server_protocol.FilterPluginParam)
}

void FilterPluginParam::InitAsDefaultInstance() {
}

FilterPluginParam::FilterPluginParam(const FilterPluginParam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_server_protocol.FilterPluginParam)
}

void FilterPluginParam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FilterPluginParam::~FilterPluginParam() {
  // @@protoc_insertion_point(destructor:video_server_protocol.FilterPluginParam)
  SharedDtor();
}

void FilterPluginParam::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FilterPluginParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilterPluginParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FilterPluginParam_descriptor_;
}

const FilterPluginParam& FilterPluginParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  return *default_instance_;
}

FilterPluginParam* FilterPluginParam::default_instance_ = NULL;

FilterPluginParam* FilterPluginParam::New(::google::protobuf::Arena* arena) const {
  FilterPluginParam* n = new FilterPluginParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FilterPluginParam::Clear() {
// @@protoc_insertion_point(message_clear_start:video_server_protocol.FilterPluginParam)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_val()) {
      val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FilterPluginParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_server_protocol.FilterPluginParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "video_server_protocol.FilterPluginParam.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_val;
        break;
      }

      // required string val = 2;
      case 2: {
        if (tag == 18) {
         parse_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_val()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->val().data(), this->val().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "video_server_protocol.FilterPluginParam.val");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:video_server_protocol.FilterPluginParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_server_protocol.FilterPluginParam)
  return false;
#undef DO_
}

void FilterPluginParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_server_protocol.FilterPluginParam)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.FilterPluginParam.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val().data(), this->val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.FilterPluginParam.val");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->val(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_server_protocol.FilterPluginParam)
}

::google::protobuf::uint8* FilterPluginParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_server_protocol.FilterPluginParam)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.FilterPluginParam.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val().data(), this->val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.FilterPluginParam.val");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->val(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_server_protocol.FilterPluginParam)
  return target;
}

int FilterPluginParam::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:video_server_protocol.FilterPluginParam)
  int total_size = 0;

  if (has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_val()) {
    // required string val = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->val());
  }

  return total_size;
}
int FilterPluginParam::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:video_server_protocol.FilterPluginParam)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required string val = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->val());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilterPluginParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:video_server_protocol.FilterPluginParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FilterPluginParam* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FilterPluginParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:video_server_protocol.FilterPluginParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:video_server_protocol.FilterPluginParam)
    MergeFrom(*source);
  }
}

void FilterPluginParam::MergeFrom(const FilterPluginParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video_server_protocol.FilterPluginParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_val()) {
      set_has_val();
      val_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FilterPluginParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:video_server_protocol.FilterPluginParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterPluginParam::CopyFrom(const FilterPluginParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video_server_protocol.FilterPluginParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterPluginParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FilterPluginParam::Swap(FilterPluginParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FilterPluginParam::InternalSwap(FilterPluginParam* other) {
  key_.Swap(&other->key_);
  val_.Swap(&other->val_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FilterPluginParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FilterPluginParam_descriptor_;
  metadata.reflection = FilterPluginParam_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FilterPluginParam

// required string key = 1;
bool FilterPluginParam::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FilterPluginParam::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void FilterPluginParam::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void FilterPluginParam::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& FilterPluginParam::key() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.FilterPluginParam.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FilterPluginParam::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.FilterPluginParam.key)
}
 void FilterPluginParam::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.FilterPluginParam.key)
}
 void FilterPluginParam::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.FilterPluginParam.key)
}
 ::std::string* FilterPluginParam::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.FilterPluginParam.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FilterPluginParam::release_key() {
  // @@protoc_insertion_point(field_release:video_server_protocol.FilterPluginParam.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FilterPluginParam::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.FilterPluginParam.key)
}

// required string val = 2;
bool FilterPluginParam::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FilterPluginParam::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
void FilterPluginParam::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
void FilterPluginParam::clear_val() {
  val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_val();
}
 const ::std::string& FilterPluginParam::val() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.FilterPluginParam.val)
  return val_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FilterPluginParam::set_val(const ::std::string& value) {
  set_has_val();
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.FilterPluginParam.val)
}
 void FilterPluginParam::set_val(const char* value) {
  set_has_val();
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.FilterPluginParam.val)
}
 void FilterPluginParam::set_val(const char* value, size_t size) {
  set_has_val();
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.FilterPluginParam.val)
}
 ::std::string* FilterPluginParam::mutable_val() {
  set_has_val();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.FilterPluginParam.val)
  return val_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FilterPluginParam::release_val() {
  // @@protoc_insertion_point(field_release:video_server_protocol.FilterPluginParam.val)
  clear_has_val();
  return val_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FilterPluginParam::set_allocated_val(::std::string* val) {
  if (val != NULL) {
    set_has_val();
  } else {
    clear_has_val();
  }
  val_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), val);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.FilterPluginParam.val)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FilterPluginMetadata::kPluginStaticNameFieldNumber;
const int FilterPluginMetadata::kGstreamerElementNameFieldNumber;
const int FilterPluginMetadata::kParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FilterPluginMetadata::FilterPluginMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_server_protocol.FilterPluginMetadata)
}

void FilterPluginMetadata::InitAsDefaultInstance() {
}

FilterPluginMetadata::FilterPluginMetadata(const FilterPluginMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_server_protocol.FilterPluginMetadata)
}

void FilterPluginMetadata::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  plugin_static_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gstreamer_element_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FilterPluginMetadata::~FilterPluginMetadata() {
  // @@protoc_insertion_point(destructor:video_server_protocol.FilterPluginMetadata)
  SharedDtor();
}

void FilterPluginMetadata::SharedDtor() {
  plugin_static_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gstreamer_element_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FilterPluginMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilterPluginMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FilterPluginMetadata_descriptor_;
}

const FilterPluginMetadata& FilterPluginMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  return *default_instance_;
}

FilterPluginMetadata* FilterPluginMetadata::default_instance_ = NULL;

FilterPluginMetadata* FilterPluginMetadata::New(::google::protobuf::Arena* arena) const {
  FilterPluginMetadata* n = new FilterPluginMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FilterPluginMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:video_server_protocol.FilterPluginMetadata)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_plugin_static_name()) {
      plugin_static_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_gstreamer_element_name()) {
      gstreamer_element_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FilterPluginMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_server_protocol.FilterPluginMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string plugin_static_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plugin_static_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->plugin_static_name().data(), this->plugin_static_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "video_server_protocol.FilterPluginMetadata.plugin_static_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gstreamer_element_name;
        break;
      }

      // required string gstreamer_element_name = 2;
      case 2: {
        if (tag == 18) {
         parse_gstreamer_element_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gstreamer_element_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gstreamer_element_name().data(), this->gstreamer_element_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "video_server_protocol.FilterPluginMetadata.gstreamer_element_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_params;
        break;
      }

      // repeated .video_server_protocol.FilterPluginParam params = 3;
      case 3: {
        if (tag == 26) {
         parse_params:
          DO_(input->IncrementRecursionDepth());
         parse_loop_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_params;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:video_server_protocol.FilterPluginMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_server_protocol.FilterPluginMetadata)
  return false;
#undef DO_
}

void FilterPluginMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_server_protocol.FilterPluginMetadata)
  // required string plugin_static_name = 1;
  if (has_plugin_static_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plugin_static_name().data(), this->plugin_static_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.FilterPluginMetadata.plugin_static_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->plugin_static_name(), output);
  }

  // required string gstreamer_element_name = 2;
  if (has_gstreamer_element_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gstreamer_element_name().data(), this->gstreamer_element_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.FilterPluginMetadata.gstreamer_element_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gstreamer_element_name(), output);
  }

  // repeated .video_server_protocol.FilterPluginParam params = 3;
  for (unsigned int i = 0, n = this->params_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->params(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_server_protocol.FilterPluginMetadata)
}

::google::protobuf::uint8* FilterPluginMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_server_protocol.FilterPluginMetadata)
  // required string plugin_static_name = 1;
  if (has_plugin_static_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plugin_static_name().data(), this->plugin_static_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.FilterPluginMetadata.plugin_static_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->plugin_static_name(), target);
  }

  // required string gstreamer_element_name = 2;
  if (has_gstreamer_element_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gstreamer_element_name().data(), this->gstreamer_element_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.FilterPluginMetadata.gstreamer_element_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gstreamer_element_name(), target);
  }

  // repeated .video_server_protocol.FilterPluginParam params = 3;
  for (unsigned int i = 0, n = this->params_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->params(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_server_protocol.FilterPluginMetadata)
  return target;
}

int FilterPluginMetadata::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:video_server_protocol.FilterPluginMetadata)
  int total_size = 0;

  if (has_plugin_static_name()) {
    // required string plugin_static_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->plugin_static_name());
  }

  if (has_gstreamer_element_name()) {
    // required string gstreamer_element_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gstreamer_element_name());
  }

  return total_size;
}
int FilterPluginMetadata::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:video_server_protocol.FilterPluginMetadata)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string plugin_static_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->plugin_static_name());

    // required string gstreamer_element_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gstreamer_element_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .video_server_protocol.FilterPluginParam params = 3;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->params(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilterPluginMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:video_server_protocol.FilterPluginMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FilterPluginMetadata* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FilterPluginMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:video_server_protocol.FilterPluginMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:video_server_protocol.FilterPluginMetadata)
    MergeFrom(*source);
  }
}

void FilterPluginMetadata::MergeFrom(const FilterPluginMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video_server_protocol.FilterPluginMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plugin_static_name()) {
      set_has_plugin_static_name();
      plugin_static_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plugin_static_name_);
    }
    if (from.has_gstreamer_element_name()) {
      set_has_gstreamer_element_name();
      gstreamer_element_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gstreamer_element_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FilterPluginMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:video_server_protocol.FilterPluginMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterPluginMetadata::CopyFrom(const FilterPluginMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video_server_protocol.FilterPluginMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterPluginMetadata::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->params())) return false;
  return true;
}

void FilterPluginMetadata::Swap(FilterPluginMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FilterPluginMetadata::InternalSwap(FilterPluginMetadata* other) {
  plugin_static_name_.Swap(&other->plugin_static_name_);
  gstreamer_element_name_.Swap(&other->gstreamer_element_name_);
  params_.UnsafeArenaSwap(&other->params_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FilterPluginMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FilterPluginMetadata_descriptor_;
  metadata.reflection = FilterPluginMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FilterPluginMetadata

// required string plugin_static_name = 1;
bool FilterPluginMetadata::has_plugin_static_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FilterPluginMetadata::set_has_plugin_static_name() {
  _has_bits_[0] |= 0x00000001u;
}
void FilterPluginMetadata::clear_has_plugin_static_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void FilterPluginMetadata::clear_plugin_static_name() {
  plugin_static_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_plugin_static_name();
}
 const ::std::string& FilterPluginMetadata::plugin_static_name() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.FilterPluginMetadata.plugin_static_name)
  return plugin_static_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FilterPluginMetadata::set_plugin_static_name(const ::std::string& value) {
  set_has_plugin_static_name();
  plugin_static_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.FilterPluginMetadata.plugin_static_name)
}
 void FilterPluginMetadata::set_plugin_static_name(const char* value) {
  set_has_plugin_static_name();
  plugin_static_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.FilterPluginMetadata.plugin_static_name)
}
 void FilterPluginMetadata::set_plugin_static_name(const char* value, size_t size) {
  set_has_plugin_static_name();
  plugin_static_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.FilterPluginMetadata.plugin_static_name)
}
 ::std::string* FilterPluginMetadata::mutable_plugin_static_name() {
  set_has_plugin_static_name();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.FilterPluginMetadata.plugin_static_name)
  return plugin_static_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FilterPluginMetadata::release_plugin_static_name() {
  // @@protoc_insertion_point(field_release:video_server_protocol.FilterPluginMetadata.plugin_static_name)
  clear_has_plugin_static_name();
  return plugin_static_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FilterPluginMetadata::set_allocated_plugin_static_name(::std::string* plugin_static_name) {
  if (plugin_static_name != NULL) {
    set_has_plugin_static_name();
  } else {
    clear_has_plugin_static_name();
  }
  plugin_static_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plugin_static_name);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.FilterPluginMetadata.plugin_static_name)
}

// required string gstreamer_element_name = 2;
bool FilterPluginMetadata::has_gstreamer_element_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FilterPluginMetadata::set_has_gstreamer_element_name() {
  _has_bits_[0] |= 0x00000002u;
}
void FilterPluginMetadata::clear_has_gstreamer_element_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void FilterPluginMetadata::clear_gstreamer_element_name() {
  gstreamer_element_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gstreamer_element_name();
}
 const ::std::string& FilterPluginMetadata::gstreamer_element_name() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.FilterPluginMetadata.gstreamer_element_name)
  return gstreamer_element_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FilterPluginMetadata::set_gstreamer_element_name(const ::std::string& value) {
  set_has_gstreamer_element_name();
  gstreamer_element_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.FilterPluginMetadata.gstreamer_element_name)
}
 void FilterPluginMetadata::set_gstreamer_element_name(const char* value) {
  set_has_gstreamer_element_name();
  gstreamer_element_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.FilterPluginMetadata.gstreamer_element_name)
}
 void FilterPluginMetadata::set_gstreamer_element_name(const char* value, size_t size) {
  set_has_gstreamer_element_name();
  gstreamer_element_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.FilterPluginMetadata.gstreamer_element_name)
}
 ::std::string* FilterPluginMetadata::mutable_gstreamer_element_name() {
  set_has_gstreamer_element_name();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.FilterPluginMetadata.gstreamer_element_name)
  return gstreamer_element_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FilterPluginMetadata::release_gstreamer_element_name() {
  // @@protoc_insertion_point(field_release:video_server_protocol.FilterPluginMetadata.gstreamer_element_name)
  clear_has_gstreamer_element_name();
  return gstreamer_element_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FilterPluginMetadata::set_allocated_gstreamer_element_name(::std::string* gstreamer_element_name) {
  if (gstreamer_element_name != NULL) {
    set_has_gstreamer_element_name();
  } else {
    clear_has_gstreamer_element_name();
  }
  gstreamer_element_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gstreamer_element_name);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.FilterPluginMetadata.gstreamer_element_name)
}

// repeated .video_server_protocol.FilterPluginParam params = 3;
int FilterPluginMetadata::params_size() const {
  return params_.size();
}
void FilterPluginMetadata::clear_params() {
  params_.Clear();
}
const ::video_server_protocol::FilterPluginParam& FilterPluginMetadata::params(int index) const {
  // @@protoc_insertion_point(field_get:video_server_protocol.FilterPluginMetadata.params)
  return params_.Get(index);
}
::video_server_protocol::FilterPluginParam* FilterPluginMetadata::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:video_server_protocol.FilterPluginMetadata.params)
  return params_.Mutable(index);
}
::video_server_protocol::FilterPluginParam* FilterPluginMetadata::add_params() {
  // @@protoc_insertion_point(field_add:video_server_protocol.FilterPluginMetadata.params)
  return params_.Add();
}
::google::protobuf::RepeatedPtrField< ::video_server_protocol::FilterPluginParam >*
FilterPluginMetadata::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:video_server_protocol.FilterPluginMetadata.params)
  return &params_;
}
const ::google::protobuf::RepeatedPtrField< ::video_server_protocol::FilterPluginParam >&
FilterPluginMetadata::params() const {
  // @@protoc_insertion_point(field_list:video_server_protocol.FilterPluginMetadata.params)
  return params_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContainerInitSettings::kSensorIdFieldNumber;
const int ContainerInitSettings::kProfileIdFieldNumber;
const int ContainerInitSettings::kSourceUrlFieldNumber;
const int ContainerInitSettings::kProcessingIdFieldNumber;
const int ContainerInitSettings::kProcessingNameFieldNumber;
const int ContainerInitSettings::kDpfObjreprMapFieldNumber;
const int ContainerInitSettings::kIntervideosinkChannelNameFieldNumber;
const int ContainerInitSettings::kShmRtpStreamCapsFieldNumber;
const int ContainerInitSettings::kShmRtpStreamEncodingFieldNumber;
const int ContainerInitSettings::kPluginsFieldNumber;
const int ContainerInitSettings::kVideoReceiverRtpPayloadSocketFieldNumber;
const int ContainerInitSettings::kProcessingFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContainerInitSettings::ContainerInitSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_server_protocol.ContainerInitSettings)
}

void ContainerInitSettings::InitAsDefaultInstance() {
}

ContainerInitSettings::ContainerInitSettings(const ContainerInitSettings& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_server_protocol.ContainerInitSettings)
}

void ContainerInitSettings::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sensor_id_ = GOOGLE_ULONGLONG(0);
  profile_id_ = GOOGLE_ULONGLONG(0);
  source_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processing_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processing_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  intervideosink_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shm_rtp_stream_caps_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shm_rtp_stream_encoding_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  videoreceiverrtppayloadsocket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processing_flags_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerInitSettings::~ContainerInitSettings() {
  // @@protoc_insertion_point(destructor:video_server_protocol.ContainerInitSettings)
  SharedDtor();
}

void ContainerInitSettings::SharedDtor() {
  source_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processing_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processing_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  intervideosink_channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shm_rtp_stream_caps_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shm_rtp_stream_encoding_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  videoreceiverrtppayloadsocket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ContainerInitSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerInitSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerInitSettings_descriptor_;
}

const ContainerInitSettings& ContainerInitSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  return *default_instance_;
}

ContainerInitSettings* ContainerInitSettings::default_instance_ = NULL;

ContainerInitSettings* ContainerInitSettings::New(::google::protobuf::Arena* arena) const {
  ContainerInitSettings* n = new ContainerInitSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContainerInitSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:video_server_protocol.ContainerInitSettings)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ContainerInitSettings, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ContainerInitSettings*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 223u) {
    ZR_(sensor_id_, profile_id_);
    if (has_source_url()) {
      source_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_processing_id()) {
      processing_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_processing_name()) {
      processing_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_intervideosink_channel_name()) {
      intervideosink_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_shm_rtp_stream_caps()) {
      shm_rtp_stream_caps_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 3328u) {
    if (has_shm_rtp_stream_encoding()) {
      shm_rtp_stream_encoding_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_videoreceiverrtppayloadsocket()) {
      videoreceiverrtppayloadsocket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    processing_flags_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  dpf_objrepr_map_.Clear();
  plugins_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ContainerInitSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_server_protocol.ContainerInitSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 sensor_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sensor_id_)));
          set_has_sensor_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_profile_id;
        break;
      }

      // required uint64 profile_id = 2;
      case 2: {
        if (tag == 16) {
         parse_profile_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &profile_id_)));
          set_has_profile_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_source_url;
        break;
      }

      // required string source_url = 3;
      case 3: {
        if (tag == 26) {
         parse_source_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source_url().data(), this->source_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "video_server_protocol.ContainerInitSettings.source_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_processing_id;
        break;
      }

      // required string processing_id = 4;
      case 4: {
        if (tag == 34) {
         parse_processing_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processing_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->processing_id().data(), this->processing_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "video_server_protocol.ContainerInitSettings.processing_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_processing_name;
        break;
      }

      // required string processing_name = 5;
      case 5: {
        if (tag == 42) {
         parse_processing_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processing_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->processing_name().data(), this->processing_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "video_server_protocol.ContainerInitSettings.processing_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_dpf_objrepr_map;
        break;
      }

      // repeated .video_server_protocol.ContainerDpfObjreprMap dpf_objrepr_map = 6;
      case 6: {
        if (tag == 50) {
         parse_dpf_objrepr_map:
          DO_(input->IncrementRecursionDepth());
         parse_loop_dpf_objrepr_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_dpf_objrepr_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_dpf_objrepr_map;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(58)) goto parse_intervideosink_channel_name;
        break;
      }

      // required string intervideosink_channel_name = 7;
      case 7: {
        if (tag == 58) {
         parse_intervideosink_channel_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_intervideosink_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->intervideosink_channel_name().data(), this->intervideosink_channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "video_server_protocol.ContainerInitSettings.intervideosink_channel_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_shm_rtp_stream_caps;
        break;
      }

      // required string shm_rtp_stream_caps = 8;
      case 8: {
        if (tag == 66) {
         parse_shm_rtp_stream_caps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shm_rtp_stream_caps()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shm_rtp_stream_caps().data(), this->shm_rtp_stream_caps().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "video_server_protocol.ContainerInitSettings.shm_rtp_stream_caps");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_shm_rtp_stream_encoding;
        break;
      }

      // required string shm_rtp_stream_encoding = 9;
      case 9: {
        if (tag == 74) {
         parse_shm_rtp_stream_encoding:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shm_rtp_stream_encoding()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shm_rtp_stream_encoding().data(), this->shm_rtp_stream_encoding().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "video_server_protocol.ContainerInitSettings.shm_rtp_stream_encoding");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_plugins;
        break;
      }

      // repeated .video_server_protocol.FilterPluginMetadata plugins = 10;
      case 10: {
        if (tag == 82) {
         parse_plugins:
          DO_(input->IncrementRecursionDepth());
         parse_loop_plugins:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_plugins()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_plugins;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(90)) goto parse_VideoReceiverRtpPayloadSocket;
        break;
      }

      // required string VideoReceiverRtpPayloadSocket = 11;
      case 11: {
        if (tag == 90) {
         parse_VideoReceiverRtpPayloadSocket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_videoreceiverrtppayloadsocket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->videoreceiverrtppayloadsocket().data(), this->videoreceiverrtppayloadsocket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "video_server_protocol.ContainerInitSettings.VideoReceiverRtpPayloadSocket");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_processing_flags;
        break;
      }

      // required int32 processing_flags = 12;
      case 12: {
        if (tag == 96) {
         parse_processing_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processing_flags_)));
          set_has_processing_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:video_server_protocol.ContainerInitSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_server_protocol.ContainerInitSettings)
  return false;
#undef DO_
}

void ContainerInitSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_server_protocol.ContainerInitSettings)
  // required uint64 sensor_id = 1;
  if (has_sensor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sensor_id(), output);
  }

  // required uint64 profile_id = 2;
  if (has_profile_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->profile_id(), output);
  }

  // required string source_url = 3;
  if (has_source_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_url().data(), this->source_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.ContainerInitSettings.source_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->source_url(), output);
  }

  // required string processing_id = 4;
  if (has_processing_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->processing_id().data(), this->processing_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.ContainerInitSettings.processing_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->processing_id(), output);
  }

  // required string processing_name = 5;
  if (has_processing_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->processing_name().data(), this->processing_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.ContainerInitSettings.processing_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->processing_name(), output);
  }

  // repeated .video_server_protocol.ContainerDpfObjreprMap dpf_objrepr_map = 6;
  for (unsigned int i = 0, n = this->dpf_objrepr_map_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->dpf_objrepr_map(i), output);
  }

  // required string intervideosink_channel_name = 7;
  if (has_intervideosink_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->intervideosink_channel_name().data(), this->intervideosink_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.ContainerInitSettings.intervideosink_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->intervideosink_channel_name(), output);
  }

  // required string shm_rtp_stream_caps = 8;
  if (has_shm_rtp_stream_caps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shm_rtp_stream_caps().data(), this->shm_rtp_stream_caps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.ContainerInitSettings.shm_rtp_stream_caps");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->shm_rtp_stream_caps(), output);
  }

  // required string shm_rtp_stream_encoding = 9;
  if (has_shm_rtp_stream_encoding()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shm_rtp_stream_encoding().data(), this->shm_rtp_stream_encoding().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.ContainerInitSettings.shm_rtp_stream_encoding");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->shm_rtp_stream_encoding(), output);
  }

  // repeated .video_server_protocol.FilterPluginMetadata plugins = 10;
  for (unsigned int i = 0, n = this->plugins_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->plugins(i), output);
  }

  // required string VideoReceiverRtpPayloadSocket = 11;
  if (has_videoreceiverrtppayloadsocket()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->videoreceiverrtppayloadsocket().data(), this->videoreceiverrtppayloadsocket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.ContainerInitSettings.VideoReceiverRtpPayloadSocket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->videoreceiverrtppayloadsocket(), output);
  }

  // required int32 processing_flags = 12;
  if (has_processing_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->processing_flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_server_protocol.ContainerInitSettings)
}

::google::protobuf::uint8* ContainerInitSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_server_protocol.ContainerInitSettings)
  // required uint64 sensor_id = 1;
  if (has_sensor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sensor_id(), target);
  }

  // required uint64 profile_id = 2;
  if (has_profile_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->profile_id(), target);
  }

  // required string source_url = 3;
  if (has_source_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_url().data(), this->source_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.ContainerInitSettings.source_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->source_url(), target);
  }

  // required string processing_id = 4;
  if (has_processing_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->processing_id().data(), this->processing_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.ContainerInitSettings.processing_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->processing_id(), target);
  }

  // required string processing_name = 5;
  if (has_processing_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->processing_name().data(), this->processing_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.ContainerInitSettings.processing_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->processing_name(), target);
  }

  // repeated .video_server_protocol.ContainerDpfObjreprMap dpf_objrepr_map = 6;
  for (unsigned int i = 0, n = this->dpf_objrepr_map_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->dpf_objrepr_map(i), false, target);
  }

  // required string intervideosink_channel_name = 7;
  if (has_intervideosink_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->intervideosink_channel_name().data(), this->intervideosink_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.ContainerInitSettings.intervideosink_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->intervideosink_channel_name(), target);
  }

  // required string shm_rtp_stream_caps = 8;
  if (has_shm_rtp_stream_caps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shm_rtp_stream_caps().data(), this->shm_rtp_stream_caps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.ContainerInitSettings.shm_rtp_stream_caps");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->shm_rtp_stream_caps(), target);
  }

  // required string shm_rtp_stream_encoding = 9;
  if (has_shm_rtp_stream_encoding()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shm_rtp_stream_encoding().data(), this->shm_rtp_stream_encoding().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.ContainerInitSettings.shm_rtp_stream_encoding");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->shm_rtp_stream_encoding(), target);
  }

  // repeated .video_server_protocol.FilterPluginMetadata plugins = 10;
  for (unsigned int i = 0, n = this->plugins_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->plugins(i), false, target);
  }

  // required string VideoReceiverRtpPayloadSocket = 11;
  if (has_videoreceiverrtppayloadsocket()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->videoreceiverrtppayloadsocket().data(), this->videoreceiverrtppayloadsocket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.ContainerInitSettings.VideoReceiverRtpPayloadSocket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->videoreceiverrtppayloadsocket(), target);
  }

  // required int32 processing_flags = 12;
  if (has_processing_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->processing_flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_server_protocol.ContainerInitSettings)
  return target;
}

int ContainerInitSettings::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:video_server_protocol.ContainerInitSettings)
  int total_size = 0;

  if (has_sensor_id()) {
    // required uint64 sensor_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sensor_id());
  }

  if (has_profile_id()) {
    // required uint64 profile_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->profile_id());
  }

  if (has_source_url()) {
    // required string source_url = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_url());
  }

  if (has_processing_id()) {
    // required string processing_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->processing_id());
  }

  if (has_processing_name()) {
    // required string processing_name = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->processing_name());
  }

  if (has_intervideosink_channel_name()) {
    // required string intervideosink_channel_name = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->intervideosink_channel_name());
  }

  if (has_shm_rtp_stream_caps()) {
    // required string shm_rtp_stream_caps = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->shm_rtp_stream_caps());
  }

  if (has_shm_rtp_stream_encoding()) {
    // required string shm_rtp_stream_encoding = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->shm_rtp_stream_encoding());
  }

  if (has_videoreceiverrtppayloadsocket()) {
    // required string VideoReceiverRtpPayloadSocket = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->videoreceiverrtppayloadsocket());
  }

  if (has_processing_flags()) {
    // required int32 processing_flags = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->processing_flags());
  }

  return total_size;
}
int ContainerInitSettings::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:video_server_protocol.ContainerInitSettings)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000ddf) ^ 0x00000ddf) == 0) {  // All required fields are present.
    // required uint64 sensor_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sensor_id());

    // required uint64 profile_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->profile_id());

    // required string source_url = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_url());

    // required string processing_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->processing_id());

    // required string processing_name = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->processing_name());

    // required string intervideosink_channel_name = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->intervideosink_channel_name());

    // required string shm_rtp_stream_caps = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->shm_rtp_stream_caps());

    // required string shm_rtp_stream_encoding = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->shm_rtp_stream_encoding());

    // required string VideoReceiverRtpPayloadSocket = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->videoreceiverrtppayloadsocket());

    // required int32 processing_flags = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->processing_flags());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .video_server_protocol.ContainerDpfObjreprMap dpf_objrepr_map = 6;
  total_size += 1 * this->dpf_objrepr_map_size();
  for (int i = 0; i < this->dpf_objrepr_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dpf_objrepr_map(i));
  }

  // repeated .video_server_protocol.FilterPluginMetadata plugins = 10;
  total_size += 1 * this->plugins_size();
  for (int i = 0; i < this->plugins_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->plugins(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerInitSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:video_server_protocol.ContainerInitSettings)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ContainerInitSettings* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ContainerInitSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:video_server_protocol.ContainerInitSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:video_server_protocol.ContainerInitSettings)
    MergeFrom(*source);
  }
}

void ContainerInitSettings::MergeFrom(const ContainerInitSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video_server_protocol.ContainerInitSettings)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  dpf_objrepr_map_.MergeFrom(from.dpf_objrepr_map_);
  plugins_.MergeFrom(from.plugins_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sensor_id()) {
      set_sensor_id(from.sensor_id());
    }
    if (from.has_profile_id()) {
      set_profile_id(from.profile_id());
    }
    if (from.has_source_url()) {
      set_has_source_url();
      source_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_url_);
    }
    if (from.has_processing_id()) {
      set_has_processing_id();
      processing_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.processing_id_);
    }
    if (from.has_processing_name()) {
      set_has_processing_name();
      processing_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.processing_name_);
    }
    if (from.has_intervideosink_channel_name()) {
      set_has_intervideosink_channel_name();
      intervideosink_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.intervideosink_channel_name_);
    }
    if (from.has_shm_rtp_stream_caps()) {
      set_has_shm_rtp_stream_caps();
      shm_rtp_stream_caps_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shm_rtp_stream_caps_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_shm_rtp_stream_encoding()) {
      set_has_shm_rtp_stream_encoding();
      shm_rtp_stream_encoding_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shm_rtp_stream_encoding_);
    }
    if (from.has_videoreceiverrtppayloadsocket()) {
      set_has_videoreceiverrtppayloadsocket();
      videoreceiverrtppayloadsocket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.videoreceiverrtppayloadsocket_);
    }
    if (from.has_processing_flags()) {
      set_processing_flags(from.processing_flags());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ContainerInitSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:video_server_protocol.ContainerInitSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerInitSettings::CopyFrom(const ContainerInitSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video_server_protocol.ContainerInitSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerInitSettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000ddf) != 0x00000ddf) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->dpf_objrepr_map())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->plugins())) return false;
  return true;
}

void ContainerInitSettings::Swap(ContainerInitSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContainerInitSettings::InternalSwap(ContainerInitSettings* other) {
  std::swap(sensor_id_, other->sensor_id_);
  std::swap(profile_id_, other->profile_id_);
  source_url_.Swap(&other->source_url_);
  processing_id_.Swap(&other->processing_id_);
  processing_name_.Swap(&other->processing_name_);
  dpf_objrepr_map_.UnsafeArenaSwap(&other->dpf_objrepr_map_);
  intervideosink_channel_name_.Swap(&other->intervideosink_channel_name_);
  shm_rtp_stream_caps_.Swap(&other->shm_rtp_stream_caps_);
  shm_rtp_stream_encoding_.Swap(&other->shm_rtp_stream_encoding_);
  plugins_.UnsafeArenaSwap(&other->plugins_);
  videoreceiverrtppayloadsocket_.Swap(&other->videoreceiverrtppayloadsocket_);
  std::swap(processing_flags_, other->processing_flags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContainerInitSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerInitSettings_descriptor_;
  metadata.reflection = ContainerInitSettings_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContainerInitSettings

// required uint64 sensor_id = 1;
bool ContainerInitSettings::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ContainerInitSettings::set_has_sensor_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ContainerInitSettings::clear_has_sensor_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ContainerInitSettings::clear_sensor_id() {
  sensor_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sensor_id();
}
 ::google::protobuf::uint64 ContainerInitSettings::sensor_id() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerInitSettings.sensor_id)
  return sensor_id_;
}
 void ContainerInitSettings::set_sensor_id(::google::protobuf::uint64 value) {
  set_has_sensor_id();
  sensor_id_ = value;
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerInitSettings.sensor_id)
}

// required uint64 profile_id = 2;
bool ContainerInitSettings::has_profile_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ContainerInitSettings::set_has_profile_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ContainerInitSettings::clear_has_profile_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ContainerInitSettings::clear_profile_id() {
  profile_id_ = GOOGLE_ULONGLONG(0);
  clear_has_profile_id();
}
 ::google::protobuf::uint64 ContainerInitSettings::profile_id() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerInitSettings.profile_id)
  return profile_id_;
}
 void ContainerInitSettings::set_profile_id(::google::protobuf::uint64 value) {
  set_has_profile_id();
  profile_id_ = value;
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerInitSettings.profile_id)
}

// required string source_url = 3;
bool ContainerInitSettings::has_source_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ContainerInitSettings::set_has_source_url() {
  _has_bits_[0] |= 0x00000004u;
}
void ContainerInitSettings::clear_has_source_url() {
  _has_bits_[0] &= ~0x00000004u;
}
void ContainerInitSettings::clear_source_url() {
  source_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_url();
}
 const ::std::string& ContainerInitSettings::source_url() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerInitSettings.source_url)
  return source_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContainerInitSettings::set_source_url(const ::std::string& value) {
  set_has_source_url();
  source_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerInitSettings.source_url)
}
 void ContainerInitSettings::set_source_url(const char* value) {
  set_has_source_url();
  source_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.ContainerInitSettings.source_url)
}
 void ContainerInitSettings::set_source_url(const char* value, size_t size) {
  set_has_source_url();
  source_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.ContainerInitSettings.source_url)
}
 ::std::string* ContainerInitSettings::mutable_source_url() {
  set_has_source_url();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerInitSettings.source_url)
  return source_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ContainerInitSettings::release_source_url() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ContainerInitSettings.source_url)
  clear_has_source_url();
  return source_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContainerInitSettings::set_allocated_source_url(::std::string* source_url) {
  if (source_url != NULL) {
    set_has_source_url();
  } else {
    clear_has_source_url();
  }
  source_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_url);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ContainerInitSettings.source_url)
}

// required string processing_id = 4;
bool ContainerInitSettings::has_processing_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ContainerInitSettings::set_has_processing_id() {
  _has_bits_[0] |= 0x00000008u;
}
void ContainerInitSettings::clear_has_processing_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void ContainerInitSettings::clear_processing_id() {
  processing_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_processing_id();
}
 const ::std::string& ContainerInitSettings::processing_id() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerInitSettings.processing_id)
  return processing_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContainerInitSettings::set_processing_id(const ::std::string& value) {
  set_has_processing_id();
  processing_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerInitSettings.processing_id)
}
 void ContainerInitSettings::set_processing_id(const char* value) {
  set_has_processing_id();
  processing_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.ContainerInitSettings.processing_id)
}
 void ContainerInitSettings::set_processing_id(const char* value, size_t size) {
  set_has_processing_id();
  processing_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.ContainerInitSettings.processing_id)
}
 ::std::string* ContainerInitSettings::mutable_processing_id() {
  set_has_processing_id();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerInitSettings.processing_id)
  return processing_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ContainerInitSettings::release_processing_id() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ContainerInitSettings.processing_id)
  clear_has_processing_id();
  return processing_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContainerInitSettings::set_allocated_processing_id(::std::string* processing_id) {
  if (processing_id != NULL) {
    set_has_processing_id();
  } else {
    clear_has_processing_id();
  }
  processing_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), processing_id);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ContainerInitSettings.processing_id)
}

// required string processing_name = 5;
bool ContainerInitSettings::has_processing_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ContainerInitSettings::set_has_processing_name() {
  _has_bits_[0] |= 0x00000010u;
}
void ContainerInitSettings::clear_has_processing_name() {
  _has_bits_[0] &= ~0x00000010u;
}
void ContainerInitSettings::clear_processing_name() {
  processing_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_processing_name();
}
 const ::std::string& ContainerInitSettings::processing_name() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerInitSettings.processing_name)
  return processing_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContainerInitSettings::set_processing_name(const ::std::string& value) {
  set_has_processing_name();
  processing_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerInitSettings.processing_name)
}
 void ContainerInitSettings::set_processing_name(const char* value) {
  set_has_processing_name();
  processing_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.ContainerInitSettings.processing_name)
}
 void ContainerInitSettings::set_processing_name(const char* value, size_t size) {
  set_has_processing_name();
  processing_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.ContainerInitSettings.processing_name)
}
 ::std::string* ContainerInitSettings::mutable_processing_name() {
  set_has_processing_name();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerInitSettings.processing_name)
  return processing_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ContainerInitSettings::release_processing_name() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ContainerInitSettings.processing_name)
  clear_has_processing_name();
  return processing_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContainerInitSettings::set_allocated_processing_name(::std::string* processing_name) {
  if (processing_name != NULL) {
    set_has_processing_name();
  } else {
    clear_has_processing_name();
  }
  processing_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), processing_name);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ContainerInitSettings.processing_name)
}

// repeated .video_server_protocol.ContainerDpfObjreprMap dpf_objrepr_map = 6;
int ContainerInitSettings::dpf_objrepr_map_size() const {
  return dpf_objrepr_map_.size();
}
void ContainerInitSettings::clear_dpf_objrepr_map() {
  dpf_objrepr_map_.Clear();
}
const ::video_server_protocol::ContainerDpfObjreprMap& ContainerInitSettings::dpf_objrepr_map(int index) const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerInitSettings.dpf_objrepr_map)
  return dpf_objrepr_map_.Get(index);
}
::video_server_protocol::ContainerDpfObjreprMap* ContainerInitSettings::mutable_dpf_objrepr_map(int index) {
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerInitSettings.dpf_objrepr_map)
  return dpf_objrepr_map_.Mutable(index);
}
::video_server_protocol::ContainerDpfObjreprMap* ContainerInitSettings::add_dpf_objrepr_map() {
  // @@protoc_insertion_point(field_add:video_server_protocol.ContainerInitSettings.dpf_objrepr_map)
  return dpf_objrepr_map_.Add();
}
::google::protobuf::RepeatedPtrField< ::video_server_protocol::ContainerDpfObjreprMap >*
ContainerInitSettings::mutable_dpf_objrepr_map() {
  // @@protoc_insertion_point(field_mutable_list:video_server_protocol.ContainerInitSettings.dpf_objrepr_map)
  return &dpf_objrepr_map_;
}
const ::google::protobuf::RepeatedPtrField< ::video_server_protocol::ContainerDpfObjreprMap >&
ContainerInitSettings::dpf_objrepr_map() const {
  // @@protoc_insertion_point(field_list:video_server_protocol.ContainerInitSettings.dpf_objrepr_map)
  return dpf_objrepr_map_;
}

// required string intervideosink_channel_name = 7;
bool ContainerInitSettings::has_intervideosink_channel_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ContainerInitSettings::set_has_intervideosink_channel_name() {
  _has_bits_[0] |= 0x00000040u;
}
void ContainerInitSettings::clear_has_intervideosink_channel_name() {
  _has_bits_[0] &= ~0x00000040u;
}
void ContainerInitSettings::clear_intervideosink_channel_name() {
  intervideosink_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_intervideosink_channel_name();
}
 const ::std::string& ContainerInitSettings::intervideosink_channel_name() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerInitSettings.intervideosink_channel_name)
  return intervideosink_channel_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContainerInitSettings::set_intervideosink_channel_name(const ::std::string& value) {
  set_has_intervideosink_channel_name();
  intervideosink_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerInitSettings.intervideosink_channel_name)
}
 void ContainerInitSettings::set_intervideosink_channel_name(const char* value) {
  set_has_intervideosink_channel_name();
  intervideosink_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.ContainerInitSettings.intervideosink_channel_name)
}
 void ContainerInitSettings::set_intervideosink_channel_name(const char* value, size_t size) {
  set_has_intervideosink_channel_name();
  intervideosink_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.ContainerInitSettings.intervideosink_channel_name)
}
 ::std::string* ContainerInitSettings::mutable_intervideosink_channel_name() {
  set_has_intervideosink_channel_name();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerInitSettings.intervideosink_channel_name)
  return intervideosink_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ContainerInitSettings::release_intervideosink_channel_name() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ContainerInitSettings.intervideosink_channel_name)
  clear_has_intervideosink_channel_name();
  return intervideosink_channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContainerInitSettings::set_allocated_intervideosink_channel_name(::std::string* intervideosink_channel_name) {
  if (intervideosink_channel_name != NULL) {
    set_has_intervideosink_channel_name();
  } else {
    clear_has_intervideosink_channel_name();
  }
  intervideosink_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), intervideosink_channel_name);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ContainerInitSettings.intervideosink_channel_name)
}

// required string shm_rtp_stream_caps = 8;
bool ContainerInitSettings::has_shm_rtp_stream_caps() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ContainerInitSettings::set_has_shm_rtp_stream_caps() {
  _has_bits_[0] |= 0x00000080u;
}
void ContainerInitSettings::clear_has_shm_rtp_stream_caps() {
  _has_bits_[0] &= ~0x00000080u;
}
void ContainerInitSettings::clear_shm_rtp_stream_caps() {
  shm_rtp_stream_caps_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_shm_rtp_stream_caps();
}
 const ::std::string& ContainerInitSettings::shm_rtp_stream_caps() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerInitSettings.shm_rtp_stream_caps)
  return shm_rtp_stream_caps_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContainerInitSettings::set_shm_rtp_stream_caps(const ::std::string& value) {
  set_has_shm_rtp_stream_caps();
  shm_rtp_stream_caps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerInitSettings.shm_rtp_stream_caps)
}
 void ContainerInitSettings::set_shm_rtp_stream_caps(const char* value) {
  set_has_shm_rtp_stream_caps();
  shm_rtp_stream_caps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.ContainerInitSettings.shm_rtp_stream_caps)
}
 void ContainerInitSettings::set_shm_rtp_stream_caps(const char* value, size_t size) {
  set_has_shm_rtp_stream_caps();
  shm_rtp_stream_caps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.ContainerInitSettings.shm_rtp_stream_caps)
}
 ::std::string* ContainerInitSettings::mutable_shm_rtp_stream_caps() {
  set_has_shm_rtp_stream_caps();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerInitSettings.shm_rtp_stream_caps)
  return shm_rtp_stream_caps_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ContainerInitSettings::release_shm_rtp_stream_caps() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ContainerInitSettings.shm_rtp_stream_caps)
  clear_has_shm_rtp_stream_caps();
  return shm_rtp_stream_caps_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContainerInitSettings::set_allocated_shm_rtp_stream_caps(::std::string* shm_rtp_stream_caps) {
  if (shm_rtp_stream_caps != NULL) {
    set_has_shm_rtp_stream_caps();
  } else {
    clear_has_shm_rtp_stream_caps();
  }
  shm_rtp_stream_caps_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shm_rtp_stream_caps);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ContainerInitSettings.shm_rtp_stream_caps)
}

// required string shm_rtp_stream_encoding = 9;
bool ContainerInitSettings::has_shm_rtp_stream_encoding() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ContainerInitSettings::set_has_shm_rtp_stream_encoding() {
  _has_bits_[0] |= 0x00000100u;
}
void ContainerInitSettings::clear_has_shm_rtp_stream_encoding() {
  _has_bits_[0] &= ~0x00000100u;
}
void ContainerInitSettings::clear_shm_rtp_stream_encoding() {
  shm_rtp_stream_encoding_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_shm_rtp_stream_encoding();
}
 const ::std::string& ContainerInitSettings::shm_rtp_stream_encoding() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerInitSettings.shm_rtp_stream_encoding)
  return shm_rtp_stream_encoding_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContainerInitSettings::set_shm_rtp_stream_encoding(const ::std::string& value) {
  set_has_shm_rtp_stream_encoding();
  shm_rtp_stream_encoding_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerInitSettings.shm_rtp_stream_encoding)
}
 void ContainerInitSettings::set_shm_rtp_stream_encoding(const char* value) {
  set_has_shm_rtp_stream_encoding();
  shm_rtp_stream_encoding_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.ContainerInitSettings.shm_rtp_stream_encoding)
}
 void ContainerInitSettings::set_shm_rtp_stream_encoding(const char* value, size_t size) {
  set_has_shm_rtp_stream_encoding();
  shm_rtp_stream_encoding_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.ContainerInitSettings.shm_rtp_stream_encoding)
}
 ::std::string* ContainerInitSettings::mutable_shm_rtp_stream_encoding() {
  set_has_shm_rtp_stream_encoding();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerInitSettings.shm_rtp_stream_encoding)
  return shm_rtp_stream_encoding_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ContainerInitSettings::release_shm_rtp_stream_encoding() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ContainerInitSettings.shm_rtp_stream_encoding)
  clear_has_shm_rtp_stream_encoding();
  return shm_rtp_stream_encoding_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContainerInitSettings::set_allocated_shm_rtp_stream_encoding(::std::string* shm_rtp_stream_encoding) {
  if (shm_rtp_stream_encoding != NULL) {
    set_has_shm_rtp_stream_encoding();
  } else {
    clear_has_shm_rtp_stream_encoding();
  }
  shm_rtp_stream_encoding_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shm_rtp_stream_encoding);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ContainerInitSettings.shm_rtp_stream_encoding)
}

// repeated .video_server_protocol.FilterPluginMetadata plugins = 10;
int ContainerInitSettings::plugins_size() const {
  return plugins_.size();
}
void ContainerInitSettings::clear_plugins() {
  plugins_.Clear();
}
const ::video_server_protocol::FilterPluginMetadata& ContainerInitSettings::plugins(int index) const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerInitSettings.plugins)
  return plugins_.Get(index);
}
::video_server_protocol::FilterPluginMetadata* ContainerInitSettings::mutable_plugins(int index) {
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerInitSettings.plugins)
  return plugins_.Mutable(index);
}
::video_server_protocol::FilterPluginMetadata* ContainerInitSettings::add_plugins() {
  // @@protoc_insertion_point(field_add:video_server_protocol.ContainerInitSettings.plugins)
  return plugins_.Add();
}
::google::protobuf::RepeatedPtrField< ::video_server_protocol::FilterPluginMetadata >*
ContainerInitSettings::mutable_plugins() {
  // @@protoc_insertion_point(field_mutable_list:video_server_protocol.ContainerInitSettings.plugins)
  return &plugins_;
}
const ::google::protobuf::RepeatedPtrField< ::video_server_protocol::FilterPluginMetadata >&
ContainerInitSettings::plugins() const {
  // @@protoc_insertion_point(field_list:video_server_protocol.ContainerInitSettings.plugins)
  return plugins_;
}

// required string VideoReceiverRtpPayloadSocket = 11;
bool ContainerInitSettings::has_videoreceiverrtppayloadsocket() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ContainerInitSettings::set_has_videoreceiverrtppayloadsocket() {
  _has_bits_[0] |= 0x00000400u;
}
void ContainerInitSettings::clear_has_videoreceiverrtppayloadsocket() {
  _has_bits_[0] &= ~0x00000400u;
}
void ContainerInitSettings::clear_videoreceiverrtppayloadsocket() {
  videoreceiverrtppayloadsocket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_videoreceiverrtppayloadsocket();
}
 const ::std::string& ContainerInitSettings::videoreceiverrtppayloadsocket() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerInitSettings.VideoReceiverRtpPayloadSocket)
  return videoreceiverrtppayloadsocket_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContainerInitSettings::set_videoreceiverrtppayloadsocket(const ::std::string& value) {
  set_has_videoreceiverrtppayloadsocket();
  videoreceiverrtppayloadsocket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerInitSettings.VideoReceiverRtpPayloadSocket)
}
 void ContainerInitSettings::set_videoreceiverrtppayloadsocket(const char* value) {
  set_has_videoreceiverrtppayloadsocket();
  videoreceiverrtppayloadsocket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.ContainerInitSettings.VideoReceiverRtpPayloadSocket)
}
 void ContainerInitSettings::set_videoreceiverrtppayloadsocket(const char* value, size_t size) {
  set_has_videoreceiverrtppayloadsocket();
  videoreceiverrtppayloadsocket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.ContainerInitSettings.VideoReceiverRtpPayloadSocket)
}
 ::std::string* ContainerInitSettings::mutable_videoreceiverrtppayloadsocket() {
  set_has_videoreceiverrtppayloadsocket();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ContainerInitSettings.VideoReceiverRtpPayloadSocket)
  return videoreceiverrtppayloadsocket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ContainerInitSettings::release_videoreceiverrtppayloadsocket() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ContainerInitSettings.VideoReceiverRtpPayloadSocket)
  clear_has_videoreceiverrtppayloadsocket();
  return videoreceiverrtppayloadsocket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContainerInitSettings::set_allocated_videoreceiverrtppayloadsocket(::std::string* videoreceiverrtppayloadsocket) {
  if (videoreceiverrtppayloadsocket != NULL) {
    set_has_videoreceiverrtppayloadsocket();
  } else {
    clear_has_videoreceiverrtppayloadsocket();
  }
  videoreceiverrtppayloadsocket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), videoreceiverrtppayloadsocket);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ContainerInitSettings.VideoReceiverRtpPayloadSocket)
}

// required int32 processing_flags = 12;
bool ContainerInitSettings::has_processing_flags() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ContainerInitSettings::set_has_processing_flags() {
  _has_bits_[0] |= 0x00000800u;
}
void ContainerInitSettings::clear_has_processing_flags() {
  _has_bits_[0] &= ~0x00000800u;
}
void ContainerInitSettings::clear_processing_flags() {
  processing_flags_ = 0;
  clear_has_processing_flags();
}
 ::google::protobuf::int32 ContainerInitSettings::processing_flags() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ContainerInitSettings.processing_flags)
  return processing_flags_;
}
 void ContainerInitSettings::set_processing_flags(::google::protobuf::int32 value) {
  set_has_processing_flags();
  processing_flags_ = value;
  // @@protoc_insertion_point(field_set:video_server_protocol.ContainerInitSettings.processing_flags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageModuleUniqueId::kIpOctetsFieldNumber;
const int MessageModuleUniqueId::kPidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageModuleUniqueId::MessageModuleUniqueId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_server_protocol.MessageModuleUniqueId)
}

void MessageModuleUniqueId::InitAsDefaultInstance() {
}

MessageModuleUniqueId::MessageModuleUniqueId(const MessageModuleUniqueId& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_server_protocol.MessageModuleUniqueId)
}

void MessageModuleUniqueId::SharedCtor() {
  _cached_size_ = 0;
  ip_octets_ = 0;
  pid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageModuleUniqueId::~MessageModuleUniqueId() {
  // @@protoc_insertion_point(destructor:video_server_protocol.MessageModuleUniqueId)
  SharedDtor();
}

void MessageModuleUniqueId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageModuleUniqueId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageModuleUniqueId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageModuleUniqueId_descriptor_;
}

const MessageModuleUniqueId& MessageModuleUniqueId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  return *default_instance_;
}

MessageModuleUniqueId* MessageModuleUniqueId::default_instance_ = NULL;

MessageModuleUniqueId* MessageModuleUniqueId::New(::google::protobuf::Arena* arena) const {
  MessageModuleUniqueId* n = new MessageModuleUniqueId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageModuleUniqueId::Clear() {
// @@protoc_insertion_point(message_clear_start:video_server_protocol.MessageModuleUniqueId)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MessageModuleUniqueId, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MessageModuleUniqueId*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ip_octets_, pid_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MessageModuleUniqueId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_server_protocol.MessageModuleUniqueId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ip_octets = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ip_octets_)));
          set_has_ip_octets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pid;
        break;
      }

      // required int32 pid = 2;
      case 2: {
        if (tag == 16) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:video_server_protocol.MessageModuleUniqueId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_server_protocol.MessageModuleUniqueId)
  return false;
#undef DO_
}

void MessageModuleUniqueId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_server_protocol.MessageModuleUniqueId)
  // required int32 ip_octets = 1;
  if (has_ip_octets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ip_octets(), output);
  }

  // required int32 pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_server_protocol.MessageModuleUniqueId)
}

::google::protobuf::uint8* MessageModuleUniqueId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_server_protocol.MessageModuleUniqueId)
  // required int32 ip_octets = 1;
  if (has_ip_octets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ip_octets(), target);
  }

  // required int32 pid = 2;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_server_protocol.MessageModuleUniqueId)
  return target;
}

int MessageModuleUniqueId::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:video_server_protocol.MessageModuleUniqueId)
  int total_size = 0;

  if (has_ip_octets()) {
    // required int32 ip_octets = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ip_octets());
  }

  if (has_pid()) {
    // required int32 pid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pid());
  }

  return total_size;
}
int MessageModuleUniqueId::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:video_server_protocol.MessageModuleUniqueId)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 ip_octets = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ip_octets());

    // required int32 pid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageModuleUniqueId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:video_server_protocol.MessageModuleUniqueId)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageModuleUniqueId* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageModuleUniqueId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:video_server_protocol.MessageModuleUniqueId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:video_server_protocol.MessageModuleUniqueId)
    MergeFrom(*source);
  }
}

void MessageModuleUniqueId::MergeFrom(const MessageModuleUniqueId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video_server_protocol.MessageModuleUniqueId)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip_octets()) {
      set_ip_octets(from.ip_octets());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MessageModuleUniqueId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:video_server_protocol.MessageModuleUniqueId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageModuleUniqueId::CopyFrom(const MessageModuleUniqueId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video_server_protocol.MessageModuleUniqueId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageModuleUniqueId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MessageModuleUniqueId::Swap(MessageModuleUniqueId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageModuleUniqueId::InternalSwap(MessageModuleUniqueId* other) {
  std::swap(ip_octets_, other->ip_octets_);
  std::swap(pid_, other->pid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageModuleUniqueId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageModuleUniqueId_descriptor_;
  metadata.reflection = MessageModuleUniqueId_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageModuleUniqueId

// required int32 ip_octets = 1;
bool MessageModuleUniqueId::has_ip_octets() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MessageModuleUniqueId::set_has_ip_octets() {
  _has_bits_[0] |= 0x00000001u;
}
void MessageModuleUniqueId::clear_has_ip_octets() {
  _has_bits_[0] &= ~0x00000001u;
}
void MessageModuleUniqueId::clear_ip_octets() {
  ip_octets_ = 0;
  clear_has_ip_octets();
}
 ::google::protobuf::int32 MessageModuleUniqueId::ip_octets() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageModuleUniqueId.ip_octets)
  return ip_octets_;
}
 void MessageModuleUniqueId::set_ip_octets(::google::protobuf::int32 value) {
  set_has_ip_octets();
  ip_octets_ = value;
  // @@protoc_insertion_point(field_set:video_server_protocol.MessageModuleUniqueId.ip_octets)
}

// required int32 pid = 2;
bool MessageModuleUniqueId::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MessageModuleUniqueId::set_has_pid() {
  _has_bits_[0] |= 0x00000002u;
}
void MessageModuleUniqueId::clear_has_pid() {
  _has_bits_[0] &= ~0x00000002u;
}
void MessageModuleUniqueId::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
 ::google::protobuf::int32 MessageModuleUniqueId::pid() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageModuleUniqueId.pid)
  return pid_;
}
 void MessageModuleUniqueId::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:video_server_protocol.MessageModuleUniqueId.pid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageHeader::kIdFieldNumber;
const int MessageHeader::kModuleNameFieldNumber;
const int MessageHeader::kLastErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageHeader::MessageHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_server_protocol.MessageHeader)
}

void MessageHeader::InitAsDefaultInstance() {
  id_ = const_cast< ::video_server_protocol::MessageModuleUniqueId*>(&::video_server_protocol::MessageModuleUniqueId::default_instance());
}

MessageHeader::MessageHeader(const MessageHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_server_protocol.MessageHeader)
}

void MessageHeader::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = NULL;
  module_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageHeader::~MessageHeader() {
  // @@protoc_insertion_point(destructor:video_server_protocol.MessageHeader)
  SharedDtor();
}

void MessageHeader::SharedDtor() {
  module_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete id_;
  }
}

void MessageHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageHeader_descriptor_;
}

const MessageHeader& MessageHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  return *default_instance_;
}

MessageHeader* MessageHeader::default_instance_ = NULL;

MessageHeader* MessageHeader::New(::google::protobuf::Arena* arena) const {
  MessageHeader* n = new MessageHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:video_server_protocol.MessageHeader)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_id()) {
      if (id_ != NULL) id_->::video_server_protocol::MessageModuleUniqueId::Clear();
    }
    if (has_module_name()) {
      module_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_last_error()) {
      last_error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MessageHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_server_protocol.MessageHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .video_server_protocol.MessageModuleUniqueId id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_module_name;
        break;
      }

      // required string module_name = 2;
      case 2: {
        if (tag == 18) {
         parse_module_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->module_name().data(), this->module_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "video_server_protocol.MessageHeader.module_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_last_error;
        break;
      }

      // optional string last_error = 3;
      case 3: {
        if (tag == 26) {
         parse_last_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_error().data(), this->last_error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "video_server_protocol.MessageHeader.last_error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:video_server_protocol.MessageHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_server_protocol.MessageHeader)
  return false;
#undef DO_
}

void MessageHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_server_protocol.MessageHeader)
  // required .video_server_protocol.MessageModuleUniqueId id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // required string module_name = 2;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.MessageHeader.module_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->module_name(), output);
  }

  // optional string last_error = 3;
  if (has_last_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_error().data(), this->last_error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.MessageHeader.last_error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->last_error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_server_protocol.MessageHeader)
}

::google::protobuf::uint8* MessageHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_server_protocol.MessageHeader)
  // required .video_server_protocol.MessageModuleUniqueId id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, false, target);
  }

  // required string module_name = 2;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.MessageHeader.module_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->module_name(), target);
  }

  // optional string last_error = 3;
  if (has_last_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_error().data(), this->last_error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.MessageHeader.last_error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->last_error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_server_protocol.MessageHeader)
  return target;
}

int MessageHeader::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:video_server_protocol.MessageHeader)
  int total_size = 0;

  if (has_id()) {
    // required .video_server_protocol.MessageModuleUniqueId id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);
  }

  if (has_module_name()) {
    // required string module_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->module_name());
  }

  return total_size;
}
int MessageHeader::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:video_server_protocol.MessageHeader)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .video_server_protocol.MessageModuleUniqueId id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);

    // required string module_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->module_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string last_error = 3;
  if (has_last_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->last_error());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:video_server_protocol.MessageHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageHeader* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:video_server_protocol.MessageHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:video_server_protocol.MessageHeader)
    MergeFrom(*source);
  }
}

void MessageHeader::MergeFrom(const MessageHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video_server_protocol.MessageHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::video_server_protocol::MessageModuleUniqueId::MergeFrom(from.id());
    }
    if (from.has_module_name()) {
      set_has_module_name();
      module_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_name_);
    }
    if (from.has_last_error()) {
      set_has_last_error();
      last_error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_error_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MessageHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:video_server_protocol.MessageHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageHeader::CopyFrom(const MessageHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video_server_protocol.MessageHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_id()) {
    if (!this->id_->IsInitialized()) return false;
  }
  return true;
}

void MessageHeader::Swap(MessageHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageHeader::InternalSwap(MessageHeader* other) {
  std::swap(id_, other->id_);
  module_name_.Swap(&other->module_name_);
  last_error_.Swap(&other->last_error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageHeader_descriptor_;
  metadata.reflection = MessageHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageHeader

// required .video_server_protocol.MessageModuleUniqueId id = 1;
bool MessageHeader::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MessageHeader::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void MessageHeader::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void MessageHeader::clear_id() {
  if (id_ != NULL) id_->::video_server_protocol::MessageModuleUniqueId::Clear();
  clear_has_id();
}
const ::video_server_protocol::MessageModuleUniqueId& MessageHeader::id() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageHeader.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
::video_server_protocol::MessageModuleUniqueId* MessageHeader::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::video_server_protocol::MessageModuleUniqueId;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageHeader.id)
  return id_;
}
::video_server_protocol::MessageModuleUniqueId* MessageHeader::release_id() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageHeader.id)
  clear_has_id();
  ::video_server_protocol::MessageModuleUniqueId* temp = id_;
  id_ = NULL;
  return temp;
}
void MessageHeader::set_allocated_id(::video_server_protocol::MessageModuleUniqueId* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageHeader.id)
}

// required string module_name = 2;
bool MessageHeader::has_module_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MessageHeader::set_has_module_name() {
  _has_bits_[0] |= 0x00000002u;
}
void MessageHeader::clear_has_module_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void MessageHeader::clear_module_name() {
  module_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_module_name();
}
 const ::std::string& MessageHeader::module_name() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageHeader.module_name)
  return module_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageHeader::set_module_name(const ::std::string& value) {
  set_has_module_name();
  module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.MessageHeader.module_name)
}
 void MessageHeader::set_module_name(const char* value) {
  set_has_module_name();
  module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.MessageHeader.module_name)
}
 void MessageHeader::set_module_name(const char* value, size_t size) {
  set_has_module_name();
  module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.MessageHeader.module_name)
}
 ::std::string* MessageHeader::mutable_module_name() {
  set_has_module_name();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageHeader.module_name)
  return module_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MessageHeader::release_module_name() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageHeader.module_name)
  clear_has_module_name();
  return module_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageHeader::set_allocated_module_name(::std::string* module_name) {
  if (module_name != NULL) {
    set_has_module_name();
  } else {
    clear_has_module_name();
  }
  module_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), module_name);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageHeader.module_name)
}

// optional string last_error = 3;
bool MessageHeader::has_last_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MessageHeader::set_has_last_error() {
  _has_bits_[0] |= 0x00000004u;
}
void MessageHeader::clear_has_last_error() {
  _has_bits_[0] &= ~0x00000004u;
}
void MessageHeader::clear_last_error() {
  last_error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_error();
}
 const ::std::string& MessageHeader::last_error() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageHeader.last_error)
  return last_error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageHeader::set_last_error(const ::std::string& value) {
  set_has_last_error();
  last_error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.MessageHeader.last_error)
}
 void MessageHeader::set_last_error(const char* value) {
  set_has_last_error();
  last_error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.MessageHeader.last_error)
}
 void MessageHeader::set_last_error(const char* value, size_t size) {
  set_has_last_error();
  last_error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.MessageHeader.last_error)
}
 ::std::string* MessageHeader::mutable_last_error() {
  set_has_last_error();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageHeader.last_error)
  return last_error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MessageHeader::release_last_error() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageHeader.last_error)
  clear_has_last_error();
  return last_error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageHeader::set_allocated_last_error(::std::string* last_error) {
  if (last_error != NULL) {
    set_has_last_error();
  } else {
    clear_has_last_error();
  }
  last_error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_error);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageHeader.last_error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageAnalyzerProxy::kHeaderFieldNumber;
const int MessageAnalyzerProxy::kMsgTypeFieldNumber;
const int MessageAnalyzerProxy::kMsgStartFieldNumber;
const int MessageAnalyzerProxy::kMsgPauseFieldNumber;
const int MessageAnalyzerProxy::kMsgResumeFieldNumber;
const int MessageAnalyzerProxy::kMsgStopFieldNumber;
const int MessageAnalyzerProxy::kMsgGetStatusFieldNumber;
const int MessageAnalyzerProxy::kMsgGetSettingsFieldNumber;
const int MessageAnalyzerProxy::kMsgGetLastErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageAnalyzerProxy::MessageAnalyzerProxy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_server_protocol.MessageAnalyzerProxy)
}

void MessageAnalyzerProxy::InitAsDefaultInstance() {
  header_ = const_cast< ::video_server_protocol::MessageHeader*>(&::video_server_protocol::MessageHeader::default_instance());
  msg_start_ = const_cast< ::video_server_protocol::MessageRequestStart*>(&::video_server_protocol::MessageRequestStart::default_instance());
  msg_pause_ = const_cast< ::video_server_protocol::MessageRequestPause*>(&::video_server_protocol::MessageRequestPause::default_instance());
  msg_resume_ = const_cast< ::video_server_protocol::MessageRequestResume*>(&::video_server_protocol::MessageRequestResume::default_instance());
  msg_stop_ = const_cast< ::video_server_protocol::MessageRequestStop*>(&::video_server_protocol::MessageRequestStop::default_instance());
  msg_get_status_ = const_cast< ::video_server_protocol::MessageRequestGetStatus*>(&::video_server_protocol::MessageRequestGetStatus::default_instance());
  msg_get_settings_ = const_cast< ::video_server_protocol::MessageRequestGetSettings*>(&::video_server_protocol::MessageRequestGetSettings::default_instance());
  msg_get_last_error_ = const_cast< ::video_server_protocol::MessageRequestGetLastError*>(&::video_server_protocol::MessageRequestGetLastError::default_instance());
}

MessageAnalyzerProxy::MessageAnalyzerProxy(const MessageAnalyzerProxy& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_server_protocol.MessageAnalyzerProxy)
}

void MessageAnalyzerProxy::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  msg_type_ = 0;
  msg_start_ = NULL;
  msg_pause_ = NULL;
  msg_resume_ = NULL;
  msg_stop_ = NULL;
  msg_get_status_ = NULL;
  msg_get_settings_ = NULL;
  msg_get_last_error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageAnalyzerProxy::~MessageAnalyzerProxy() {
  // @@protoc_insertion_point(destructor:video_server_protocol.MessageAnalyzerProxy)
  SharedDtor();
}

void MessageAnalyzerProxy::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete msg_start_;
    delete msg_pause_;
    delete msg_resume_;
    delete msg_stop_;
    delete msg_get_status_;
    delete msg_get_settings_;
    delete msg_get_last_error_;
  }
}

void MessageAnalyzerProxy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageAnalyzerProxy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageAnalyzerProxy_descriptor_;
}

const MessageAnalyzerProxy& MessageAnalyzerProxy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  return *default_instance_;
}

MessageAnalyzerProxy* MessageAnalyzerProxy::default_instance_ = NULL;

MessageAnalyzerProxy* MessageAnalyzerProxy::New(::google::protobuf::Arena* arena) const {
  MessageAnalyzerProxy* n = new MessageAnalyzerProxy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageAnalyzerProxy::Clear() {
// @@protoc_insertion_point(message_clear_start:video_server_protocol.MessageAnalyzerProxy)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_header()) {
      if (header_ != NULL) header_->::video_server_protocol::MessageHeader::Clear();
    }
    msg_type_ = 0;
    if (has_msg_start()) {
      if (msg_start_ != NULL) msg_start_->::video_server_protocol::MessageRequestStart::Clear();
    }
    if (has_msg_pause()) {
      if (msg_pause_ != NULL) msg_pause_->::video_server_protocol::MessageRequestPause::Clear();
    }
    if (has_msg_resume()) {
      if (msg_resume_ != NULL) msg_resume_->::video_server_protocol::MessageRequestResume::Clear();
    }
    if (has_msg_stop()) {
      if (msg_stop_ != NULL) msg_stop_->::video_server_protocol::MessageRequestStop::Clear();
    }
    if (has_msg_get_status()) {
      if (msg_get_status_ != NULL) msg_get_status_->::video_server_protocol::MessageRequestGetStatus::Clear();
    }
    if (has_msg_get_settings()) {
      if (msg_get_settings_ != NULL) msg_get_settings_->::video_server_protocol::MessageRequestGetSettings::Clear();
    }
  }
  if (has_msg_get_last_error()) {
    if (msg_get_last_error_ != NULL) msg_get_last_error_->::video_server_protocol::MessageRequestGetLastError::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MessageAnalyzerProxy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_server_protocol.MessageAnalyzerProxy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .video_server_protocol.MessageHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msg_type;
        break;
      }

      // required .video_server_protocol.ESyncCommandType msg_type = 2;
      case 2: {
        if (tag == 16) {
         parse_msg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::video_server_protocol::ESyncCommandType_IsValid(value)) {
            set_msg_type(static_cast< ::video_server_protocol::ESyncCommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msg_start;
        break;
      }

      // optional .video_server_protocol.MessageRequestStart msg_start = 3;
      case 3: {
        if (tag == 26) {
         parse_msg_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_start()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msg_pause;
        break;
      }

      // optional .video_server_protocol.MessageRequestPause msg_pause = 4;
      case 4: {
        if (tag == 34) {
         parse_msg_pause:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_pause()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_msg_resume;
        break;
      }

      // optional .video_server_protocol.MessageRequestResume msg_resume = 5;
      case 5: {
        if (tag == 42) {
         parse_msg_resume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_resume()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_msg_stop;
        break;
      }

      // optional .video_server_protocol.MessageRequestStop msg_stop = 6;
      case 6: {
        if (tag == 50) {
         parse_msg_stop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_stop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_msg_get_status;
        break;
      }

      // optional .video_server_protocol.MessageRequestGetStatus msg_get_status = 7;
      case 7: {
        if (tag == 58) {
         parse_msg_get_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_get_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_msg_get_settings;
        break;
      }

      // optional .video_server_protocol.MessageRequestGetSettings msg_get_settings = 8;
      case 8: {
        if (tag == 66) {
         parse_msg_get_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_get_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_msg_get_last_error;
        break;
      }

      // optional .video_server_protocol.MessageRequestGetLastError msg_get_last_error = 9;
      case 9: {
        if (tag == 74) {
         parse_msg_get_last_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_get_last_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:video_server_protocol.MessageAnalyzerProxy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_server_protocol.MessageAnalyzerProxy)
  return false;
#undef DO_
}

void MessageAnalyzerProxy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_server_protocol.MessageAnalyzerProxy)
  // required .video_server_protocol.MessageHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // required .video_server_protocol.ESyncCommandType msg_type = 2;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msg_type(), output);
  }

  // optional .video_server_protocol.MessageRequestStart msg_start = 3;
  if (has_msg_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->msg_start_, output);
  }

  // optional .video_server_protocol.MessageRequestPause msg_pause = 4;
  if (has_msg_pause()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->msg_pause_, output);
  }

  // optional .video_server_protocol.MessageRequestResume msg_resume = 5;
  if (has_msg_resume()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->msg_resume_, output);
  }

  // optional .video_server_protocol.MessageRequestStop msg_stop = 6;
  if (has_msg_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->msg_stop_, output);
  }

  // optional .video_server_protocol.MessageRequestGetStatus msg_get_status = 7;
  if (has_msg_get_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->msg_get_status_, output);
  }

  // optional .video_server_protocol.MessageRequestGetSettings msg_get_settings = 8;
  if (has_msg_get_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->msg_get_settings_, output);
  }

  // optional .video_server_protocol.MessageRequestGetLastError msg_get_last_error = 9;
  if (has_msg_get_last_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->msg_get_last_error_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_server_protocol.MessageAnalyzerProxy)
}

::google::protobuf::uint8* MessageAnalyzerProxy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_server_protocol.MessageAnalyzerProxy)
  // required .video_server_protocol.MessageHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // required .video_server_protocol.ESyncCommandType msg_type = 2;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msg_type(), target);
  }

  // optional .video_server_protocol.MessageRequestStart msg_start = 3;
  if (has_msg_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->msg_start_, false, target);
  }

  // optional .video_server_protocol.MessageRequestPause msg_pause = 4;
  if (has_msg_pause()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->msg_pause_, false, target);
  }

  // optional .video_server_protocol.MessageRequestResume msg_resume = 5;
  if (has_msg_resume()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->msg_resume_, false, target);
  }

  // optional .video_server_protocol.MessageRequestStop msg_stop = 6;
  if (has_msg_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->msg_stop_, false, target);
  }

  // optional .video_server_protocol.MessageRequestGetStatus msg_get_status = 7;
  if (has_msg_get_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->msg_get_status_, false, target);
  }

  // optional .video_server_protocol.MessageRequestGetSettings msg_get_settings = 8;
  if (has_msg_get_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->msg_get_settings_, false, target);
  }

  // optional .video_server_protocol.MessageRequestGetLastError msg_get_last_error = 9;
  if (has_msg_get_last_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->msg_get_last_error_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_server_protocol.MessageAnalyzerProxy)
  return target;
}

int MessageAnalyzerProxy::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:video_server_protocol.MessageAnalyzerProxy)
  int total_size = 0;

  if (has_header()) {
    // required .video_server_protocol.MessageHeader header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  if (has_msg_type()) {
    // required .video_server_protocol.ESyncCommandType msg_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
  }

  return total_size;
}
int MessageAnalyzerProxy::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:video_server_protocol.MessageAnalyzerProxy)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .video_server_protocol.MessageHeader header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);

    // required .video_server_protocol.ESyncCommandType msg_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 252u) {
    // optional .video_server_protocol.MessageRequestStart msg_start = 3;
    if (has_msg_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->msg_start_);
    }

    // optional .video_server_protocol.MessageRequestPause msg_pause = 4;
    if (has_msg_pause()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->msg_pause_);
    }

    // optional .video_server_protocol.MessageRequestResume msg_resume = 5;
    if (has_msg_resume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->msg_resume_);
    }

    // optional .video_server_protocol.MessageRequestStop msg_stop = 6;
    if (has_msg_stop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->msg_stop_);
    }

    // optional .video_server_protocol.MessageRequestGetStatus msg_get_status = 7;
    if (has_msg_get_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->msg_get_status_);
    }

    // optional .video_server_protocol.MessageRequestGetSettings msg_get_settings = 8;
    if (has_msg_get_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->msg_get_settings_);
    }

  }
  // optional .video_server_protocol.MessageRequestGetLastError msg_get_last_error = 9;
  if (has_msg_get_last_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_get_last_error_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageAnalyzerProxy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:video_server_protocol.MessageAnalyzerProxy)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageAnalyzerProxy* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageAnalyzerProxy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:video_server_protocol.MessageAnalyzerProxy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:video_server_protocol.MessageAnalyzerProxy)
    MergeFrom(*source);
  }
}

void MessageAnalyzerProxy::MergeFrom(const MessageAnalyzerProxy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video_server_protocol.MessageAnalyzerProxy)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::video_server_protocol::MessageHeader::MergeFrom(from.header());
    }
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_msg_start()) {
      mutable_msg_start()->::video_server_protocol::MessageRequestStart::MergeFrom(from.msg_start());
    }
    if (from.has_msg_pause()) {
      mutable_msg_pause()->::video_server_protocol::MessageRequestPause::MergeFrom(from.msg_pause());
    }
    if (from.has_msg_resume()) {
      mutable_msg_resume()->::video_server_protocol::MessageRequestResume::MergeFrom(from.msg_resume());
    }
    if (from.has_msg_stop()) {
      mutable_msg_stop()->::video_server_protocol::MessageRequestStop::MergeFrom(from.msg_stop());
    }
    if (from.has_msg_get_status()) {
      mutable_msg_get_status()->::video_server_protocol::MessageRequestGetStatus::MergeFrom(from.msg_get_status());
    }
    if (from.has_msg_get_settings()) {
      mutable_msg_get_settings()->::video_server_protocol::MessageRequestGetSettings::MergeFrom(from.msg_get_settings());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_msg_get_last_error()) {
      mutable_msg_get_last_error()->::video_server_protocol::MessageRequestGetLastError::MergeFrom(from.msg_get_last_error());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MessageAnalyzerProxy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:video_server_protocol.MessageAnalyzerProxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageAnalyzerProxy::CopyFrom(const MessageAnalyzerProxy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video_server_protocol.MessageAnalyzerProxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageAnalyzerProxy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_header()) {
    if (!this->header_->IsInitialized()) return false;
  }
  if (has_msg_start()) {
    if (!this->msg_start_->IsInitialized()) return false;
  }
  return true;
}

void MessageAnalyzerProxy::Swap(MessageAnalyzerProxy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageAnalyzerProxy::InternalSwap(MessageAnalyzerProxy* other) {
  std::swap(header_, other->header_);
  std::swap(msg_type_, other->msg_type_);
  std::swap(msg_start_, other->msg_start_);
  std::swap(msg_pause_, other->msg_pause_);
  std::swap(msg_resume_, other->msg_resume_);
  std::swap(msg_stop_, other->msg_stop_);
  std::swap(msg_get_status_, other->msg_get_status_);
  std::swap(msg_get_settings_, other->msg_get_settings_);
  std::swap(msg_get_last_error_, other->msg_get_last_error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageAnalyzerProxy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageAnalyzerProxy_descriptor_;
  metadata.reflection = MessageAnalyzerProxy_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageAnalyzerProxy

// required .video_server_protocol.MessageHeader header = 1;
bool MessageAnalyzerProxy::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MessageAnalyzerProxy::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void MessageAnalyzerProxy::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void MessageAnalyzerProxy::clear_header() {
  if (header_ != NULL) header_->::video_server_protocol::MessageHeader::Clear();
  clear_has_header();
}
const ::video_server_protocol::MessageHeader& MessageAnalyzerProxy::header() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerProxy.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::video_server_protocol::MessageHeader* MessageAnalyzerProxy::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::video_server_protocol::MessageHeader;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerProxy.header)
  return header_;
}
::video_server_protocol::MessageHeader* MessageAnalyzerProxy::release_header() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerProxy.header)
  clear_has_header();
  ::video_server_protocol::MessageHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void MessageAnalyzerProxy::set_allocated_header(::video_server_protocol::MessageHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerProxy.header)
}

// required .video_server_protocol.ESyncCommandType msg_type = 2;
bool MessageAnalyzerProxy::has_msg_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MessageAnalyzerProxy::set_has_msg_type() {
  _has_bits_[0] |= 0x00000002u;
}
void MessageAnalyzerProxy::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void MessageAnalyzerProxy::clear_msg_type() {
  msg_type_ = 0;
  clear_has_msg_type();
}
 ::video_server_protocol::ESyncCommandType MessageAnalyzerProxy::msg_type() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerProxy.msg_type)
  return static_cast< ::video_server_protocol::ESyncCommandType >(msg_type_);
}
 void MessageAnalyzerProxy::set_msg_type(::video_server_protocol::ESyncCommandType value) {
  assert(::video_server_protocol::ESyncCommandType_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:video_server_protocol.MessageAnalyzerProxy.msg_type)
}

// optional .video_server_protocol.MessageRequestStart msg_start = 3;
bool MessageAnalyzerProxy::has_msg_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MessageAnalyzerProxy::set_has_msg_start() {
  _has_bits_[0] |= 0x00000004u;
}
void MessageAnalyzerProxy::clear_has_msg_start() {
  _has_bits_[0] &= ~0x00000004u;
}
void MessageAnalyzerProxy::clear_msg_start() {
  if (msg_start_ != NULL) msg_start_->::video_server_protocol::MessageRequestStart::Clear();
  clear_has_msg_start();
}
const ::video_server_protocol::MessageRequestStart& MessageAnalyzerProxy::msg_start() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerProxy.msg_start)
  return msg_start_ != NULL ? *msg_start_ : *default_instance_->msg_start_;
}
::video_server_protocol::MessageRequestStart* MessageAnalyzerProxy::mutable_msg_start() {
  set_has_msg_start();
  if (msg_start_ == NULL) {
    msg_start_ = new ::video_server_protocol::MessageRequestStart;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerProxy.msg_start)
  return msg_start_;
}
::video_server_protocol::MessageRequestStart* MessageAnalyzerProxy::release_msg_start() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerProxy.msg_start)
  clear_has_msg_start();
  ::video_server_protocol::MessageRequestStart* temp = msg_start_;
  msg_start_ = NULL;
  return temp;
}
void MessageAnalyzerProxy::set_allocated_msg_start(::video_server_protocol::MessageRequestStart* msg_start) {
  delete msg_start_;
  msg_start_ = msg_start;
  if (msg_start) {
    set_has_msg_start();
  } else {
    clear_has_msg_start();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerProxy.msg_start)
}

// optional .video_server_protocol.MessageRequestPause msg_pause = 4;
bool MessageAnalyzerProxy::has_msg_pause() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MessageAnalyzerProxy::set_has_msg_pause() {
  _has_bits_[0] |= 0x00000008u;
}
void MessageAnalyzerProxy::clear_has_msg_pause() {
  _has_bits_[0] &= ~0x00000008u;
}
void MessageAnalyzerProxy::clear_msg_pause() {
  if (msg_pause_ != NULL) msg_pause_->::video_server_protocol::MessageRequestPause::Clear();
  clear_has_msg_pause();
}
const ::video_server_protocol::MessageRequestPause& MessageAnalyzerProxy::msg_pause() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerProxy.msg_pause)
  return msg_pause_ != NULL ? *msg_pause_ : *default_instance_->msg_pause_;
}
::video_server_protocol::MessageRequestPause* MessageAnalyzerProxy::mutable_msg_pause() {
  set_has_msg_pause();
  if (msg_pause_ == NULL) {
    msg_pause_ = new ::video_server_protocol::MessageRequestPause;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerProxy.msg_pause)
  return msg_pause_;
}
::video_server_protocol::MessageRequestPause* MessageAnalyzerProxy::release_msg_pause() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerProxy.msg_pause)
  clear_has_msg_pause();
  ::video_server_protocol::MessageRequestPause* temp = msg_pause_;
  msg_pause_ = NULL;
  return temp;
}
void MessageAnalyzerProxy::set_allocated_msg_pause(::video_server_protocol::MessageRequestPause* msg_pause) {
  delete msg_pause_;
  msg_pause_ = msg_pause;
  if (msg_pause) {
    set_has_msg_pause();
  } else {
    clear_has_msg_pause();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerProxy.msg_pause)
}

// optional .video_server_protocol.MessageRequestResume msg_resume = 5;
bool MessageAnalyzerProxy::has_msg_resume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MessageAnalyzerProxy::set_has_msg_resume() {
  _has_bits_[0] |= 0x00000010u;
}
void MessageAnalyzerProxy::clear_has_msg_resume() {
  _has_bits_[0] &= ~0x00000010u;
}
void MessageAnalyzerProxy::clear_msg_resume() {
  if (msg_resume_ != NULL) msg_resume_->::video_server_protocol::MessageRequestResume::Clear();
  clear_has_msg_resume();
}
const ::video_server_protocol::MessageRequestResume& MessageAnalyzerProxy::msg_resume() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerProxy.msg_resume)
  return msg_resume_ != NULL ? *msg_resume_ : *default_instance_->msg_resume_;
}
::video_server_protocol::MessageRequestResume* MessageAnalyzerProxy::mutable_msg_resume() {
  set_has_msg_resume();
  if (msg_resume_ == NULL) {
    msg_resume_ = new ::video_server_protocol::MessageRequestResume;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerProxy.msg_resume)
  return msg_resume_;
}
::video_server_protocol::MessageRequestResume* MessageAnalyzerProxy::release_msg_resume() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerProxy.msg_resume)
  clear_has_msg_resume();
  ::video_server_protocol::MessageRequestResume* temp = msg_resume_;
  msg_resume_ = NULL;
  return temp;
}
void MessageAnalyzerProxy::set_allocated_msg_resume(::video_server_protocol::MessageRequestResume* msg_resume) {
  delete msg_resume_;
  msg_resume_ = msg_resume;
  if (msg_resume) {
    set_has_msg_resume();
  } else {
    clear_has_msg_resume();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerProxy.msg_resume)
}

// optional .video_server_protocol.MessageRequestStop msg_stop = 6;
bool MessageAnalyzerProxy::has_msg_stop() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MessageAnalyzerProxy::set_has_msg_stop() {
  _has_bits_[0] |= 0x00000020u;
}
void MessageAnalyzerProxy::clear_has_msg_stop() {
  _has_bits_[0] &= ~0x00000020u;
}
void MessageAnalyzerProxy::clear_msg_stop() {
  if (msg_stop_ != NULL) msg_stop_->::video_server_protocol::MessageRequestStop::Clear();
  clear_has_msg_stop();
}
const ::video_server_protocol::MessageRequestStop& MessageAnalyzerProxy::msg_stop() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerProxy.msg_stop)
  return msg_stop_ != NULL ? *msg_stop_ : *default_instance_->msg_stop_;
}
::video_server_protocol::MessageRequestStop* MessageAnalyzerProxy::mutable_msg_stop() {
  set_has_msg_stop();
  if (msg_stop_ == NULL) {
    msg_stop_ = new ::video_server_protocol::MessageRequestStop;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerProxy.msg_stop)
  return msg_stop_;
}
::video_server_protocol::MessageRequestStop* MessageAnalyzerProxy::release_msg_stop() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerProxy.msg_stop)
  clear_has_msg_stop();
  ::video_server_protocol::MessageRequestStop* temp = msg_stop_;
  msg_stop_ = NULL;
  return temp;
}
void MessageAnalyzerProxy::set_allocated_msg_stop(::video_server_protocol::MessageRequestStop* msg_stop) {
  delete msg_stop_;
  msg_stop_ = msg_stop;
  if (msg_stop) {
    set_has_msg_stop();
  } else {
    clear_has_msg_stop();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerProxy.msg_stop)
}

// optional .video_server_protocol.MessageRequestGetStatus msg_get_status = 7;
bool MessageAnalyzerProxy::has_msg_get_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MessageAnalyzerProxy::set_has_msg_get_status() {
  _has_bits_[0] |= 0x00000040u;
}
void MessageAnalyzerProxy::clear_has_msg_get_status() {
  _has_bits_[0] &= ~0x00000040u;
}
void MessageAnalyzerProxy::clear_msg_get_status() {
  if (msg_get_status_ != NULL) msg_get_status_->::video_server_protocol::MessageRequestGetStatus::Clear();
  clear_has_msg_get_status();
}
const ::video_server_protocol::MessageRequestGetStatus& MessageAnalyzerProxy::msg_get_status() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerProxy.msg_get_status)
  return msg_get_status_ != NULL ? *msg_get_status_ : *default_instance_->msg_get_status_;
}
::video_server_protocol::MessageRequestGetStatus* MessageAnalyzerProxy::mutable_msg_get_status() {
  set_has_msg_get_status();
  if (msg_get_status_ == NULL) {
    msg_get_status_ = new ::video_server_protocol::MessageRequestGetStatus;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerProxy.msg_get_status)
  return msg_get_status_;
}
::video_server_protocol::MessageRequestGetStatus* MessageAnalyzerProxy::release_msg_get_status() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerProxy.msg_get_status)
  clear_has_msg_get_status();
  ::video_server_protocol::MessageRequestGetStatus* temp = msg_get_status_;
  msg_get_status_ = NULL;
  return temp;
}
void MessageAnalyzerProxy::set_allocated_msg_get_status(::video_server_protocol::MessageRequestGetStatus* msg_get_status) {
  delete msg_get_status_;
  msg_get_status_ = msg_get_status;
  if (msg_get_status) {
    set_has_msg_get_status();
  } else {
    clear_has_msg_get_status();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerProxy.msg_get_status)
}

// optional .video_server_protocol.MessageRequestGetSettings msg_get_settings = 8;
bool MessageAnalyzerProxy::has_msg_get_settings() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MessageAnalyzerProxy::set_has_msg_get_settings() {
  _has_bits_[0] |= 0x00000080u;
}
void MessageAnalyzerProxy::clear_has_msg_get_settings() {
  _has_bits_[0] &= ~0x00000080u;
}
void MessageAnalyzerProxy::clear_msg_get_settings() {
  if (msg_get_settings_ != NULL) msg_get_settings_->::video_server_protocol::MessageRequestGetSettings::Clear();
  clear_has_msg_get_settings();
}
const ::video_server_protocol::MessageRequestGetSettings& MessageAnalyzerProxy::msg_get_settings() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerProxy.msg_get_settings)
  return msg_get_settings_ != NULL ? *msg_get_settings_ : *default_instance_->msg_get_settings_;
}
::video_server_protocol::MessageRequestGetSettings* MessageAnalyzerProxy::mutable_msg_get_settings() {
  set_has_msg_get_settings();
  if (msg_get_settings_ == NULL) {
    msg_get_settings_ = new ::video_server_protocol::MessageRequestGetSettings;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerProxy.msg_get_settings)
  return msg_get_settings_;
}
::video_server_protocol::MessageRequestGetSettings* MessageAnalyzerProxy::release_msg_get_settings() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerProxy.msg_get_settings)
  clear_has_msg_get_settings();
  ::video_server_protocol::MessageRequestGetSettings* temp = msg_get_settings_;
  msg_get_settings_ = NULL;
  return temp;
}
void MessageAnalyzerProxy::set_allocated_msg_get_settings(::video_server_protocol::MessageRequestGetSettings* msg_get_settings) {
  delete msg_get_settings_;
  msg_get_settings_ = msg_get_settings;
  if (msg_get_settings) {
    set_has_msg_get_settings();
  } else {
    clear_has_msg_get_settings();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerProxy.msg_get_settings)
}

// optional .video_server_protocol.MessageRequestGetLastError msg_get_last_error = 9;
bool MessageAnalyzerProxy::has_msg_get_last_error() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void MessageAnalyzerProxy::set_has_msg_get_last_error() {
  _has_bits_[0] |= 0x00000100u;
}
void MessageAnalyzerProxy::clear_has_msg_get_last_error() {
  _has_bits_[0] &= ~0x00000100u;
}
void MessageAnalyzerProxy::clear_msg_get_last_error() {
  if (msg_get_last_error_ != NULL) msg_get_last_error_->::video_server_protocol::MessageRequestGetLastError::Clear();
  clear_has_msg_get_last_error();
}
const ::video_server_protocol::MessageRequestGetLastError& MessageAnalyzerProxy::msg_get_last_error() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerProxy.msg_get_last_error)
  return msg_get_last_error_ != NULL ? *msg_get_last_error_ : *default_instance_->msg_get_last_error_;
}
::video_server_protocol::MessageRequestGetLastError* MessageAnalyzerProxy::mutable_msg_get_last_error() {
  set_has_msg_get_last_error();
  if (msg_get_last_error_ == NULL) {
    msg_get_last_error_ = new ::video_server_protocol::MessageRequestGetLastError;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerProxy.msg_get_last_error)
  return msg_get_last_error_;
}
::video_server_protocol::MessageRequestGetLastError* MessageAnalyzerProxy::release_msg_get_last_error() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerProxy.msg_get_last_error)
  clear_has_msg_get_last_error();
  ::video_server_protocol::MessageRequestGetLastError* temp = msg_get_last_error_;
  msg_get_last_error_ = NULL;
  return temp;
}
void MessageAnalyzerProxy::set_allocated_msg_get_last_error(::video_server_protocol::MessageRequestGetLastError* msg_get_last_error) {
  delete msg_get_last_error_;
  msg_get_last_error_ = msg_get_last_error;
  if (msg_get_last_error) {
    set_has_msg_get_last_error();
  } else {
    clear_has_msg_get_last_error();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerProxy.msg_get_last_error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageRequestStart::kSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageRequestStart::MessageRequestStart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_server_protocol.MessageRequestStart)
}

void MessageRequestStart::InitAsDefaultInstance() {
  settings_ = const_cast< ::video_server_protocol::ContainerInitSettings*>(&::video_server_protocol::ContainerInitSettings::default_instance());
}

MessageRequestStart::MessageRequestStart(const MessageRequestStart& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_server_protocol.MessageRequestStart)
}

void MessageRequestStart::SharedCtor() {
  _cached_size_ = 0;
  settings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageRequestStart::~MessageRequestStart() {
  // @@protoc_insertion_point(destructor:video_server_protocol.MessageRequestStart)
  SharedDtor();
}

void MessageRequestStart::SharedDtor() {
  if (this != default_instance_) {
    delete settings_;
  }
}

void MessageRequestStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageRequestStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageRequestStart_descriptor_;
}

const MessageRequestStart& MessageRequestStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  return *default_instance_;
}

MessageRequestStart* MessageRequestStart::default_instance_ = NULL;

MessageRequestStart* MessageRequestStart::New(::google::protobuf::Arena* arena) const {
  MessageRequestStart* n = new MessageRequestStart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageRequestStart::Clear() {
// @@protoc_insertion_point(message_clear_start:video_server_protocol.MessageRequestStart)
  if (has_settings()) {
    if (settings_ != NULL) settings_->::video_server_protocol::ContainerInitSettings::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MessageRequestStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_server_protocol.MessageRequestStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .video_server_protocol.ContainerInitSettings settings = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:video_server_protocol.MessageRequestStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_server_protocol.MessageRequestStart)
  return false;
#undef DO_
}

void MessageRequestStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_server_protocol.MessageRequestStart)
  // required .video_server_protocol.ContainerInitSettings settings = 1;
  if (has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->settings_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_server_protocol.MessageRequestStart)
}

::google::protobuf::uint8* MessageRequestStart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_server_protocol.MessageRequestStart)
  // required .video_server_protocol.ContainerInitSettings settings = 1;
  if (has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->settings_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_server_protocol.MessageRequestStart)
  return target;
}

int MessageRequestStart::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:video_server_protocol.MessageRequestStart)
  int total_size = 0;

  // required .video_server_protocol.ContainerInitSettings settings = 1;
  if (has_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->settings_);
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageRequestStart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:video_server_protocol.MessageRequestStart)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageRequestStart* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageRequestStart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:video_server_protocol.MessageRequestStart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:video_server_protocol.MessageRequestStart)
    MergeFrom(*source);
  }
}

void MessageRequestStart::MergeFrom(const MessageRequestStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video_server_protocol.MessageRequestStart)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_settings()) {
      mutable_settings()->::video_server_protocol::ContainerInitSettings::MergeFrom(from.settings());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MessageRequestStart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:video_server_protocol.MessageRequestStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageRequestStart::CopyFrom(const MessageRequestStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video_server_protocol.MessageRequestStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageRequestStart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_settings()) {
    if (!this->settings_->IsInitialized()) return false;
  }
  return true;
}

void MessageRequestStart::Swap(MessageRequestStart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageRequestStart::InternalSwap(MessageRequestStart* other) {
  std::swap(settings_, other->settings_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageRequestStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageRequestStart_descriptor_;
  metadata.reflection = MessageRequestStart_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageRequestStart

// required .video_server_protocol.ContainerInitSettings settings = 1;
bool MessageRequestStart::has_settings() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MessageRequestStart::set_has_settings() {
  _has_bits_[0] |= 0x00000001u;
}
void MessageRequestStart::clear_has_settings() {
  _has_bits_[0] &= ~0x00000001u;
}
void MessageRequestStart::clear_settings() {
  if (settings_ != NULL) settings_->::video_server_protocol::ContainerInitSettings::Clear();
  clear_has_settings();
}
const ::video_server_protocol::ContainerInitSettings& MessageRequestStart::settings() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageRequestStart.settings)
  return settings_ != NULL ? *settings_ : *default_instance_->settings_;
}
::video_server_protocol::ContainerInitSettings* MessageRequestStart::mutable_settings() {
  set_has_settings();
  if (settings_ == NULL) {
    settings_ = new ::video_server_protocol::ContainerInitSettings;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageRequestStart.settings)
  return settings_;
}
::video_server_protocol::ContainerInitSettings* MessageRequestStart::release_settings() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageRequestStart.settings)
  clear_has_settings();
  ::video_server_protocol::ContainerInitSettings* temp = settings_;
  settings_ = NULL;
  return temp;
}
void MessageRequestStart::set_allocated_settings(::video_server_protocol::ContainerInitSettings* settings) {
  delete settings_;
  settings_ = settings;
  if (settings) {
    set_has_settings();
  } else {
    clear_has_settings();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageRequestStart.settings)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageRequestPause::MessageRequestPause()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_server_protocol.MessageRequestPause)
}

void MessageRequestPause::InitAsDefaultInstance() {
}

MessageRequestPause::MessageRequestPause(const MessageRequestPause& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_server_protocol.MessageRequestPause)
}

void MessageRequestPause::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageRequestPause::~MessageRequestPause() {
  // @@protoc_insertion_point(destructor:video_server_protocol.MessageRequestPause)
  SharedDtor();
}

void MessageRequestPause::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageRequestPause::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageRequestPause::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageRequestPause_descriptor_;
}

const MessageRequestPause& MessageRequestPause::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  return *default_instance_;
}

MessageRequestPause* MessageRequestPause::default_instance_ = NULL;

MessageRequestPause* MessageRequestPause::New(::google::protobuf::Arena* arena) const {
  MessageRequestPause* n = new MessageRequestPause;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageRequestPause::Clear() {
// @@protoc_insertion_point(message_clear_start:video_server_protocol.MessageRequestPause)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MessageRequestPause::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_server_protocol.MessageRequestPause)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:video_server_protocol.MessageRequestPause)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_server_protocol.MessageRequestPause)
  return false;
#undef DO_
}

void MessageRequestPause::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_server_protocol.MessageRequestPause)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_server_protocol.MessageRequestPause)
}

::google::protobuf::uint8* MessageRequestPause::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_server_protocol.MessageRequestPause)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_server_protocol.MessageRequestPause)
  return target;
}

int MessageRequestPause::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:video_server_protocol.MessageRequestPause)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageRequestPause::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:video_server_protocol.MessageRequestPause)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageRequestPause* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageRequestPause>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:video_server_protocol.MessageRequestPause)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:video_server_protocol.MessageRequestPause)
    MergeFrom(*source);
  }
}

void MessageRequestPause::MergeFrom(const MessageRequestPause& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video_server_protocol.MessageRequestPause)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MessageRequestPause::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:video_server_protocol.MessageRequestPause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageRequestPause::CopyFrom(const MessageRequestPause& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video_server_protocol.MessageRequestPause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageRequestPause::IsInitialized() const {

  return true;
}

void MessageRequestPause::Swap(MessageRequestPause* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageRequestPause::InternalSwap(MessageRequestPause* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageRequestPause::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageRequestPause_descriptor_;
  metadata.reflection = MessageRequestPause_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageRequestPause

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageRequestResume::MessageRequestResume()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_server_protocol.MessageRequestResume)
}

void MessageRequestResume::InitAsDefaultInstance() {
}

MessageRequestResume::MessageRequestResume(const MessageRequestResume& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_server_protocol.MessageRequestResume)
}

void MessageRequestResume::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageRequestResume::~MessageRequestResume() {
  // @@protoc_insertion_point(destructor:video_server_protocol.MessageRequestResume)
  SharedDtor();
}

void MessageRequestResume::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageRequestResume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageRequestResume::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageRequestResume_descriptor_;
}

const MessageRequestResume& MessageRequestResume::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  return *default_instance_;
}

MessageRequestResume* MessageRequestResume::default_instance_ = NULL;

MessageRequestResume* MessageRequestResume::New(::google::protobuf::Arena* arena) const {
  MessageRequestResume* n = new MessageRequestResume;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageRequestResume::Clear() {
// @@protoc_insertion_point(message_clear_start:video_server_protocol.MessageRequestResume)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MessageRequestResume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_server_protocol.MessageRequestResume)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:video_server_protocol.MessageRequestResume)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_server_protocol.MessageRequestResume)
  return false;
#undef DO_
}

void MessageRequestResume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_server_protocol.MessageRequestResume)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_server_protocol.MessageRequestResume)
}

::google::protobuf::uint8* MessageRequestResume::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_server_protocol.MessageRequestResume)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_server_protocol.MessageRequestResume)
  return target;
}

int MessageRequestResume::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:video_server_protocol.MessageRequestResume)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageRequestResume::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:video_server_protocol.MessageRequestResume)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageRequestResume* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageRequestResume>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:video_server_protocol.MessageRequestResume)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:video_server_protocol.MessageRequestResume)
    MergeFrom(*source);
  }
}

void MessageRequestResume::MergeFrom(const MessageRequestResume& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video_server_protocol.MessageRequestResume)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MessageRequestResume::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:video_server_protocol.MessageRequestResume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageRequestResume::CopyFrom(const MessageRequestResume& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video_server_protocol.MessageRequestResume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageRequestResume::IsInitialized() const {

  return true;
}

void MessageRequestResume::Swap(MessageRequestResume* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageRequestResume::InternalSwap(MessageRequestResume* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageRequestResume::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageRequestResume_descriptor_;
  metadata.reflection = MessageRequestResume_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageRequestResume

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageRequestStop::MessageRequestStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_server_protocol.MessageRequestStop)
}

void MessageRequestStop::InitAsDefaultInstance() {
}

MessageRequestStop::MessageRequestStop(const MessageRequestStop& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_server_protocol.MessageRequestStop)
}

void MessageRequestStop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageRequestStop::~MessageRequestStop() {
  // @@protoc_insertion_point(destructor:video_server_protocol.MessageRequestStop)
  SharedDtor();
}

void MessageRequestStop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageRequestStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageRequestStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageRequestStop_descriptor_;
}

const MessageRequestStop& MessageRequestStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  return *default_instance_;
}

MessageRequestStop* MessageRequestStop::default_instance_ = NULL;

MessageRequestStop* MessageRequestStop::New(::google::protobuf::Arena* arena) const {
  MessageRequestStop* n = new MessageRequestStop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageRequestStop::Clear() {
// @@protoc_insertion_point(message_clear_start:video_server_protocol.MessageRequestStop)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MessageRequestStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_server_protocol.MessageRequestStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:video_server_protocol.MessageRequestStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_server_protocol.MessageRequestStop)
  return false;
#undef DO_
}

void MessageRequestStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_server_protocol.MessageRequestStop)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_server_protocol.MessageRequestStop)
}

::google::protobuf::uint8* MessageRequestStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_server_protocol.MessageRequestStop)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_server_protocol.MessageRequestStop)
  return target;
}

int MessageRequestStop::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:video_server_protocol.MessageRequestStop)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageRequestStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:video_server_protocol.MessageRequestStop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageRequestStop* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageRequestStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:video_server_protocol.MessageRequestStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:video_server_protocol.MessageRequestStop)
    MergeFrom(*source);
  }
}

void MessageRequestStop::MergeFrom(const MessageRequestStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video_server_protocol.MessageRequestStop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MessageRequestStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:video_server_protocol.MessageRequestStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageRequestStop::CopyFrom(const MessageRequestStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video_server_protocol.MessageRequestStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageRequestStop::IsInitialized() const {

  return true;
}

void MessageRequestStop::Swap(MessageRequestStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageRequestStop::InternalSwap(MessageRequestStop* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageRequestStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageRequestStop_descriptor_;
  metadata.reflection = MessageRequestStop_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageRequestStop

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageRequestGetStatus::MessageRequestGetStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_server_protocol.MessageRequestGetStatus)
}

void MessageRequestGetStatus::InitAsDefaultInstance() {
}

MessageRequestGetStatus::MessageRequestGetStatus(const MessageRequestGetStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_server_protocol.MessageRequestGetStatus)
}

void MessageRequestGetStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageRequestGetStatus::~MessageRequestGetStatus() {
  // @@protoc_insertion_point(destructor:video_server_protocol.MessageRequestGetStatus)
  SharedDtor();
}

void MessageRequestGetStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageRequestGetStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageRequestGetStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageRequestGetStatus_descriptor_;
}

const MessageRequestGetStatus& MessageRequestGetStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  return *default_instance_;
}

MessageRequestGetStatus* MessageRequestGetStatus::default_instance_ = NULL;

MessageRequestGetStatus* MessageRequestGetStatus::New(::google::protobuf::Arena* arena) const {
  MessageRequestGetStatus* n = new MessageRequestGetStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageRequestGetStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:video_server_protocol.MessageRequestGetStatus)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MessageRequestGetStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_server_protocol.MessageRequestGetStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:video_server_protocol.MessageRequestGetStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_server_protocol.MessageRequestGetStatus)
  return false;
#undef DO_
}

void MessageRequestGetStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_server_protocol.MessageRequestGetStatus)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_server_protocol.MessageRequestGetStatus)
}

::google::protobuf::uint8* MessageRequestGetStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_server_protocol.MessageRequestGetStatus)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_server_protocol.MessageRequestGetStatus)
  return target;
}

int MessageRequestGetStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:video_server_protocol.MessageRequestGetStatus)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageRequestGetStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:video_server_protocol.MessageRequestGetStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageRequestGetStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageRequestGetStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:video_server_protocol.MessageRequestGetStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:video_server_protocol.MessageRequestGetStatus)
    MergeFrom(*source);
  }
}

void MessageRequestGetStatus::MergeFrom(const MessageRequestGetStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video_server_protocol.MessageRequestGetStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MessageRequestGetStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:video_server_protocol.MessageRequestGetStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageRequestGetStatus::CopyFrom(const MessageRequestGetStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video_server_protocol.MessageRequestGetStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageRequestGetStatus::IsInitialized() const {

  return true;
}

void MessageRequestGetStatus::Swap(MessageRequestGetStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageRequestGetStatus::InternalSwap(MessageRequestGetStatus* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageRequestGetStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageRequestGetStatus_descriptor_;
  metadata.reflection = MessageRequestGetStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageRequestGetStatus

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageRequestGetSettings::MessageRequestGetSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_server_protocol.MessageRequestGetSettings)
}

void MessageRequestGetSettings::InitAsDefaultInstance() {
}

MessageRequestGetSettings::MessageRequestGetSettings(const MessageRequestGetSettings& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_server_protocol.MessageRequestGetSettings)
}

void MessageRequestGetSettings::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageRequestGetSettings::~MessageRequestGetSettings() {
  // @@protoc_insertion_point(destructor:video_server_protocol.MessageRequestGetSettings)
  SharedDtor();
}

void MessageRequestGetSettings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageRequestGetSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageRequestGetSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageRequestGetSettings_descriptor_;
}

const MessageRequestGetSettings& MessageRequestGetSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  return *default_instance_;
}

MessageRequestGetSettings* MessageRequestGetSettings::default_instance_ = NULL;

MessageRequestGetSettings* MessageRequestGetSettings::New(::google::protobuf::Arena* arena) const {
  MessageRequestGetSettings* n = new MessageRequestGetSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageRequestGetSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:video_server_protocol.MessageRequestGetSettings)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MessageRequestGetSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_server_protocol.MessageRequestGetSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:video_server_protocol.MessageRequestGetSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_server_protocol.MessageRequestGetSettings)
  return false;
#undef DO_
}

void MessageRequestGetSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_server_protocol.MessageRequestGetSettings)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_server_protocol.MessageRequestGetSettings)
}

::google::protobuf::uint8* MessageRequestGetSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_server_protocol.MessageRequestGetSettings)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_server_protocol.MessageRequestGetSettings)
  return target;
}

int MessageRequestGetSettings::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:video_server_protocol.MessageRequestGetSettings)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageRequestGetSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:video_server_protocol.MessageRequestGetSettings)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageRequestGetSettings* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageRequestGetSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:video_server_protocol.MessageRequestGetSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:video_server_protocol.MessageRequestGetSettings)
    MergeFrom(*source);
  }
}

void MessageRequestGetSettings::MergeFrom(const MessageRequestGetSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video_server_protocol.MessageRequestGetSettings)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MessageRequestGetSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:video_server_protocol.MessageRequestGetSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageRequestGetSettings::CopyFrom(const MessageRequestGetSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video_server_protocol.MessageRequestGetSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageRequestGetSettings::IsInitialized() const {

  return true;
}

void MessageRequestGetSettings::Swap(MessageRequestGetSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageRequestGetSettings::InternalSwap(MessageRequestGetSettings* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageRequestGetSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageRequestGetSettings_descriptor_;
  metadata.reflection = MessageRequestGetSettings_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageRequestGetSettings

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageRequestGetLastError::MessageRequestGetLastError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_server_protocol.MessageRequestGetLastError)
}

void MessageRequestGetLastError::InitAsDefaultInstance() {
}

MessageRequestGetLastError::MessageRequestGetLastError(const MessageRequestGetLastError& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_server_protocol.MessageRequestGetLastError)
}

void MessageRequestGetLastError::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageRequestGetLastError::~MessageRequestGetLastError() {
  // @@protoc_insertion_point(destructor:video_server_protocol.MessageRequestGetLastError)
  SharedDtor();
}

void MessageRequestGetLastError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageRequestGetLastError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageRequestGetLastError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageRequestGetLastError_descriptor_;
}

const MessageRequestGetLastError& MessageRequestGetLastError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  return *default_instance_;
}

MessageRequestGetLastError* MessageRequestGetLastError::default_instance_ = NULL;

MessageRequestGetLastError* MessageRequestGetLastError::New(::google::protobuf::Arena* arena) const {
  MessageRequestGetLastError* n = new MessageRequestGetLastError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageRequestGetLastError::Clear() {
// @@protoc_insertion_point(message_clear_start:video_server_protocol.MessageRequestGetLastError)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MessageRequestGetLastError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_server_protocol.MessageRequestGetLastError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:video_server_protocol.MessageRequestGetLastError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_server_protocol.MessageRequestGetLastError)
  return false;
#undef DO_
}

void MessageRequestGetLastError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_server_protocol.MessageRequestGetLastError)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_server_protocol.MessageRequestGetLastError)
}

::google::protobuf::uint8* MessageRequestGetLastError::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_server_protocol.MessageRequestGetLastError)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_server_protocol.MessageRequestGetLastError)
  return target;
}

int MessageRequestGetLastError::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:video_server_protocol.MessageRequestGetLastError)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageRequestGetLastError::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:video_server_protocol.MessageRequestGetLastError)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageRequestGetLastError* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageRequestGetLastError>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:video_server_protocol.MessageRequestGetLastError)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:video_server_protocol.MessageRequestGetLastError)
    MergeFrom(*source);
  }
}

void MessageRequestGetLastError::MergeFrom(const MessageRequestGetLastError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video_server_protocol.MessageRequestGetLastError)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MessageRequestGetLastError::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:video_server_protocol.MessageRequestGetLastError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageRequestGetLastError::CopyFrom(const MessageRequestGetLastError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video_server_protocol.MessageRequestGetLastError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageRequestGetLastError::IsInitialized() const {

  return true;
}

void MessageRequestGetLastError::Swap(MessageRequestGetLastError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageRequestGetLastError::InternalSwap(MessageRequestGetLastError* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageRequestGetLastError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageRequestGetLastError_descriptor_;
  metadata.reflection = MessageRequestGetLastError_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageRequestGetLastError

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageAnalyzerReal::kHeaderFieldNumber;
const int MessageAnalyzerReal::kMsgTypeFieldNumber;
const int MessageAnalyzerReal::kMsgStartFieldNumber;
const int MessageAnalyzerReal::kMsgPauseFieldNumber;
const int MessageAnalyzerReal::kMsgResumeFieldNumber;
const int MessageAnalyzerReal::kMsgStopFieldNumber;
const int MessageAnalyzerReal::kMsgGetStatusFieldNumber;
const int MessageAnalyzerReal::kMsgGetSettingsFieldNumber;
const int MessageAnalyzerReal::kMsgGetLastErrorFieldNumber;
const int MessageAnalyzerReal::kMsgGetAccumEventsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageAnalyzerReal::MessageAnalyzerReal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_server_protocol.MessageAnalyzerReal)
}

void MessageAnalyzerReal::InitAsDefaultInstance() {
  header_ = const_cast< ::video_server_protocol::MessageHeader*>(&::video_server_protocol::MessageHeader::default_instance());
  msg_start_ = const_cast< ::video_server_protocol::MessageResponseStart*>(&::video_server_protocol::MessageResponseStart::default_instance());
  msg_pause_ = const_cast< ::video_server_protocol::MessageResponsePause*>(&::video_server_protocol::MessageResponsePause::default_instance());
  msg_resume_ = const_cast< ::video_server_protocol::MessageResponseResume*>(&::video_server_protocol::MessageResponseResume::default_instance());
  msg_stop_ = const_cast< ::video_server_protocol::MessageResponseStop*>(&::video_server_protocol::MessageResponseStop::default_instance());
  msg_get_status_ = const_cast< ::video_server_protocol::MessageResponseGetStatus*>(&::video_server_protocol::MessageResponseGetStatus::default_instance());
  msg_get_settings_ = const_cast< ::video_server_protocol::MessageResponseGetSettings*>(&::video_server_protocol::MessageResponseGetSettings::default_instance());
  msg_get_last_error_ = const_cast< ::video_server_protocol::MessageResponseGetLastError*>(&::video_server_protocol::MessageResponseGetLastError::default_instance());
  msg_get_accum_events_ = const_cast< ::video_server_protocol::MessageResponseAnalyticEvent*>(&::video_server_protocol::MessageResponseAnalyticEvent::default_instance());
}

MessageAnalyzerReal::MessageAnalyzerReal(const MessageAnalyzerReal& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_server_protocol.MessageAnalyzerReal)
}

void MessageAnalyzerReal::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  msg_type_ = 0;
  msg_start_ = NULL;
  msg_pause_ = NULL;
  msg_resume_ = NULL;
  msg_stop_ = NULL;
  msg_get_status_ = NULL;
  msg_get_settings_ = NULL;
  msg_get_last_error_ = NULL;
  msg_get_accum_events_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageAnalyzerReal::~MessageAnalyzerReal() {
  // @@protoc_insertion_point(destructor:video_server_protocol.MessageAnalyzerReal)
  SharedDtor();
}

void MessageAnalyzerReal::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete msg_start_;
    delete msg_pause_;
    delete msg_resume_;
    delete msg_stop_;
    delete msg_get_status_;
    delete msg_get_settings_;
    delete msg_get_last_error_;
    delete msg_get_accum_events_;
  }
}

void MessageAnalyzerReal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageAnalyzerReal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageAnalyzerReal_descriptor_;
}

const MessageAnalyzerReal& MessageAnalyzerReal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  return *default_instance_;
}

MessageAnalyzerReal* MessageAnalyzerReal::default_instance_ = NULL;

MessageAnalyzerReal* MessageAnalyzerReal::New(::google::protobuf::Arena* arena) const {
  MessageAnalyzerReal* n = new MessageAnalyzerReal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageAnalyzerReal::Clear() {
// @@protoc_insertion_point(message_clear_start:video_server_protocol.MessageAnalyzerReal)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_header()) {
      if (header_ != NULL) header_->::video_server_protocol::MessageHeader::Clear();
    }
    msg_type_ = 0;
    if (has_msg_start()) {
      if (msg_start_ != NULL) msg_start_->::video_server_protocol::MessageResponseStart::Clear();
    }
    if (has_msg_pause()) {
      if (msg_pause_ != NULL) msg_pause_->::video_server_protocol::MessageResponsePause::Clear();
    }
    if (has_msg_resume()) {
      if (msg_resume_ != NULL) msg_resume_->::video_server_protocol::MessageResponseResume::Clear();
    }
    if (has_msg_stop()) {
      if (msg_stop_ != NULL) msg_stop_->::video_server_protocol::MessageResponseStop::Clear();
    }
    if (has_msg_get_status()) {
      if (msg_get_status_ != NULL) msg_get_status_->::video_server_protocol::MessageResponseGetStatus::Clear();
    }
    if (has_msg_get_settings()) {
      if (msg_get_settings_ != NULL) msg_get_settings_->::video_server_protocol::MessageResponseGetSettings::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    if (has_msg_get_last_error()) {
      if (msg_get_last_error_ != NULL) msg_get_last_error_->::video_server_protocol::MessageResponseGetLastError::Clear();
    }
    if (has_msg_get_accum_events()) {
      if (msg_get_accum_events_ != NULL) msg_get_accum_events_->::video_server_protocol::MessageResponseAnalyticEvent::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MessageAnalyzerReal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_server_protocol.MessageAnalyzerReal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .video_server_protocol.MessageHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msg_type;
        break;
      }

      // required .video_server_protocol.ESyncCommandType msg_type = 2;
      case 2: {
        if (tag == 16) {
         parse_msg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::video_server_protocol::ESyncCommandType_IsValid(value)) {
            set_msg_type(static_cast< ::video_server_protocol::ESyncCommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msg_start;
        break;
      }

      // optional .video_server_protocol.MessageResponseStart msg_start = 4;
      case 4: {
        if (tag == 34) {
         parse_msg_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_start()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_msg_pause;
        break;
      }

      // optional .video_server_protocol.MessageResponsePause msg_pause = 5;
      case 5: {
        if (tag == 42) {
         parse_msg_pause:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_pause()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_msg_resume;
        break;
      }

      // optional .video_server_protocol.MessageResponseResume msg_resume = 6;
      case 6: {
        if (tag == 50) {
         parse_msg_resume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_resume()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_msg_stop;
        break;
      }

      // optional .video_server_protocol.MessageResponseStop msg_stop = 7;
      case 7: {
        if (tag == 58) {
         parse_msg_stop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_stop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_msg_get_status;
        break;
      }

      // optional .video_server_protocol.MessageResponseGetStatus msg_get_status = 8;
      case 8: {
        if (tag == 66) {
         parse_msg_get_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_get_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_msg_get_settings;
        break;
      }

      // optional .video_server_protocol.MessageResponseGetSettings msg_get_settings = 9;
      case 9: {
        if (tag == 74) {
         parse_msg_get_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_get_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_msg_get_last_error;
        break;
      }

      // optional .video_server_protocol.MessageResponseGetLastError msg_get_last_error = 10;
      case 10: {
        if (tag == 82) {
         parse_msg_get_last_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_get_last_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_msg_get_accum_events;
        break;
      }

      // optional .video_server_protocol.MessageResponseAnalyticEvent msg_get_accum_events = 11;
      case 11: {
        if (tag == 90) {
         parse_msg_get_accum_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_get_accum_events()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:video_server_protocol.MessageAnalyzerReal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_server_protocol.MessageAnalyzerReal)
  return false;
#undef DO_
}

void MessageAnalyzerReal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_server_protocol.MessageAnalyzerReal)
  // required .video_server_protocol.MessageHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // required .video_server_protocol.ESyncCommandType msg_type = 2;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msg_type(), output);
  }

  // optional .video_server_protocol.MessageResponseStart msg_start = 4;
  if (has_msg_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->msg_start_, output);
  }

  // optional .video_server_protocol.MessageResponsePause msg_pause = 5;
  if (has_msg_pause()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->msg_pause_, output);
  }

  // optional .video_server_protocol.MessageResponseResume msg_resume = 6;
  if (has_msg_resume()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->msg_resume_, output);
  }

  // optional .video_server_protocol.MessageResponseStop msg_stop = 7;
  if (has_msg_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->msg_stop_, output);
  }

  // optional .video_server_protocol.MessageResponseGetStatus msg_get_status = 8;
  if (has_msg_get_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->msg_get_status_, output);
  }

  // optional .video_server_protocol.MessageResponseGetSettings msg_get_settings = 9;
  if (has_msg_get_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->msg_get_settings_, output);
  }

  // optional .video_server_protocol.MessageResponseGetLastError msg_get_last_error = 10;
  if (has_msg_get_last_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->msg_get_last_error_, output);
  }

  // optional .video_server_protocol.MessageResponseAnalyticEvent msg_get_accum_events = 11;
  if (has_msg_get_accum_events()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->msg_get_accum_events_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_server_protocol.MessageAnalyzerReal)
}

::google::protobuf::uint8* MessageAnalyzerReal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_server_protocol.MessageAnalyzerReal)
  // required .video_server_protocol.MessageHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // required .video_server_protocol.ESyncCommandType msg_type = 2;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msg_type(), target);
  }

  // optional .video_server_protocol.MessageResponseStart msg_start = 4;
  if (has_msg_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->msg_start_, false, target);
  }

  // optional .video_server_protocol.MessageResponsePause msg_pause = 5;
  if (has_msg_pause()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->msg_pause_, false, target);
  }

  // optional .video_server_protocol.MessageResponseResume msg_resume = 6;
  if (has_msg_resume()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->msg_resume_, false, target);
  }

  // optional .video_server_protocol.MessageResponseStop msg_stop = 7;
  if (has_msg_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->msg_stop_, false, target);
  }

  // optional .video_server_protocol.MessageResponseGetStatus msg_get_status = 8;
  if (has_msg_get_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->msg_get_status_, false, target);
  }

  // optional .video_server_protocol.MessageResponseGetSettings msg_get_settings = 9;
  if (has_msg_get_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->msg_get_settings_, false, target);
  }

  // optional .video_server_protocol.MessageResponseGetLastError msg_get_last_error = 10;
  if (has_msg_get_last_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->msg_get_last_error_, false, target);
  }

  // optional .video_server_protocol.MessageResponseAnalyticEvent msg_get_accum_events = 11;
  if (has_msg_get_accum_events()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->msg_get_accum_events_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_server_protocol.MessageAnalyzerReal)
  return target;
}

int MessageAnalyzerReal::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:video_server_protocol.MessageAnalyzerReal)
  int total_size = 0;

  if (has_header()) {
    // required .video_server_protocol.MessageHeader header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  if (has_msg_type()) {
    // required .video_server_protocol.ESyncCommandType msg_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
  }

  return total_size;
}
int MessageAnalyzerReal::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:video_server_protocol.MessageAnalyzerReal)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .video_server_protocol.MessageHeader header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);

    // required .video_server_protocol.ESyncCommandType msg_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 252u) {
    // optional .video_server_protocol.MessageResponseStart msg_start = 4;
    if (has_msg_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->msg_start_);
    }

    // optional .video_server_protocol.MessageResponsePause msg_pause = 5;
    if (has_msg_pause()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->msg_pause_);
    }

    // optional .video_server_protocol.MessageResponseResume msg_resume = 6;
    if (has_msg_resume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->msg_resume_);
    }

    // optional .video_server_protocol.MessageResponseStop msg_stop = 7;
    if (has_msg_stop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->msg_stop_);
    }

    // optional .video_server_protocol.MessageResponseGetStatus msg_get_status = 8;
    if (has_msg_get_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->msg_get_status_);
    }

    // optional .video_server_protocol.MessageResponseGetSettings msg_get_settings = 9;
    if (has_msg_get_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->msg_get_settings_);
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional .video_server_protocol.MessageResponseGetLastError msg_get_last_error = 10;
    if (has_msg_get_last_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->msg_get_last_error_);
    }

    // optional .video_server_protocol.MessageResponseAnalyticEvent msg_get_accum_events = 11;
    if (has_msg_get_accum_events()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->msg_get_accum_events_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageAnalyzerReal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:video_server_protocol.MessageAnalyzerReal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageAnalyzerReal* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageAnalyzerReal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:video_server_protocol.MessageAnalyzerReal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:video_server_protocol.MessageAnalyzerReal)
    MergeFrom(*source);
  }
}

void MessageAnalyzerReal::MergeFrom(const MessageAnalyzerReal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video_server_protocol.MessageAnalyzerReal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::video_server_protocol::MessageHeader::MergeFrom(from.header());
    }
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_msg_start()) {
      mutable_msg_start()->::video_server_protocol::MessageResponseStart::MergeFrom(from.msg_start());
    }
    if (from.has_msg_pause()) {
      mutable_msg_pause()->::video_server_protocol::MessageResponsePause::MergeFrom(from.msg_pause());
    }
    if (from.has_msg_resume()) {
      mutable_msg_resume()->::video_server_protocol::MessageResponseResume::MergeFrom(from.msg_resume());
    }
    if (from.has_msg_stop()) {
      mutable_msg_stop()->::video_server_protocol::MessageResponseStop::MergeFrom(from.msg_stop());
    }
    if (from.has_msg_get_status()) {
      mutable_msg_get_status()->::video_server_protocol::MessageResponseGetStatus::MergeFrom(from.msg_get_status());
    }
    if (from.has_msg_get_settings()) {
      mutable_msg_get_settings()->::video_server_protocol::MessageResponseGetSettings::MergeFrom(from.msg_get_settings());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_msg_get_last_error()) {
      mutable_msg_get_last_error()->::video_server_protocol::MessageResponseGetLastError::MergeFrom(from.msg_get_last_error());
    }
    if (from.has_msg_get_accum_events()) {
      mutable_msg_get_accum_events()->::video_server_protocol::MessageResponseAnalyticEvent::MergeFrom(from.msg_get_accum_events());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MessageAnalyzerReal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:video_server_protocol.MessageAnalyzerReal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageAnalyzerReal::CopyFrom(const MessageAnalyzerReal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video_server_protocol.MessageAnalyzerReal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageAnalyzerReal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_header()) {
    if (!this->header_->IsInitialized()) return false;
  }
  if (has_msg_start()) {
    if (!this->msg_start_->IsInitialized()) return false;
  }
  if (has_msg_get_status()) {
    if (!this->msg_get_status_->IsInitialized()) return false;
  }
  if (has_msg_get_settings()) {
    if (!this->msg_get_settings_->IsInitialized()) return false;
  }
  if (has_msg_get_last_error()) {
    if (!this->msg_get_last_error_->IsInitialized()) return false;
  }
  if (has_msg_get_accum_events()) {
    if (!this->msg_get_accum_events_->IsInitialized()) return false;
  }
  return true;
}

void MessageAnalyzerReal::Swap(MessageAnalyzerReal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageAnalyzerReal::InternalSwap(MessageAnalyzerReal* other) {
  std::swap(header_, other->header_);
  std::swap(msg_type_, other->msg_type_);
  std::swap(msg_start_, other->msg_start_);
  std::swap(msg_pause_, other->msg_pause_);
  std::swap(msg_resume_, other->msg_resume_);
  std::swap(msg_stop_, other->msg_stop_);
  std::swap(msg_get_status_, other->msg_get_status_);
  std::swap(msg_get_settings_, other->msg_get_settings_);
  std::swap(msg_get_last_error_, other->msg_get_last_error_);
  std::swap(msg_get_accum_events_, other->msg_get_accum_events_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageAnalyzerReal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageAnalyzerReal_descriptor_;
  metadata.reflection = MessageAnalyzerReal_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageAnalyzerReal

// required .video_server_protocol.MessageHeader header = 1;
bool MessageAnalyzerReal::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MessageAnalyzerReal::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void MessageAnalyzerReal::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void MessageAnalyzerReal::clear_header() {
  if (header_ != NULL) header_->::video_server_protocol::MessageHeader::Clear();
  clear_has_header();
}
const ::video_server_protocol::MessageHeader& MessageAnalyzerReal::header() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerReal.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::video_server_protocol::MessageHeader* MessageAnalyzerReal::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::video_server_protocol::MessageHeader;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerReal.header)
  return header_;
}
::video_server_protocol::MessageHeader* MessageAnalyzerReal::release_header() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerReal.header)
  clear_has_header();
  ::video_server_protocol::MessageHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void MessageAnalyzerReal::set_allocated_header(::video_server_protocol::MessageHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerReal.header)
}

// required .video_server_protocol.ESyncCommandType msg_type = 2;
bool MessageAnalyzerReal::has_msg_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MessageAnalyzerReal::set_has_msg_type() {
  _has_bits_[0] |= 0x00000002u;
}
void MessageAnalyzerReal::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void MessageAnalyzerReal::clear_msg_type() {
  msg_type_ = 0;
  clear_has_msg_type();
}
 ::video_server_protocol::ESyncCommandType MessageAnalyzerReal::msg_type() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerReal.msg_type)
  return static_cast< ::video_server_protocol::ESyncCommandType >(msg_type_);
}
 void MessageAnalyzerReal::set_msg_type(::video_server_protocol::ESyncCommandType value) {
  assert(::video_server_protocol::ESyncCommandType_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:video_server_protocol.MessageAnalyzerReal.msg_type)
}

// optional .video_server_protocol.MessageResponseStart msg_start = 4;
bool MessageAnalyzerReal::has_msg_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MessageAnalyzerReal::set_has_msg_start() {
  _has_bits_[0] |= 0x00000004u;
}
void MessageAnalyzerReal::clear_has_msg_start() {
  _has_bits_[0] &= ~0x00000004u;
}
void MessageAnalyzerReal::clear_msg_start() {
  if (msg_start_ != NULL) msg_start_->::video_server_protocol::MessageResponseStart::Clear();
  clear_has_msg_start();
}
const ::video_server_protocol::MessageResponseStart& MessageAnalyzerReal::msg_start() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerReal.msg_start)
  return msg_start_ != NULL ? *msg_start_ : *default_instance_->msg_start_;
}
::video_server_protocol::MessageResponseStart* MessageAnalyzerReal::mutable_msg_start() {
  set_has_msg_start();
  if (msg_start_ == NULL) {
    msg_start_ = new ::video_server_protocol::MessageResponseStart;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerReal.msg_start)
  return msg_start_;
}
::video_server_protocol::MessageResponseStart* MessageAnalyzerReal::release_msg_start() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerReal.msg_start)
  clear_has_msg_start();
  ::video_server_protocol::MessageResponseStart* temp = msg_start_;
  msg_start_ = NULL;
  return temp;
}
void MessageAnalyzerReal::set_allocated_msg_start(::video_server_protocol::MessageResponseStart* msg_start) {
  delete msg_start_;
  msg_start_ = msg_start;
  if (msg_start) {
    set_has_msg_start();
  } else {
    clear_has_msg_start();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerReal.msg_start)
}

// optional .video_server_protocol.MessageResponsePause msg_pause = 5;
bool MessageAnalyzerReal::has_msg_pause() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MessageAnalyzerReal::set_has_msg_pause() {
  _has_bits_[0] |= 0x00000008u;
}
void MessageAnalyzerReal::clear_has_msg_pause() {
  _has_bits_[0] &= ~0x00000008u;
}
void MessageAnalyzerReal::clear_msg_pause() {
  if (msg_pause_ != NULL) msg_pause_->::video_server_protocol::MessageResponsePause::Clear();
  clear_has_msg_pause();
}
const ::video_server_protocol::MessageResponsePause& MessageAnalyzerReal::msg_pause() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerReal.msg_pause)
  return msg_pause_ != NULL ? *msg_pause_ : *default_instance_->msg_pause_;
}
::video_server_protocol::MessageResponsePause* MessageAnalyzerReal::mutable_msg_pause() {
  set_has_msg_pause();
  if (msg_pause_ == NULL) {
    msg_pause_ = new ::video_server_protocol::MessageResponsePause;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerReal.msg_pause)
  return msg_pause_;
}
::video_server_protocol::MessageResponsePause* MessageAnalyzerReal::release_msg_pause() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerReal.msg_pause)
  clear_has_msg_pause();
  ::video_server_protocol::MessageResponsePause* temp = msg_pause_;
  msg_pause_ = NULL;
  return temp;
}
void MessageAnalyzerReal::set_allocated_msg_pause(::video_server_protocol::MessageResponsePause* msg_pause) {
  delete msg_pause_;
  msg_pause_ = msg_pause;
  if (msg_pause) {
    set_has_msg_pause();
  } else {
    clear_has_msg_pause();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerReal.msg_pause)
}

// optional .video_server_protocol.MessageResponseResume msg_resume = 6;
bool MessageAnalyzerReal::has_msg_resume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MessageAnalyzerReal::set_has_msg_resume() {
  _has_bits_[0] |= 0x00000010u;
}
void MessageAnalyzerReal::clear_has_msg_resume() {
  _has_bits_[0] &= ~0x00000010u;
}
void MessageAnalyzerReal::clear_msg_resume() {
  if (msg_resume_ != NULL) msg_resume_->::video_server_protocol::MessageResponseResume::Clear();
  clear_has_msg_resume();
}
const ::video_server_protocol::MessageResponseResume& MessageAnalyzerReal::msg_resume() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerReal.msg_resume)
  return msg_resume_ != NULL ? *msg_resume_ : *default_instance_->msg_resume_;
}
::video_server_protocol::MessageResponseResume* MessageAnalyzerReal::mutable_msg_resume() {
  set_has_msg_resume();
  if (msg_resume_ == NULL) {
    msg_resume_ = new ::video_server_protocol::MessageResponseResume;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerReal.msg_resume)
  return msg_resume_;
}
::video_server_protocol::MessageResponseResume* MessageAnalyzerReal::release_msg_resume() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerReal.msg_resume)
  clear_has_msg_resume();
  ::video_server_protocol::MessageResponseResume* temp = msg_resume_;
  msg_resume_ = NULL;
  return temp;
}
void MessageAnalyzerReal::set_allocated_msg_resume(::video_server_protocol::MessageResponseResume* msg_resume) {
  delete msg_resume_;
  msg_resume_ = msg_resume;
  if (msg_resume) {
    set_has_msg_resume();
  } else {
    clear_has_msg_resume();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerReal.msg_resume)
}

// optional .video_server_protocol.MessageResponseStop msg_stop = 7;
bool MessageAnalyzerReal::has_msg_stop() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MessageAnalyzerReal::set_has_msg_stop() {
  _has_bits_[0] |= 0x00000020u;
}
void MessageAnalyzerReal::clear_has_msg_stop() {
  _has_bits_[0] &= ~0x00000020u;
}
void MessageAnalyzerReal::clear_msg_stop() {
  if (msg_stop_ != NULL) msg_stop_->::video_server_protocol::MessageResponseStop::Clear();
  clear_has_msg_stop();
}
const ::video_server_protocol::MessageResponseStop& MessageAnalyzerReal::msg_stop() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerReal.msg_stop)
  return msg_stop_ != NULL ? *msg_stop_ : *default_instance_->msg_stop_;
}
::video_server_protocol::MessageResponseStop* MessageAnalyzerReal::mutable_msg_stop() {
  set_has_msg_stop();
  if (msg_stop_ == NULL) {
    msg_stop_ = new ::video_server_protocol::MessageResponseStop;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerReal.msg_stop)
  return msg_stop_;
}
::video_server_protocol::MessageResponseStop* MessageAnalyzerReal::release_msg_stop() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerReal.msg_stop)
  clear_has_msg_stop();
  ::video_server_protocol::MessageResponseStop* temp = msg_stop_;
  msg_stop_ = NULL;
  return temp;
}
void MessageAnalyzerReal::set_allocated_msg_stop(::video_server_protocol::MessageResponseStop* msg_stop) {
  delete msg_stop_;
  msg_stop_ = msg_stop;
  if (msg_stop) {
    set_has_msg_stop();
  } else {
    clear_has_msg_stop();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerReal.msg_stop)
}

// optional .video_server_protocol.MessageResponseGetStatus msg_get_status = 8;
bool MessageAnalyzerReal::has_msg_get_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MessageAnalyzerReal::set_has_msg_get_status() {
  _has_bits_[0] |= 0x00000040u;
}
void MessageAnalyzerReal::clear_has_msg_get_status() {
  _has_bits_[0] &= ~0x00000040u;
}
void MessageAnalyzerReal::clear_msg_get_status() {
  if (msg_get_status_ != NULL) msg_get_status_->::video_server_protocol::MessageResponseGetStatus::Clear();
  clear_has_msg_get_status();
}
const ::video_server_protocol::MessageResponseGetStatus& MessageAnalyzerReal::msg_get_status() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerReal.msg_get_status)
  return msg_get_status_ != NULL ? *msg_get_status_ : *default_instance_->msg_get_status_;
}
::video_server_protocol::MessageResponseGetStatus* MessageAnalyzerReal::mutable_msg_get_status() {
  set_has_msg_get_status();
  if (msg_get_status_ == NULL) {
    msg_get_status_ = new ::video_server_protocol::MessageResponseGetStatus;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerReal.msg_get_status)
  return msg_get_status_;
}
::video_server_protocol::MessageResponseGetStatus* MessageAnalyzerReal::release_msg_get_status() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerReal.msg_get_status)
  clear_has_msg_get_status();
  ::video_server_protocol::MessageResponseGetStatus* temp = msg_get_status_;
  msg_get_status_ = NULL;
  return temp;
}
void MessageAnalyzerReal::set_allocated_msg_get_status(::video_server_protocol::MessageResponseGetStatus* msg_get_status) {
  delete msg_get_status_;
  msg_get_status_ = msg_get_status;
  if (msg_get_status) {
    set_has_msg_get_status();
  } else {
    clear_has_msg_get_status();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerReal.msg_get_status)
}

// optional .video_server_protocol.MessageResponseGetSettings msg_get_settings = 9;
bool MessageAnalyzerReal::has_msg_get_settings() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MessageAnalyzerReal::set_has_msg_get_settings() {
  _has_bits_[0] |= 0x00000080u;
}
void MessageAnalyzerReal::clear_has_msg_get_settings() {
  _has_bits_[0] &= ~0x00000080u;
}
void MessageAnalyzerReal::clear_msg_get_settings() {
  if (msg_get_settings_ != NULL) msg_get_settings_->::video_server_protocol::MessageResponseGetSettings::Clear();
  clear_has_msg_get_settings();
}
const ::video_server_protocol::MessageResponseGetSettings& MessageAnalyzerReal::msg_get_settings() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerReal.msg_get_settings)
  return msg_get_settings_ != NULL ? *msg_get_settings_ : *default_instance_->msg_get_settings_;
}
::video_server_protocol::MessageResponseGetSettings* MessageAnalyzerReal::mutable_msg_get_settings() {
  set_has_msg_get_settings();
  if (msg_get_settings_ == NULL) {
    msg_get_settings_ = new ::video_server_protocol::MessageResponseGetSettings;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerReal.msg_get_settings)
  return msg_get_settings_;
}
::video_server_protocol::MessageResponseGetSettings* MessageAnalyzerReal::release_msg_get_settings() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerReal.msg_get_settings)
  clear_has_msg_get_settings();
  ::video_server_protocol::MessageResponseGetSettings* temp = msg_get_settings_;
  msg_get_settings_ = NULL;
  return temp;
}
void MessageAnalyzerReal::set_allocated_msg_get_settings(::video_server_protocol::MessageResponseGetSettings* msg_get_settings) {
  delete msg_get_settings_;
  msg_get_settings_ = msg_get_settings;
  if (msg_get_settings) {
    set_has_msg_get_settings();
  } else {
    clear_has_msg_get_settings();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerReal.msg_get_settings)
}

// optional .video_server_protocol.MessageResponseGetLastError msg_get_last_error = 10;
bool MessageAnalyzerReal::has_msg_get_last_error() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void MessageAnalyzerReal::set_has_msg_get_last_error() {
  _has_bits_[0] |= 0x00000100u;
}
void MessageAnalyzerReal::clear_has_msg_get_last_error() {
  _has_bits_[0] &= ~0x00000100u;
}
void MessageAnalyzerReal::clear_msg_get_last_error() {
  if (msg_get_last_error_ != NULL) msg_get_last_error_->::video_server_protocol::MessageResponseGetLastError::Clear();
  clear_has_msg_get_last_error();
}
const ::video_server_protocol::MessageResponseGetLastError& MessageAnalyzerReal::msg_get_last_error() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerReal.msg_get_last_error)
  return msg_get_last_error_ != NULL ? *msg_get_last_error_ : *default_instance_->msg_get_last_error_;
}
::video_server_protocol::MessageResponseGetLastError* MessageAnalyzerReal::mutable_msg_get_last_error() {
  set_has_msg_get_last_error();
  if (msg_get_last_error_ == NULL) {
    msg_get_last_error_ = new ::video_server_protocol::MessageResponseGetLastError;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerReal.msg_get_last_error)
  return msg_get_last_error_;
}
::video_server_protocol::MessageResponseGetLastError* MessageAnalyzerReal::release_msg_get_last_error() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerReal.msg_get_last_error)
  clear_has_msg_get_last_error();
  ::video_server_protocol::MessageResponseGetLastError* temp = msg_get_last_error_;
  msg_get_last_error_ = NULL;
  return temp;
}
void MessageAnalyzerReal::set_allocated_msg_get_last_error(::video_server_protocol::MessageResponseGetLastError* msg_get_last_error) {
  delete msg_get_last_error_;
  msg_get_last_error_ = msg_get_last_error;
  if (msg_get_last_error) {
    set_has_msg_get_last_error();
  } else {
    clear_has_msg_get_last_error();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerReal.msg_get_last_error)
}

// optional .video_server_protocol.MessageResponseAnalyticEvent msg_get_accum_events = 11;
bool MessageAnalyzerReal::has_msg_get_accum_events() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void MessageAnalyzerReal::set_has_msg_get_accum_events() {
  _has_bits_[0] |= 0x00000200u;
}
void MessageAnalyzerReal::clear_has_msg_get_accum_events() {
  _has_bits_[0] &= ~0x00000200u;
}
void MessageAnalyzerReal::clear_msg_get_accum_events() {
  if (msg_get_accum_events_ != NULL) msg_get_accum_events_->::video_server_protocol::MessageResponseAnalyticEvent::Clear();
  clear_has_msg_get_accum_events();
}
const ::video_server_protocol::MessageResponseAnalyticEvent& MessageAnalyzerReal::msg_get_accum_events() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageAnalyzerReal.msg_get_accum_events)
  return msg_get_accum_events_ != NULL ? *msg_get_accum_events_ : *default_instance_->msg_get_accum_events_;
}
::video_server_protocol::MessageResponseAnalyticEvent* MessageAnalyzerReal::mutable_msg_get_accum_events() {
  set_has_msg_get_accum_events();
  if (msg_get_accum_events_ == NULL) {
    msg_get_accum_events_ = new ::video_server_protocol::MessageResponseAnalyticEvent;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageAnalyzerReal.msg_get_accum_events)
  return msg_get_accum_events_;
}
::video_server_protocol::MessageResponseAnalyticEvent* MessageAnalyzerReal::release_msg_get_accum_events() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageAnalyzerReal.msg_get_accum_events)
  clear_has_msg_get_accum_events();
  ::video_server_protocol::MessageResponseAnalyticEvent* temp = msg_get_accum_events_;
  msg_get_accum_events_ = NULL;
  return temp;
}
void MessageAnalyzerReal::set_allocated_msg_get_accum_events(::video_server_protocol::MessageResponseAnalyticEvent* msg_get_accum_events) {
  delete msg_get_accum_events_;
  msg_get_accum_events_ = msg_get_accum_events;
  if (msg_get_accum_events) {
    set_has_msg_get_accum_events();
  } else {
    clear_has_msg_get_accum_events();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageAnalyzerReal.msg_get_accum_events)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageResponseStart::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageResponseStart::MessageResponseStart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_server_protocol.MessageResponseStart)
}

void MessageResponseStart::InitAsDefaultInstance() {
}

MessageResponseStart::MessageResponseStart(const MessageResponseStart& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_server_protocol.MessageResponseStart)
}

void MessageResponseStart::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageResponseStart::~MessageResponseStart() {
  // @@protoc_insertion_point(destructor:video_server_protocol.MessageResponseStart)
  SharedDtor();
}

void MessageResponseStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageResponseStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageResponseStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageResponseStart_descriptor_;
}

const MessageResponseStart& MessageResponseStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  return *default_instance_;
}

MessageResponseStart* MessageResponseStart::default_instance_ = NULL;

MessageResponseStart* MessageResponseStart::New(::google::protobuf::Arena* arena) const {
  MessageResponseStart* n = new MessageResponseStart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageResponseStart::Clear() {
// @@protoc_insertion_point(message_clear_start:video_server_protocol.MessageResponseStart)
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MessageResponseStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_server_protocol.MessageResponseStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:video_server_protocol.MessageResponseStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_server_protocol.MessageResponseStart)
  return false;
#undef DO_
}

void MessageResponseStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_server_protocol.MessageResponseStart)
  // required bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_server_protocol.MessageResponseStart)
}

::google::protobuf::uint8* MessageResponseStart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_server_protocol.MessageResponseStart)
  // required bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_server_protocol.MessageResponseStart)
  return target;
}

int MessageResponseStart::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:video_server_protocol.MessageResponseStart)
  int total_size = 0;

  // required bool success = 1;
  if (has_success()) {
    total_size += 1 + 1;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageResponseStart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:video_server_protocol.MessageResponseStart)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageResponseStart* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageResponseStart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:video_server_protocol.MessageResponseStart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:video_server_protocol.MessageResponseStart)
    MergeFrom(*source);
  }
}

void MessageResponseStart::MergeFrom(const MessageResponseStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video_server_protocol.MessageResponseStart)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MessageResponseStart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:video_server_protocol.MessageResponseStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageResponseStart::CopyFrom(const MessageResponseStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video_server_protocol.MessageResponseStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageResponseStart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MessageResponseStart::Swap(MessageResponseStart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageResponseStart::InternalSwap(MessageResponseStart* other) {
  std::swap(success_, other->success_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageResponseStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageResponseStart_descriptor_;
  metadata.reflection = MessageResponseStart_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageResponseStart

// required bool success = 1;
bool MessageResponseStart::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MessageResponseStart::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
void MessageResponseStart::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
void MessageResponseStart::clear_success() {
  success_ = false;
  clear_has_success();
}
 bool MessageResponseStart::success() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageResponseStart.success)
  return success_;
}
 void MessageResponseStart::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:video_server_protocol.MessageResponseStart.success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageResponsePause::MessageResponsePause()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_server_protocol.MessageResponsePause)
}

void MessageResponsePause::InitAsDefaultInstance() {
}

MessageResponsePause::MessageResponsePause(const MessageResponsePause& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_server_protocol.MessageResponsePause)
}

void MessageResponsePause::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageResponsePause::~MessageResponsePause() {
  // @@protoc_insertion_point(destructor:video_server_protocol.MessageResponsePause)
  SharedDtor();
}

void MessageResponsePause::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageResponsePause::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageResponsePause::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageResponsePause_descriptor_;
}

const MessageResponsePause& MessageResponsePause::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  return *default_instance_;
}

MessageResponsePause* MessageResponsePause::default_instance_ = NULL;

MessageResponsePause* MessageResponsePause::New(::google::protobuf::Arena* arena) const {
  MessageResponsePause* n = new MessageResponsePause;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageResponsePause::Clear() {
// @@protoc_insertion_point(message_clear_start:video_server_protocol.MessageResponsePause)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MessageResponsePause::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_server_protocol.MessageResponsePause)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:video_server_protocol.MessageResponsePause)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_server_protocol.MessageResponsePause)
  return false;
#undef DO_
}

void MessageResponsePause::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_server_protocol.MessageResponsePause)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_server_protocol.MessageResponsePause)
}

::google::protobuf::uint8* MessageResponsePause::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_server_protocol.MessageResponsePause)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_server_protocol.MessageResponsePause)
  return target;
}

int MessageResponsePause::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:video_server_protocol.MessageResponsePause)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageResponsePause::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:video_server_protocol.MessageResponsePause)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageResponsePause* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageResponsePause>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:video_server_protocol.MessageResponsePause)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:video_server_protocol.MessageResponsePause)
    MergeFrom(*source);
  }
}

void MessageResponsePause::MergeFrom(const MessageResponsePause& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video_server_protocol.MessageResponsePause)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MessageResponsePause::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:video_server_protocol.MessageResponsePause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageResponsePause::CopyFrom(const MessageResponsePause& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video_server_protocol.MessageResponsePause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageResponsePause::IsInitialized() const {

  return true;
}

void MessageResponsePause::Swap(MessageResponsePause* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageResponsePause::InternalSwap(MessageResponsePause* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageResponsePause::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageResponsePause_descriptor_;
  metadata.reflection = MessageResponsePause_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageResponsePause

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageResponseResume::MessageResponseResume()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_server_protocol.MessageResponseResume)
}

void MessageResponseResume::InitAsDefaultInstance() {
}

MessageResponseResume::MessageResponseResume(const MessageResponseResume& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_server_protocol.MessageResponseResume)
}

void MessageResponseResume::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageResponseResume::~MessageResponseResume() {
  // @@protoc_insertion_point(destructor:video_server_protocol.MessageResponseResume)
  SharedDtor();
}

void MessageResponseResume::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageResponseResume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageResponseResume::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageResponseResume_descriptor_;
}

const MessageResponseResume& MessageResponseResume::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  return *default_instance_;
}

MessageResponseResume* MessageResponseResume::default_instance_ = NULL;

MessageResponseResume* MessageResponseResume::New(::google::protobuf::Arena* arena) const {
  MessageResponseResume* n = new MessageResponseResume;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageResponseResume::Clear() {
// @@protoc_insertion_point(message_clear_start:video_server_protocol.MessageResponseResume)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MessageResponseResume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_server_protocol.MessageResponseResume)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:video_server_protocol.MessageResponseResume)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_server_protocol.MessageResponseResume)
  return false;
#undef DO_
}

void MessageResponseResume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_server_protocol.MessageResponseResume)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_server_protocol.MessageResponseResume)
}

::google::protobuf::uint8* MessageResponseResume::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_server_protocol.MessageResponseResume)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_server_protocol.MessageResponseResume)
  return target;
}

int MessageResponseResume::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:video_server_protocol.MessageResponseResume)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageResponseResume::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:video_server_protocol.MessageResponseResume)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageResponseResume* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageResponseResume>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:video_server_protocol.MessageResponseResume)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:video_server_protocol.MessageResponseResume)
    MergeFrom(*source);
  }
}

void MessageResponseResume::MergeFrom(const MessageResponseResume& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video_server_protocol.MessageResponseResume)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MessageResponseResume::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:video_server_protocol.MessageResponseResume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageResponseResume::CopyFrom(const MessageResponseResume& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video_server_protocol.MessageResponseResume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageResponseResume::IsInitialized() const {

  return true;
}

void MessageResponseResume::Swap(MessageResponseResume* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageResponseResume::InternalSwap(MessageResponseResume* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageResponseResume::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageResponseResume_descriptor_;
  metadata.reflection = MessageResponseResume_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageResponseResume

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageResponseStop::MessageResponseStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_server_protocol.MessageResponseStop)
}

void MessageResponseStop::InitAsDefaultInstance() {
}

MessageResponseStop::MessageResponseStop(const MessageResponseStop& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_server_protocol.MessageResponseStop)
}

void MessageResponseStop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageResponseStop::~MessageResponseStop() {
  // @@protoc_insertion_point(destructor:video_server_protocol.MessageResponseStop)
  SharedDtor();
}

void MessageResponseStop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageResponseStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageResponseStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageResponseStop_descriptor_;
}

const MessageResponseStop& MessageResponseStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  return *default_instance_;
}

MessageResponseStop* MessageResponseStop::default_instance_ = NULL;

MessageResponseStop* MessageResponseStop::New(::google::protobuf::Arena* arena) const {
  MessageResponseStop* n = new MessageResponseStop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageResponseStop::Clear() {
// @@protoc_insertion_point(message_clear_start:video_server_protocol.MessageResponseStop)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MessageResponseStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_server_protocol.MessageResponseStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:video_server_protocol.MessageResponseStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_server_protocol.MessageResponseStop)
  return false;
#undef DO_
}

void MessageResponseStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_server_protocol.MessageResponseStop)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_server_protocol.MessageResponseStop)
}

::google::protobuf::uint8* MessageResponseStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_server_protocol.MessageResponseStop)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_server_protocol.MessageResponseStop)
  return target;
}

int MessageResponseStop::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:video_server_protocol.MessageResponseStop)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageResponseStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:video_server_protocol.MessageResponseStop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageResponseStop* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageResponseStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:video_server_protocol.MessageResponseStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:video_server_protocol.MessageResponseStop)
    MergeFrom(*source);
  }
}

void MessageResponseStop::MergeFrom(const MessageResponseStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video_server_protocol.MessageResponseStop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MessageResponseStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:video_server_protocol.MessageResponseStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageResponseStop::CopyFrom(const MessageResponseStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video_server_protocol.MessageResponseStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageResponseStop::IsInitialized() const {

  return true;
}

void MessageResponseStop::Swap(MessageResponseStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageResponseStop::InternalSwap(MessageResponseStop* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageResponseStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageResponseStop_descriptor_;
  metadata.reflection = MessageResponseStop_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageResponseStop

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageResponseGetStatus::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageResponseGetStatus::MessageResponseGetStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_server_protocol.MessageResponseGetStatus)
}

void MessageResponseGetStatus::InitAsDefaultInstance() {
  status_ = const_cast< ::video_server_protocol::ContainerAnalyzeStatus*>(&::video_server_protocol::ContainerAnalyzeStatus::default_instance());
}

MessageResponseGetStatus::MessageResponseGetStatus(const MessageResponseGetStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_server_protocol.MessageResponseGetStatus)
}

void MessageResponseGetStatus::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageResponseGetStatus::~MessageResponseGetStatus() {
  // @@protoc_insertion_point(destructor:video_server_protocol.MessageResponseGetStatus)
  SharedDtor();
}

void MessageResponseGetStatus::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void MessageResponseGetStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageResponseGetStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageResponseGetStatus_descriptor_;
}

const MessageResponseGetStatus& MessageResponseGetStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  return *default_instance_;
}

MessageResponseGetStatus* MessageResponseGetStatus::default_instance_ = NULL;

MessageResponseGetStatus* MessageResponseGetStatus::New(::google::protobuf::Arena* arena) const {
  MessageResponseGetStatus* n = new MessageResponseGetStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageResponseGetStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:video_server_protocol.MessageResponseGetStatus)
  if (has_status()) {
    if (status_ != NULL) status_->::video_server_protocol::ContainerAnalyzeStatus::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MessageResponseGetStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_server_protocol.MessageResponseGetStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .video_server_protocol.ContainerAnalyzeStatus status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:video_server_protocol.MessageResponseGetStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_server_protocol.MessageResponseGetStatus)
  return false;
#undef DO_
}

void MessageResponseGetStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_server_protocol.MessageResponseGetStatus)
  // required .video_server_protocol.ContainerAnalyzeStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_server_protocol.MessageResponseGetStatus)
}

::google::protobuf::uint8* MessageResponseGetStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_server_protocol.MessageResponseGetStatus)
  // required .video_server_protocol.ContainerAnalyzeStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->status_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_server_protocol.MessageResponseGetStatus)
  return target;
}

int MessageResponseGetStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:video_server_protocol.MessageResponseGetStatus)
  int total_size = 0;

  // required .video_server_protocol.ContainerAnalyzeStatus status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageResponseGetStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:video_server_protocol.MessageResponseGetStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageResponseGetStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageResponseGetStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:video_server_protocol.MessageResponseGetStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:video_server_protocol.MessageResponseGetStatus)
    MergeFrom(*source);
  }
}

void MessageResponseGetStatus::MergeFrom(const MessageResponseGetStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video_server_protocol.MessageResponseGetStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::video_server_protocol::ContainerAnalyzeStatus::MergeFrom(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MessageResponseGetStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:video_server_protocol.MessageResponseGetStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageResponseGetStatus::CopyFrom(const MessageResponseGetStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video_server_protocol.MessageResponseGetStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageResponseGetStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_status()) {
    if (!this->status_->IsInitialized()) return false;
  }
  return true;
}

void MessageResponseGetStatus::Swap(MessageResponseGetStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageResponseGetStatus::InternalSwap(MessageResponseGetStatus* other) {
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageResponseGetStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageResponseGetStatus_descriptor_;
  metadata.reflection = MessageResponseGetStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageResponseGetStatus

// required .video_server_protocol.ContainerAnalyzeStatus status = 1;
bool MessageResponseGetStatus::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MessageResponseGetStatus::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void MessageResponseGetStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void MessageResponseGetStatus::clear_status() {
  if (status_ != NULL) status_->::video_server_protocol::ContainerAnalyzeStatus::Clear();
  clear_has_status();
}
const ::video_server_protocol::ContainerAnalyzeStatus& MessageResponseGetStatus::status() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageResponseGetStatus.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::video_server_protocol::ContainerAnalyzeStatus* MessageResponseGetStatus::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::video_server_protocol::ContainerAnalyzeStatus;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageResponseGetStatus.status)
  return status_;
}
::video_server_protocol::ContainerAnalyzeStatus* MessageResponseGetStatus::release_status() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageResponseGetStatus.status)
  clear_has_status();
  ::video_server_protocol::ContainerAnalyzeStatus* temp = status_;
  status_ = NULL;
  return temp;
}
void MessageResponseGetStatus::set_allocated_status(::video_server_protocol::ContainerAnalyzeStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageResponseGetStatus.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageResponseGetSettings::kSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageResponseGetSettings::MessageResponseGetSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_server_protocol.MessageResponseGetSettings)
}

void MessageResponseGetSettings::InitAsDefaultInstance() {
  settings_ = const_cast< ::video_server_protocol::ContainerInitSettings*>(&::video_server_protocol::ContainerInitSettings::default_instance());
}

MessageResponseGetSettings::MessageResponseGetSettings(const MessageResponseGetSettings& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_server_protocol.MessageResponseGetSettings)
}

void MessageResponseGetSettings::SharedCtor() {
  _cached_size_ = 0;
  settings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageResponseGetSettings::~MessageResponseGetSettings() {
  // @@protoc_insertion_point(destructor:video_server_protocol.MessageResponseGetSettings)
  SharedDtor();
}

void MessageResponseGetSettings::SharedDtor() {
  if (this != default_instance_) {
    delete settings_;
  }
}

void MessageResponseGetSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageResponseGetSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageResponseGetSettings_descriptor_;
}

const MessageResponseGetSettings& MessageResponseGetSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  return *default_instance_;
}

MessageResponseGetSettings* MessageResponseGetSettings::default_instance_ = NULL;

MessageResponseGetSettings* MessageResponseGetSettings::New(::google::protobuf::Arena* arena) const {
  MessageResponseGetSettings* n = new MessageResponseGetSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageResponseGetSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:video_server_protocol.MessageResponseGetSettings)
  if (has_settings()) {
    if (settings_ != NULL) settings_->::video_server_protocol::ContainerInitSettings::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MessageResponseGetSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_server_protocol.MessageResponseGetSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .video_server_protocol.ContainerInitSettings settings = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:video_server_protocol.MessageResponseGetSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_server_protocol.MessageResponseGetSettings)
  return false;
#undef DO_
}

void MessageResponseGetSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_server_protocol.MessageResponseGetSettings)
  // required .video_server_protocol.ContainerInitSettings settings = 1;
  if (has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->settings_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_server_protocol.MessageResponseGetSettings)
}

::google::protobuf::uint8* MessageResponseGetSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_server_protocol.MessageResponseGetSettings)
  // required .video_server_protocol.ContainerInitSettings settings = 1;
  if (has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->settings_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_server_protocol.MessageResponseGetSettings)
  return target;
}

int MessageResponseGetSettings::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:video_server_protocol.MessageResponseGetSettings)
  int total_size = 0;

  // required .video_server_protocol.ContainerInitSettings settings = 1;
  if (has_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->settings_);
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageResponseGetSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:video_server_protocol.MessageResponseGetSettings)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageResponseGetSettings* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageResponseGetSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:video_server_protocol.MessageResponseGetSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:video_server_protocol.MessageResponseGetSettings)
    MergeFrom(*source);
  }
}

void MessageResponseGetSettings::MergeFrom(const MessageResponseGetSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video_server_protocol.MessageResponseGetSettings)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_settings()) {
      mutable_settings()->::video_server_protocol::ContainerInitSettings::MergeFrom(from.settings());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MessageResponseGetSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:video_server_protocol.MessageResponseGetSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageResponseGetSettings::CopyFrom(const MessageResponseGetSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video_server_protocol.MessageResponseGetSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageResponseGetSettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_settings()) {
    if (!this->settings_->IsInitialized()) return false;
  }
  return true;
}

void MessageResponseGetSettings::Swap(MessageResponseGetSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageResponseGetSettings::InternalSwap(MessageResponseGetSettings* other) {
  std::swap(settings_, other->settings_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageResponseGetSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageResponseGetSettings_descriptor_;
  metadata.reflection = MessageResponseGetSettings_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageResponseGetSettings

// required .video_server_protocol.ContainerInitSettings settings = 1;
bool MessageResponseGetSettings::has_settings() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MessageResponseGetSettings::set_has_settings() {
  _has_bits_[0] |= 0x00000001u;
}
void MessageResponseGetSettings::clear_has_settings() {
  _has_bits_[0] &= ~0x00000001u;
}
void MessageResponseGetSettings::clear_settings() {
  if (settings_ != NULL) settings_->::video_server_protocol::ContainerInitSettings::Clear();
  clear_has_settings();
}
const ::video_server_protocol::ContainerInitSettings& MessageResponseGetSettings::settings() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageResponseGetSettings.settings)
  return settings_ != NULL ? *settings_ : *default_instance_->settings_;
}
::video_server_protocol::ContainerInitSettings* MessageResponseGetSettings::mutable_settings() {
  set_has_settings();
  if (settings_ == NULL) {
    settings_ = new ::video_server_protocol::ContainerInitSettings;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageResponseGetSettings.settings)
  return settings_;
}
::video_server_protocol::ContainerInitSettings* MessageResponseGetSettings::release_settings() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageResponseGetSettings.settings)
  clear_has_settings();
  ::video_server_protocol::ContainerInitSettings* temp = settings_;
  settings_ = NULL;
  return temp;
}
void MessageResponseGetSettings::set_allocated_settings(::video_server_protocol::ContainerInitSettings* settings) {
  delete settings_;
  settings_ = settings;
  if (settings) {
    set_has_settings();
  } else {
    clear_has_settings();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageResponseGetSettings.settings)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageResponseGetLastError::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageResponseGetLastError::MessageResponseGetLastError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_server_protocol.MessageResponseGetLastError)
}

void MessageResponseGetLastError::InitAsDefaultInstance() {
}

MessageResponseGetLastError::MessageResponseGetLastError(const MessageResponseGetLastError& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_server_protocol.MessageResponseGetLastError)
}

void MessageResponseGetLastError::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageResponseGetLastError::~MessageResponseGetLastError() {
  // @@protoc_insertion_point(destructor:video_server_protocol.MessageResponseGetLastError)
  SharedDtor();
}

void MessageResponseGetLastError::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MessageResponseGetLastError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageResponseGetLastError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageResponseGetLastError_descriptor_;
}

const MessageResponseGetLastError& MessageResponseGetLastError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  return *default_instance_;
}

MessageResponseGetLastError* MessageResponseGetLastError::default_instance_ = NULL;

MessageResponseGetLastError* MessageResponseGetLastError::New(::google::protobuf::Arena* arena) const {
  MessageResponseGetLastError* n = new MessageResponseGetLastError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageResponseGetLastError::Clear() {
// @@protoc_insertion_point(message_clear_start:video_server_protocol.MessageResponseGetLastError)
  if (has_message()) {
    message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MessageResponseGetLastError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_server_protocol.MessageResponseGetLastError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "video_server_protocol.MessageResponseGetLastError.message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:video_server_protocol.MessageResponseGetLastError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_server_protocol.MessageResponseGetLastError)
  return false;
#undef DO_
}

void MessageResponseGetLastError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_server_protocol.MessageResponseGetLastError)
  // required string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.MessageResponseGetLastError.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_server_protocol.MessageResponseGetLastError)
}

::google::protobuf::uint8* MessageResponseGetLastError::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_server_protocol.MessageResponseGetLastError)
  // required string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_server_protocol.MessageResponseGetLastError.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_server_protocol.MessageResponseGetLastError)
  return target;
}

int MessageResponseGetLastError::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:video_server_protocol.MessageResponseGetLastError)
  int total_size = 0;

  // required string message = 1;
  if (has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageResponseGetLastError::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:video_server_protocol.MessageResponseGetLastError)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageResponseGetLastError* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageResponseGetLastError>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:video_server_protocol.MessageResponseGetLastError)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:video_server_protocol.MessageResponseGetLastError)
    MergeFrom(*source);
  }
}

void MessageResponseGetLastError::MergeFrom(const MessageResponseGetLastError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video_server_protocol.MessageResponseGetLastError)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MessageResponseGetLastError::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:video_server_protocol.MessageResponseGetLastError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageResponseGetLastError::CopyFrom(const MessageResponseGetLastError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video_server_protocol.MessageResponseGetLastError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageResponseGetLastError::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MessageResponseGetLastError::Swap(MessageResponseGetLastError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageResponseGetLastError::InternalSwap(MessageResponseGetLastError* other) {
  message_.Swap(&other->message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageResponseGetLastError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageResponseGetLastError_descriptor_;
  metadata.reflection = MessageResponseGetLastError_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageResponseGetLastError

// required string message = 1;
bool MessageResponseGetLastError::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MessageResponseGetLastError::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void MessageResponseGetLastError::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void MessageResponseGetLastError::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
 const ::std::string& MessageResponseGetLastError::message() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageResponseGetLastError.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageResponseGetLastError::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_server_protocol.MessageResponseGetLastError.message)
}
 void MessageResponseGetLastError::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_server_protocol.MessageResponseGetLastError.message)
}
 void MessageResponseGetLastError::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_server_protocol.MessageResponseGetLastError.message)
}
 ::std::string* MessageResponseGetLastError::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageResponseGetLastError.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MessageResponseGetLastError::release_message() {
  // @@protoc_insertion_point(field_release:video_server_protocol.MessageResponseGetLastError.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageResponseGetLastError::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.MessageResponseGetLastError.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageResponseAnalyticEvent::kEventsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageResponseAnalyticEvent::MessageResponseAnalyticEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_server_protocol.MessageResponseAnalyticEvent)
}

void MessageResponseAnalyticEvent::InitAsDefaultInstance() {
}

MessageResponseAnalyticEvent::MessageResponseAnalyticEvent(const MessageResponseAnalyticEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_server_protocol.MessageResponseAnalyticEvent)
}

void MessageResponseAnalyticEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageResponseAnalyticEvent::~MessageResponseAnalyticEvent() {
  // @@protoc_insertion_point(destructor:video_server_protocol.MessageResponseAnalyticEvent)
  SharedDtor();
}

void MessageResponseAnalyticEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageResponseAnalyticEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageResponseAnalyticEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageResponseAnalyticEvent_descriptor_;
}

const MessageResponseAnalyticEvent& MessageResponseAnalyticEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  return *default_instance_;
}

MessageResponseAnalyticEvent* MessageResponseAnalyticEvent::default_instance_ = NULL;

MessageResponseAnalyticEvent* MessageResponseAnalyticEvent::New(::google::protobuf::Arena* arena) const {
  MessageResponseAnalyticEvent* n = new MessageResponseAnalyticEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageResponseAnalyticEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:video_server_protocol.MessageResponseAnalyticEvent)
  events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MessageResponseAnalyticEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_server_protocol.MessageResponseAnalyticEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .video_server_protocol.ContainerAnalyticEvent events = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_events;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:video_server_protocol.MessageResponseAnalyticEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_server_protocol.MessageResponseAnalyticEvent)
  return false;
#undef DO_
}

void MessageResponseAnalyticEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_server_protocol.MessageResponseAnalyticEvent)
  // repeated .video_server_protocol.ContainerAnalyticEvent events = 1;
  for (unsigned int i = 0, n = this->events_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->events(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_server_protocol.MessageResponseAnalyticEvent)
}

::google::protobuf::uint8* MessageResponseAnalyticEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_server_protocol.MessageResponseAnalyticEvent)
  // repeated .video_server_protocol.ContainerAnalyticEvent events = 1;
  for (unsigned int i = 0, n = this->events_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->events(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_server_protocol.MessageResponseAnalyticEvent)
  return target;
}

int MessageResponseAnalyticEvent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:video_server_protocol.MessageResponseAnalyticEvent)
  int total_size = 0;

  // repeated .video_server_protocol.ContainerAnalyticEvent events = 1;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageResponseAnalyticEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:video_server_protocol.MessageResponseAnalyticEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageResponseAnalyticEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageResponseAnalyticEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:video_server_protocol.MessageResponseAnalyticEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:video_server_protocol.MessageResponseAnalyticEvent)
    MergeFrom(*source);
  }
}

void MessageResponseAnalyticEvent::MergeFrom(const MessageResponseAnalyticEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video_server_protocol.MessageResponseAnalyticEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  events_.MergeFrom(from.events_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MessageResponseAnalyticEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:video_server_protocol.MessageResponseAnalyticEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageResponseAnalyticEvent::CopyFrom(const MessageResponseAnalyticEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video_server_protocol.MessageResponseAnalyticEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageResponseAnalyticEvent::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->events())) return false;
  return true;
}

void MessageResponseAnalyticEvent::Swap(MessageResponseAnalyticEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageResponseAnalyticEvent::InternalSwap(MessageResponseAnalyticEvent* other) {
  events_.UnsafeArenaSwap(&other->events_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageResponseAnalyticEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageResponseAnalyticEvent_descriptor_;
  metadata.reflection = MessageResponseAnalyticEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageResponseAnalyticEvent

// repeated .video_server_protocol.ContainerAnalyticEvent events = 1;
int MessageResponseAnalyticEvent::events_size() const {
  return events_.size();
}
void MessageResponseAnalyticEvent::clear_events() {
  events_.Clear();
}
const ::video_server_protocol::ContainerAnalyticEvent& MessageResponseAnalyticEvent::events(int index) const {
  // @@protoc_insertion_point(field_get:video_server_protocol.MessageResponseAnalyticEvent.events)
  return events_.Get(index);
}
::video_server_protocol::ContainerAnalyticEvent* MessageResponseAnalyticEvent::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:video_server_protocol.MessageResponseAnalyticEvent.events)
  return events_.Mutable(index);
}
::video_server_protocol::ContainerAnalyticEvent* MessageResponseAnalyticEvent::add_events() {
  // @@protoc_insertion_point(field_add:video_server_protocol.MessageResponseAnalyticEvent.events)
  return events_.Add();
}
::google::protobuf::RepeatedPtrField< ::video_server_protocol::ContainerAnalyticEvent >*
MessageResponseAnalyticEvent::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:video_server_protocol.MessageResponseAnalyticEvent.events)
  return &events_;
}
const ::google::protobuf::RepeatedPtrField< ::video_server_protocol::ContainerAnalyticEvent >&
MessageResponseAnalyticEvent::events() const {
  // @@protoc_insertion_point(field_list:video_server_protocol.MessageResponseAnalyticEvent.events)
  return events_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtobufInternalCommunicateAnalyzer::kSenderFieldNumber;
const int ProtobufInternalCommunicateAnalyzer::kMsgProxyFieldNumber;
const int ProtobufInternalCommunicateAnalyzer::kMsgRealFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtobufInternalCommunicateAnalyzer::ProtobufInternalCommunicateAnalyzer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_server_protocol.ProtobufInternalCommunicateAnalyzer)
}

void ProtobufInternalCommunicateAnalyzer::InitAsDefaultInstance() {
  msg_proxy_ = const_cast< ::video_server_protocol::MessageAnalyzerProxy*>(&::video_server_protocol::MessageAnalyzerProxy::default_instance());
  msg_real_ = const_cast< ::video_server_protocol::MessageAnalyzerReal*>(&::video_server_protocol::MessageAnalyzerReal::default_instance());
}

ProtobufInternalCommunicateAnalyzer::ProtobufInternalCommunicateAnalyzer(const ProtobufInternalCommunicateAnalyzer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_server_protocol.ProtobufInternalCommunicateAnalyzer)
}

void ProtobufInternalCommunicateAnalyzer::SharedCtor() {
  _cached_size_ = 0;
  sender_ = 0;
  msg_proxy_ = NULL;
  msg_real_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtobufInternalCommunicateAnalyzer::~ProtobufInternalCommunicateAnalyzer() {
  // @@protoc_insertion_point(destructor:video_server_protocol.ProtobufInternalCommunicateAnalyzer)
  SharedDtor();
}

void ProtobufInternalCommunicateAnalyzer::SharedDtor() {
  if (this != default_instance_) {
    delete msg_proxy_;
    delete msg_real_;
  }
}

void ProtobufInternalCommunicateAnalyzer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtobufInternalCommunicateAnalyzer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtobufInternalCommunicateAnalyzer_descriptor_;
}

const ProtobufInternalCommunicateAnalyzer& ProtobufInternalCommunicateAnalyzer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_internal_5fcommunication_5fanalyzer_2eproto();
  return *default_instance_;
}

ProtobufInternalCommunicateAnalyzer* ProtobufInternalCommunicateAnalyzer::default_instance_ = NULL;

ProtobufInternalCommunicateAnalyzer* ProtobufInternalCommunicateAnalyzer::New(::google::protobuf::Arena* arena) const {
  ProtobufInternalCommunicateAnalyzer* n = new ProtobufInternalCommunicateAnalyzer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtobufInternalCommunicateAnalyzer::Clear() {
// @@protoc_insertion_point(message_clear_start:video_server_protocol.ProtobufInternalCommunicateAnalyzer)
  if (_has_bits_[0 / 32] & 7u) {
    sender_ = 0;
    if (has_msg_proxy()) {
      if (msg_proxy_ != NULL) msg_proxy_->::video_server_protocol::MessageAnalyzerProxy::Clear();
    }
    if (has_msg_real()) {
      if (msg_real_ != NULL) msg_real_->::video_server_protocol::MessageAnalyzerReal::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ProtobufInternalCommunicateAnalyzer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_server_protocol.ProtobufInternalCommunicateAnalyzer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .video_server_protocol.EWho sender = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::video_server_protocol::EWho_IsValid(value)) {
            set_sender(static_cast< ::video_server_protocol::EWho >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg_proxy;
        break;
      }

      // optional .video_server_protocol.MessageAnalyzerProxy msg_proxy = 2;
      case 2: {
        if (tag == 18) {
         parse_msg_proxy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_proxy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msg_real;
        break;
      }

      // optional .video_server_protocol.MessageAnalyzerReal msg_real = 3;
      case 3: {
        if (tag == 26) {
         parse_msg_real:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_real()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:video_server_protocol.ProtobufInternalCommunicateAnalyzer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_server_protocol.ProtobufInternalCommunicateAnalyzer)
  return false;
#undef DO_
}

void ProtobufInternalCommunicateAnalyzer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_server_protocol.ProtobufInternalCommunicateAnalyzer)
  // required .video_server_protocol.EWho sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->sender(), output);
  }

  // optional .video_server_protocol.MessageAnalyzerProxy msg_proxy = 2;
  if (has_msg_proxy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->msg_proxy_, output);
  }

  // optional .video_server_protocol.MessageAnalyzerReal msg_real = 3;
  if (has_msg_real()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->msg_real_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_server_protocol.ProtobufInternalCommunicateAnalyzer)
}

::google::protobuf::uint8* ProtobufInternalCommunicateAnalyzer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_server_protocol.ProtobufInternalCommunicateAnalyzer)
  // required .video_server_protocol.EWho sender = 1;
  if (has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->sender(), target);
  }

  // optional .video_server_protocol.MessageAnalyzerProxy msg_proxy = 2;
  if (has_msg_proxy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->msg_proxy_, false, target);
  }

  // optional .video_server_protocol.MessageAnalyzerReal msg_real = 3;
  if (has_msg_real()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->msg_real_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_server_protocol.ProtobufInternalCommunicateAnalyzer)
  return target;
}

int ProtobufInternalCommunicateAnalyzer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:video_server_protocol.ProtobufInternalCommunicateAnalyzer)
  int total_size = 0;

  // required .video_server_protocol.EWho sender = 1;
  if (has_sender()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sender());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional .video_server_protocol.MessageAnalyzerProxy msg_proxy = 2;
    if (has_msg_proxy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->msg_proxy_);
    }

    // optional .video_server_protocol.MessageAnalyzerReal msg_real = 3;
    if (has_msg_real()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->msg_real_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtobufInternalCommunicateAnalyzer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:video_server_protocol.ProtobufInternalCommunicateAnalyzer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ProtobufInternalCommunicateAnalyzer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtobufInternalCommunicateAnalyzer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:video_server_protocol.ProtobufInternalCommunicateAnalyzer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:video_server_protocol.ProtobufInternalCommunicateAnalyzer)
    MergeFrom(*source);
  }
}

void ProtobufInternalCommunicateAnalyzer::MergeFrom(const ProtobufInternalCommunicateAnalyzer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video_server_protocol.ProtobufInternalCommunicateAnalyzer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_msg_proxy()) {
      mutable_msg_proxy()->::video_server_protocol::MessageAnalyzerProxy::MergeFrom(from.msg_proxy());
    }
    if (from.has_msg_real()) {
      mutable_msg_real()->::video_server_protocol::MessageAnalyzerReal::MergeFrom(from.msg_real());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ProtobufInternalCommunicateAnalyzer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:video_server_protocol.ProtobufInternalCommunicateAnalyzer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtobufInternalCommunicateAnalyzer::CopyFrom(const ProtobufInternalCommunicateAnalyzer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video_server_protocol.ProtobufInternalCommunicateAnalyzer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufInternalCommunicateAnalyzer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_msg_proxy()) {
    if (!this->msg_proxy_->IsInitialized()) return false;
  }
  if (has_msg_real()) {
    if (!this->msg_real_->IsInitialized()) return false;
  }
  return true;
}

void ProtobufInternalCommunicateAnalyzer::Swap(ProtobufInternalCommunicateAnalyzer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtobufInternalCommunicateAnalyzer::InternalSwap(ProtobufInternalCommunicateAnalyzer* other) {
  std::swap(sender_, other->sender_);
  std::swap(msg_proxy_, other->msg_proxy_);
  std::swap(msg_real_, other->msg_real_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtobufInternalCommunicateAnalyzer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtobufInternalCommunicateAnalyzer_descriptor_;
  metadata.reflection = ProtobufInternalCommunicateAnalyzer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtobufInternalCommunicateAnalyzer

// required .video_server_protocol.EWho sender = 1;
bool ProtobufInternalCommunicateAnalyzer::has_sender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProtobufInternalCommunicateAnalyzer::set_has_sender() {
  _has_bits_[0] |= 0x00000001u;
}
void ProtobufInternalCommunicateAnalyzer::clear_has_sender() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProtobufInternalCommunicateAnalyzer::clear_sender() {
  sender_ = 0;
  clear_has_sender();
}
 ::video_server_protocol::EWho ProtobufInternalCommunicateAnalyzer::sender() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ProtobufInternalCommunicateAnalyzer.sender)
  return static_cast< ::video_server_protocol::EWho >(sender_);
}
 void ProtobufInternalCommunicateAnalyzer::set_sender(::video_server_protocol::EWho value) {
  assert(::video_server_protocol::EWho_IsValid(value));
  set_has_sender();
  sender_ = value;
  // @@protoc_insertion_point(field_set:video_server_protocol.ProtobufInternalCommunicateAnalyzer.sender)
}

// optional .video_server_protocol.MessageAnalyzerProxy msg_proxy = 2;
bool ProtobufInternalCommunicateAnalyzer::has_msg_proxy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProtobufInternalCommunicateAnalyzer::set_has_msg_proxy() {
  _has_bits_[0] |= 0x00000002u;
}
void ProtobufInternalCommunicateAnalyzer::clear_has_msg_proxy() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProtobufInternalCommunicateAnalyzer::clear_msg_proxy() {
  if (msg_proxy_ != NULL) msg_proxy_->::video_server_protocol::MessageAnalyzerProxy::Clear();
  clear_has_msg_proxy();
}
const ::video_server_protocol::MessageAnalyzerProxy& ProtobufInternalCommunicateAnalyzer::msg_proxy() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ProtobufInternalCommunicateAnalyzer.msg_proxy)
  return msg_proxy_ != NULL ? *msg_proxy_ : *default_instance_->msg_proxy_;
}
::video_server_protocol::MessageAnalyzerProxy* ProtobufInternalCommunicateAnalyzer::mutable_msg_proxy() {
  set_has_msg_proxy();
  if (msg_proxy_ == NULL) {
    msg_proxy_ = new ::video_server_protocol::MessageAnalyzerProxy;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ProtobufInternalCommunicateAnalyzer.msg_proxy)
  return msg_proxy_;
}
::video_server_protocol::MessageAnalyzerProxy* ProtobufInternalCommunicateAnalyzer::release_msg_proxy() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ProtobufInternalCommunicateAnalyzer.msg_proxy)
  clear_has_msg_proxy();
  ::video_server_protocol::MessageAnalyzerProxy* temp = msg_proxy_;
  msg_proxy_ = NULL;
  return temp;
}
void ProtobufInternalCommunicateAnalyzer::set_allocated_msg_proxy(::video_server_protocol::MessageAnalyzerProxy* msg_proxy) {
  delete msg_proxy_;
  msg_proxy_ = msg_proxy;
  if (msg_proxy) {
    set_has_msg_proxy();
  } else {
    clear_has_msg_proxy();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ProtobufInternalCommunicateAnalyzer.msg_proxy)
}

// optional .video_server_protocol.MessageAnalyzerReal msg_real = 3;
bool ProtobufInternalCommunicateAnalyzer::has_msg_real() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ProtobufInternalCommunicateAnalyzer::set_has_msg_real() {
  _has_bits_[0] |= 0x00000004u;
}
void ProtobufInternalCommunicateAnalyzer::clear_has_msg_real() {
  _has_bits_[0] &= ~0x00000004u;
}
void ProtobufInternalCommunicateAnalyzer::clear_msg_real() {
  if (msg_real_ != NULL) msg_real_->::video_server_protocol::MessageAnalyzerReal::Clear();
  clear_has_msg_real();
}
const ::video_server_protocol::MessageAnalyzerReal& ProtobufInternalCommunicateAnalyzer::msg_real() const {
  // @@protoc_insertion_point(field_get:video_server_protocol.ProtobufInternalCommunicateAnalyzer.msg_real)
  return msg_real_ != NULL ? *msg_real_ : *default_instance_->msg_real_;
}
::video_server_protocol::MessageAnalyzerReal* ProtobufInternalCommunicateAnalyzer::mutable_msg_real() {
  set_has_msg_real();
  if (msg_real_ == NULL) {
    msg_real_ = new ::video_server_protocol::MessageAnalyzerReal;
  }
  // @@protoc_insertion_point(field_mutable:video_server_protocol.ProtobufInternalCommunicateAnalyzer.msg_real)
  return msg_real_;
}
::video_server_protocol::MessageAnalyzerReal* ProtobufInternalCommunicateAnalyzer::release_msg_real() {
  // @@protoc_insertion_point(field_release:video_server_protocol.ProtobufInternalCommunicateAnalyzer.msg_real)
  clear_has_msg_real();
  ::video_server_protocol::MessageAnalyzerReal* temp = msg_real_;
  msg_real_ = NULL;
  return temp;
}
void ProtobufInternalCommunicateAnalyzer::set_allocated_msg_real(::video_server_protocol::MessageAnalyzerReal* msg_real) {
  delete msg_real_;
  msg_real_ = msg_real;
  if (msg_real) {
    set_has_msg_real();
  } else {
    clear_has_msg_real();
  }
  // @@protoc_insertion_point(field_set_allocated:video_server_protocol.ProtobufInternalCommunicateAnalyzer.msg_real)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace video_server_protocol

// @@protoc_insertion_point(global_scope)
